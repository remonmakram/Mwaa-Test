/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Create target table  */
DECLARE  
    table_exists NUMBER;  
BEGIN  
    -- Check if the table exists  
    SELECT COUNT(*)  
    INTO table_exists  
    FROM all_tables  
    WHERE table_name = 'STG_ACCT_COMM_PMT_REQ' AND owner = 'RAX_APP_USER';  
  
    -- If the table does not exist, create it  
    IF table_exists = 0 THEN  
        EXECUTE IMMEDIATE '  
            create table RAX_APP_USER.STG_ACCT_COMM_PMT_REQ
			(
				APPROVAL_STATUS	VARCHAR2(255) NULL,
				PAYMENT_REQUEST_TYPE	VARCHAR2(255) NULL,
				DESCRIPTION	VARCHAR2(255) NULL,
				RECEIPT_AMOUNT	NUMBER(19,2) NULL,
				PURCHASE_DATE	TIMESTAMP(6) NULL,
				ORIGINALLY_CHARGED_ID	NUMBER(19) NULL,
				ADDRESS_TYPE	VARCHAR2(255) NULL,
				CONTACT_OID	NUMBER(19) NULL,
				UPDATED_BY	VARCHAR2(255) NULL,
				QUESTION_CALL_COMMENT	VARCHAR2(205) NULL,
				THANK_YOU_COMMENT	VARCHAR2(205) NULL,
				CITY	VARCHAR2(60) NULL,
				LAST_UPDATED	TIMESTAMP(6) NULL,
				SHIP_TO	VARCHAR2(255) NULL,
				STATE	VARCHAR2(60) NULL,
				CREATED_BY	VARCHAR2(255) NULL,
				CURRENCY	VARCHAR2(255) NULL,
				REQUEST_DATE	DATE NULL,
				ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
				POSTAL_CODE	VARCHAR2(60) NULL,
				ATTENTION_TO	VARCHAR2(100) NULL,
				ADDRESS_LINE1	VARCHAR2(120) NULL,
				APO_ID	VARCHAR2(30) NULL,
				ADDRESS_LINE2	VARCHAR2(120) NULL,
				DATE_CREATED	TIMESTAMP(6) NULL,
				APO_OID	NUMBER NULL,
				PAYMENT_AMOUNT	NUMBER(19,2) NULL,
				EVENT_OID	NUMBER(19) NULL
			)
  
        ';  
    END IF;  
END;

-- create table RAX_APP_USER.STG_ACCT_COMM_PMT_REQ
-- (
-- 	APPROVAL_STATUS	VARCHAR2(255) NULL,
-- 	PAYMENT_REQUEST_TYPE	VARCHAR2(255) NULL,
-- 	DESCRIPTION	VARCHAR2(255) NULL,
-- 	RECEIPT_AMOUNT	NUMBER(19,2) NULL,
-- 	PURCHASE_DATE	TIMESTAMP(6) NULL,
-- 	ORIGINALLY_CHARGED_ID	NUMBER(19) NULL,
-- 	ADDRESS_TYPE	VARCHAR2(255) NULL,
-- 	CONTACT_OID	NUMBER(19) NULL,
-- 	UPDATED_BY	VARCHAR2(255) NULL,
-- 	QUESTION_CALL_COMMENT	VARCHAR2(205) NULL,
-- 	THANK_YOU_COMMENT	VARCHAR2(205) NULL,
-- 	CITY	VARCHAR2(60) NULL,
-- 	LAST_UPDATED	TIMESTAMP(6) NULL,
-- 	SHIP_TO	VARCHAR2(255) NULL,
-- 	STATE	VARCHAR2(60) NULL,
-- 	CREATED_BY	VARCHAR2(255) NULL,
-- 	CURRENCY	VARCHAR2(255) NULL,
-- 	REQUEST_DATE	DATE NULL,
-- 	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
-- 	POSTAL_CODE	VARCHAR2(60) NULL,
-- 	ATTENTION_TO	VARCHAR2(100) NULL,
-- 	ADDRESS_LINE1	VARCHAR2(120) NULL,
-- 	APO_ID	VARCHAR2(30) NULL,
-- 	ADDRESS_LINE2	VARCHAR2(120) NULL,
-- 	DATE_CREATED	TIMESTAMP(6) NULL,
-- 	APO_OID	NUMBER NULL,
-- 	PAYMENT_AMOUNT	NUMBER(19,2) NULL,
-- 	EVENT_OID	NUMBER(19) NULL
-- )

&


/*-----------------------------------------------*/
/* TASK No. 5 */
/* Truncate target table */

truncate table RAX_APP_USER.STG_ACCT_COMM_PMT_REQ


&


/*-----------------------------------------------*/
/* TASK No. 6 */
/* Insert new rows */

 
insert into	RAX_APP_USER.STG_ACCT_COMM_PMT_REQ 
( 
	APPROVAL_STATUS,
	PAYMENT_REQUEST_TYPE,
	DESCRIPTION,
	RECEIPT_AMOUNT,
	PURCHASE_DATE,
	ORIGINALLY_CHARGED_ID,
	ADDRESS_TYPE,
	CONTACT_OID,
	UPDATED_BY,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	CITY,
	LAST_UPDATED,
	SHIP_TO,
	STATE,
	CREATED_BY,
	CURRENCY,
	REQUEST_DATE,
	ACCT_COMM_PMT_REQ_ID,
	POSTAL_CODE,
	ATTENTION_TO,
	ADDRESS_LINE1,
	APO_ID,
	ADDRESS_LINE2,
	DATE_CREATED,
	APO_OID,
	PAYMENT_AMOUNT,
	EVENT_OID 
	 
) 

select
    APPROVAL_STATUS,
	PAYMENT_REQUEST_TYPE,
	DESCRIPTION,
	RECEIPT_AMOUNT,
	PURCHASE_DATE,
	ORIGINALLY_CHARGED_ID,
	ADDRESS_TYPE,
	CONTACT_OID,
	UPDATED_BY,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	CITY,
	LAST_UPDATED,
	SHIP_TO,
	STATE,
	CREATED_BY,
	CURRENCY,
	REQUEST_DATE,
	ACCT_COMM_PMT_REQ_ID,
	POSTAL_CODE,
	ATTENTION_TO,
	ADDRESS_LINE1,
	APO_ID,
	ADDRESS_LINE2,
	DATE_CREATED,
	APO_OID,
	PAYMENT_AMOUNT,
	EVENT_OID   
   
FROM (	


select 	
	ACCT_COMM_PMT_REQ.APPROVAL_STATUS APPROVAL_STATUS,
	ACCT_COMM_PMT_REQ.PAYMENT_REQUEST_TYPE PAYMENT_REQUEST_TYPE,
	ACCT_COMM_PMT_REQ.DESCRIPTION DESCRIPTION,
	ACCT_COMM_PMT_REQ.RECEIPT_AMOUNT RECEIPT_AMOUNT,
	ACCT_COMM_PMT_REQ.PURCHASE_DATE PURCHASE_DATE,
	ACCT_COMM_PMT_REQ.ORIGINALLY_CHARGED_ID ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ.ADDRESS_TYPE ADDRESS_TYPE,
	ACCT_COMM_PMT_REQ.CONTACT_OID CONTACT_OID,
	ACCT_COMM_PMT_REQ.UPDATED_BY UPDATED_BY,
	ACCT_COMM_PMT_REQ.QUESTION_CALL_COMMENT QUESTION_CALL_COMMENT,
	ACCT_COMM_PMT_REQ.THANK_YOU_COMMENT THANK_YOU_COMMENT,
	ACCT_COMM_PMT_REQ.CITY CITY,
	ACCT_COMM_PMT_REQ.LAST_UPDATED LAST_UPDATED,
	ACCT_COMM_PMT_REQ.SHIP_TO SHIP_TO,
	ACCT_COMM_PMT_REQ.STATE STATE,
	ACCT_COMM_PMT_REQ.CREATED_BY CREATED_BY,
	ACCT_COMM_PMT_REQ.CURRENCY CURRENCY,
	ACCT_COMM_PMT_REQ.REQUEST_DATE REQUEST_DATE,
	ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID,
	ACCT_COMM_PMT_REQ.POSTAL_CODE POSTAL_CODE,
	ACCT_COMM_PMT_REQ.ATTENTION_TO ATTENTION_TO,
	ACCT_COMM_PMT_REQ.ADDRESS_LINE1 ADDRESS_LINE1,
	ACCT_COMM_PMT_REQ.APO_ID APO_ID,
	ACCT_COMM_PMT_REQ.ADDRESS_LINE2 ADDRESS_LINE2,
	ACCT_COMM_PMT_REQ.DATE_CREATED DATE_CREATED,
	ACCT_COMM_PMT_REQ.APO_OID APO_OID,
	ACCT_COMM_PMT_REQ.PAYMENT_AMOUNT PAYMENT_AMOUNT,
	ACCT_COMM_PMT_REQ.EVENT_OID EVENT_OID 
from	SRM_OWN.ACCT_COMM_PMT_REQ   ACCT_COMM_PMT_REQ
where		(1=1)	

And (ACCT_COMM_PMT_REQ.LAST_UPDATED >= TO_DATE(SUBSTR(:v_cdc_load_date,1,19),'YYYY-MM-DD HH24:MI:SS') - :v_cdc_oms_overlap)




)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 8 */
/* Insert new rows */

 
insert into	ODS_STAGE.SRM_ACCT_COMM_PMT_REQ_XR 
( 
	ACCT_COMM_PMT_REQ_ID,
	APO_ID 
	,ACCT_COMM_PMT_REQ_OID,
	ODS_CREATE_DATE 
) 

select
    ACCT_COMM_PMT_REQ_ID,
	APO_ID   
  ,ODS_STAGE.ACCT_COMM_PMT_REQ_OID_SEQ.nextval,
	SYSDATE 
FROM (	


select 	
	STGPR.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID,
	STGPR.APO_ID APO_ID 
from	RAX_APP_USER.STG_ACCT_COMM_PMT_REQ   STGPR, ODS_STAGE.SRM_ACCT_COMM_PMT_REQ_XR   SRM_ACCT_COMM_PMT_REQ_XR
where		(1=1)	
 And (STGPR.ACCT_COMM_PMT_REQ_ID=SRM_ACCT_COMM_PMT_REQ_XR.ACCT_COMM_PMT_REQ_ID(+)
AND SRM_ACCT_COMM_PMT_REQ_XR.ACCT_COMM_PMT_REQ_ID IS NULL)





)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 10 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 10 */




/*-----------------------------------------------*/
/* TASK No. 11 */
/* Drop flow table */
BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 ';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END; 
-- drop table RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 

&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
(
	ACCT_COMM_PMT_REQ_OID	NUMBER NULL,
	APO_OID	NUMBER NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	CONTACT_OID	NUMBER NULL,
	PAYMENT_AMOUNT	NUMBER NULL,
	REQUEST_DATE	DATE NULL,
	CURRENCY	VARCHAR2(20) NULL,
	SHIP_TO	VARCHAR2(20) NULL,
	ATTENTION_TO	VARCHAR2(100) NULL,
	ADDRESS_TYPE	VARCHAR2(255) NULL,
	ADDRESS_LINE1	VARCHAR2(120) NULL,
	ADDRESS_LINE2	VARCHAR2(120) NULL,
	CITY	VARCHAR2(60) NULL,
	STATE	VARCHAR2(60) NULL,
	POSTAL_CODE	VARCHAR2(60) NULL,
	QUESTION_CALL_COMMENT	VARCHAR2(205) NULL,
	THANK_YOU_COMMENT	VARCHAR2(205) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	CREATED_BY	VARCHAR2(255) NULL,
	UPDATED_BY	VARCHAR2(255) NULL,
	APPROVAL_STATUS	VARCHAR2(255) NULL,
	DESCRIPTION	VARCHAR2(255) NULL,
	PAYMENT_REQUEST_TYPE	VARCHAR2(255) NULL,
	PURCHASE_DATE	DATE NULL,
	RECEIPT_AMOUNT	NUMBER NULL,
	ORIGINALLY_CHARGED_ID	NUMBER NULL,
	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
	EVENT_OID	NUMBER NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
(
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID,
	IND_UPDATE
)
select 
ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID,
	IND_UPDATE
 from (


select 	 
	
	SRM_ACCT_COMM_PMT_REQ_XR.ACCT_COMM_PMT_REQ_OID ACCT_COMM_PMT_REQ_OID,
	APO.APO_OID APO_OID,
	SOURCE_SYSTEM.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,
	STG_ACM_PR.CONTACT_OID CONTACT_OID,
	STG_ACM_PR.PAYMENT_AMOUNT PAYMENT_AMOUNT,
	STG_ACM_PR.REQUEST_DATE REQUEST_DATE,
	STG_ACM_PR.CURRENCY CURRENCY,
	STG_ACM_PR.SHIP_TO SHIP_TO,
	STG_ACM_PR.ATTENTION_TO ATTENTION_TO,
	STG_ACM_PR.ADDRESS_TYPE ADDRESS_TYPE,
	STG_ACM_PR.ADDRESS_LINE1 ADDRESS_LINE1,
	STG_ACM_PR.ADDRESS_LINE2 ADDRESS_LINE2,
	STG_ACM_PR.CITY CITY,
	STG_ACM_PR.STATE STATE,
	STG_ACM_PR.POSTAL_CODE POSTAL_CODE,
	STG_ACM_PR.QUESTION_CALL_COMMENT QUESTION_CALL_COMMENT,
	STG_ACM_PR.THANK_YOU_COMMENT THANK_YOU_COMMENT,
	STG_ACM_PR.CREATED_BY CREATED_BY,
	STG_ACM_PR.UPDATED_BY UPDATED_BY,
	STG_ACM_PR.APPROVAL_STATUS APPROVAL_STATUS,
	STG_ACM_PR.DESCRIPTION DESCRIPTION,
	STG_ACM_PR.PAYMENT_REQUEST_TYPE PAYMENT_REQUEST_TYPE,
	STG_ACM_PR.PURCHASE_DATE PURCHASE_DATE,
	STG_ACM_PR.RECEIPT_AMOUNT RECEIPT_AMOUNT,
	STG_ACM_PR.ORIGINALLY_CHARGED_ID ORIGINALLY_CHARGED_ID,
	STG_ACM_PR.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID,
	STG_ACM_PR.EVENT_OID EVENT_OID,

	'I' IND_UPDATE

from	RAX_APP_USER.STG_ACCT_COMM_PMT_REQ   STG_ACM_PR, ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM, ODS_OWN.APO   APO, ODS_STAGE.SRM_ACCT_COMM_PMT_REQ_XR   SRM_ACCT_COMM_PMT_REQ_XR
where	(1=1)
 And (STG_ACM_PR.APO_ID=APO.APO_ID)
AND (STG_ACM_PR.ACCT_COMM_PMT_REQ_ID=SRM_ACCT_COMM_PMT_REQ_XR.ACCT_COMM_PMT_REQ_ID)
And (SOURCE_SYSTEM.SOURCE_SYSTEM_SHORT_NAME='SRM')




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.ACCT_COMM_PMT_REQ T
	where	T.ACCT_COMM_PMT_REQ_OID	= S.ACCT_COMM_PMT_REQ_OID 
		 and ((T.APO_OID = S.APO_OID) or (T.APO_OID IS NULL and S.APO_OID IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL)) and
		((T.CONTACT_OID = S.CONTACT_OID) or (T.CONTACT_OID IS NULL and S.CONTACT_OID IS NULL)) and
		((T.PAYMENT_AMOUNT = S.PAYMENT_AMOUNT) or (T.PAYMENT_AMOUNT IS NULL and S.PAYMENT_AMOUNT IS NULL)) and
		((T.REQUEST_DATE = S.REQUEST_DATE) or (T.REQUEST_DATE IS NULL and S.REQUEST_DATE IS NULL)) and
		((T.CURRENCY = S.CURRENCY) or (T.CURRENCY IS NULL and S.CURRENCY IS NULL)) and
		((T.SHIP_TO = S.SHIP_TO) or (T.SHIP_TO IS NULL and S.SHIP_TO IS NULL)) and
		((T.ATTENTION_TO = S.ATTENTION_TO) or (T.ATTENTION_TO IS NULL and S.ATTENTION_TO IS NULL)) and
		((T.ADDRESS_TYPE = S.ADDRESS_TYPE) or (T.ADDRESS_TYPE IS NULL and S.ADDRESS_TYPE IS NULL)) and
		((T.ADDRESS_LINE1 = S.ADDRESS_LINE1) or (T.ADDRESS_LINE1 IS NULL and S.ADDRESS_LINE1 IS NULL)) and
		((T.ADDRESS_LINE2 = S.ADDRESS_LINE2) or (T.ADDRESS_LINE2 IS NULL and S.ADDRESS_LINE2 IS NULL)) and
		((T.CITY = S.CITY) or (T.CITY IS NULL and S.CITY IS NULL)) and
		((T.STATE = S.STATE) or (T.STATE IS NULL and S.STATE IS NULL)) and
		((T.POSTAL_CODE = S.POSTAL_CODE) or (T.POSTAL_CODE IS NULL and S.POSTAL_CODE IS NULL)) and
		((T.QUESTION_CALL_COMMENT = S.QUESTION_CALL_COMMENT) or (T.QUESTION_CALL_COMMENT IS NULL and S.QUESTION_CALL_COMMENT IS NULL)) and
		((T.THANK_YOU_COMMENT = S.THANK_YOU_COMMENT) or (T.THANK_YOU_COMMENT IS NULL and S.THANK_YOU_COMMENT IS NULL)) and
		((T.CREATED_BY = S.CREATED_BY) or (T.CREATED_BY IS NULL and S.CREATED_BY IS NULL)) and
		((T.UPDATED_BY = S.UPDATED_BY) or (T.UPDATED_BY IS NULL and S.UPDATED_BY IS NULL)) and
		((T.APPROVAL_STATUS = S.APPROVAL_STATUS) or (T.APPROVAL_STATUS IS NULL and S.APPROVAL_STATUS IS NULL)) and
		((T.DESCRIPTION = S.DESCRIPTION) or (T.DESCRIPTION IS NULL and S.DESCRIPTION IS NULL)) and
		((T.PAYMENT_REQUEST_TYPE = S.PAYMENT_REQUEST_TYPE) or (T.PAYMENT_REQUEST_TYPE IS NULL and S.PAYMENT_REQUEST_TYPE IS NULL)) and
		((T.PURCHASE_DATE = S.PURCHASE_DATE) or (T.PURCHASE_DATE IS NULL and S.PURCHASE_DATE IS NULL)) and
		((T.RECEIPT_AMOUNT = S.RECEIPT_AMOUNT) or (T.RECEIPT_AMOUNT IS NULL and S.RECEIPT_AMOUNT IS NULL)) and
		((T.ORIGINALLY_CHARGED_ID = S.ORIGINALLY_CHARGED_ID) or (T.ORIGINALLY_CHARGED_ID IS NULL and S.ORIGINALLY_CHARGED_ID IS NULL)) and
		((T.ACCT_COMM_PMT_REQ_ID = S.ACCT_COMM_PMT_REQ_ID) or (T.ACCT_COMM_PMT_REQ_ID IS NULL and S.ACCT_COMM_PMT_REQ_ID IS NULL)) and
		((T.EVENT_OID = S.EVENT_OID) or (T.EVENT_OID IS NULL and S.EVENT_OID IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* Recycle previous errors */

insert into RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
(
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID,
	IND_UPDATE
)
select	DISTINCT ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID,
	'I' IND_UPDATE
from	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001 E
where 	not exists (
		select	'?'
		from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 T
		where			T.ACCT_COMM_PMT_REQ_OID=E.ACCT_COMM_PMT_REQ_OID
		)
and	E.ODI_ORIGIN	= '(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT'
and	E.ODI_ERR_TYPE	= 'F'

&


/*-----------------------------------------------*/
/* TASK No. 15 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_ACCT_COMM_PMT_REQ578001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 16 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ_IDX578001
on		RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 (ACCT_COMM_PMT_REQ_OID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* create check table */

DECLARE  
    table_exists NUMBER;  
BEGIN  
    -- Check if the table exists  
    SELECT COUNT(*)  
    INTO table_exists  
    FROM all_tables  
    WHERE table_name = 'SNP_CHECK_TAB' AND owner = 'RAX_APP_USER';  
  
    -- If the table does not exist, create it  
    IF table_exists = 0 THEN  
        EXECUTE IMMEDIATE '  
            CREATE TABLE RAX_APP_USER.SNP_CHECK_TAB (  
                CATALOG_NAME  VARCHAR2(100 CHAR) NULL,  
                SCHEMA_NAME   VARCHAR2(100 CHAR) NULL,  
                RESOURCE_NAME VARCHAR2(100 CHAR) NULL,  
                FULL_RES_NAME VARCHAR2(100 CHAR) NULL,  
                ERR_TYPE      VARCHAR2(1 CHAR) NULL,  
                ERR_MESS      VARCHAR2(250 CHAR) NULL,  
                CHECK_DATE    DATE NULL,  
                ORIGIN        VARCHAR2(100 CHAR) NULL,  
                CONS_NAME     VARCHAR2(35 CHAR) NULL,  
                CONS_TYPE     VARCHAR2(2 CHAR) NULL,  
                ERR_COUNT     NUMBER(10) NULL  
            )  
        ';  
    END IF;  
END;


-- create table RAX_APP_USER.SNP_CHECK_TAB
-- (
-- 	CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
-- 	SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
-- 	RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
-- 	FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
-- 	ERR_TYPE		VARCHAR2(1 CHAR) NULL,
-- 	ERR_MESS		VARCHAR2(250 CHAR) NULL ,
-- 	CHECK_DATE	DATE NULL,
-- 	ORIGIN		VARCHAR2(100 CHAR) NULL,
-- 	CONS_NAME	VARCHAR2(35 CHAR) NULL,
-- 	CONS_TYPE		VARCHAR2(2 CHAR) NULL,
-- 	ERR_COUNT		NUMBER(10) NULL
-- )



&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* create error table */

DECLARE  
    table_exists NUMBER;  
BEGIN  
    -- Check if the table exists  
    SELECT COUNT(*)  
    INTO table_exists  
    FROM all_tables  
    WHERE table_name = 'E$_ACCT_COMM_PMT_REQ578001' AND owner = 'RAX_APP_USER';  
  
    -- If the table does not exist, create it  
    IF table_exists = 0 THEN  
        EXECUTE IMMEDIATE '  
		create table RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
		(
			ODI_ROW_ID 		UROWID,
			ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
			ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
			ODI_CHECK_DATE	DATE NULL, 
			ACCT_COMM_PMT_REQ_OID	NUMBER NULL,
			APO_OID	NUMBER NULL,
			SOURCE_SYSTEM_OID	NUMBER NULL,
			CONTACT_OID	NUMBER NULL,
			PAYMENT_AMOUNT	NUMBER NULL,
			REQUEST_DATE	DATE NULL,
			CURRENCY	VARCHAR2(20) NULL,
			SHIP_TO	VARCHAR2(20) NULL,
			ATTENTION_TO	VARCHAR2(100) NULL,
			ADDRESS_TYPE	VARCHAR2(255) NULL,
			ADDRESS_LINE1	VARCHAR2(120) NULL,
			ADDRESS_LINE2	VARCHAR2(120) NULL,
			CITY	VARCHAR2(60) NULL,
			STATE	VARCHAR2(60) NULL,
			POSTAL_CODE	VARCHAR2(60) NULL,
			QUESTION_CALL_COMMENT	VARCHAR2(205) NULL,
			THANK_YOU_COMMENT	VARCHAR2(205) NULL,
			ODS_CREATE_DATE	DATE NULL,
			ODS_MODIFY_DATE	DATE NULL,
			CREATED_BY	VARCHAR2(255) NULL,
			UPDATED_BY	VARCHAR2(255) NULL,
			APPROVAL_STATUS	VARCHAR2(255) NULL,
			DESCRIPTION	VARCHAR2(255) NULL,
			PAYMENT_REQUEST_TYPE	VARCHAR2(255) NULL,
			PURCHASE_DATE	DATE NULL,
			RECEIPT_AMOUNT	NUMBER NULL,
			ORIGINALLY_CHARGED_ID	NUMBER NULL,
			ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
			EVENT_OID	NUMBER NULL,
			ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
			ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
			ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
			ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
			ODI_SESS_NO		VARCHAR2(19 CHAR)
		)
        ';  
    END IF;  
END;

-- create table RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
-- (
-- 	ODI_ROW_ID 		UROWID,
-- 	ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
-- 	ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
-- 	ODI_CHECK_DATE	DATE NULL, 
-- 	ACCT_COMM_PMT_REQ_OID	NUMBER NULL,
-- 	APO_OID	NUMBER NULL,
-- 	SOURCE_SYSTEM_OID	NUMBER NULL,
-- 	CONTACT_OID	NUMBER NULL,
-- 	PAYMENT_AMOUNT	NUMBER NULL,
-- 	REQUEST_DATE	DATE NULL,
-- 	CURRENCY	VARCHAR2(20) NULL,
-- 	SHIP_TO	VARCHAR2(20) NULL,
-- 	ATTENTION_TO	VARCHAR2(100) NULL,
-- 	ADDRESS_TYPE	VARCHAR2(255) NULL,
-- 	ADDRESS_LINE1	VARCHAR2(120) NULL,
-- 	ADDRESS_LINE2	VARCHAR2(120) NULL,
-- 	CITY	VARCHAR2(60) NULL,
-- 	STATE	VARCHAR2(60) NULL,
-- 	POSTAL_CODE	VARCHAR2(60) NULL,
-- 	QUESTION_CALL_COMMENT	VARCHAR2(205) NULL,
-- 	THANK_YOU_COMMENT	VARCHAR2(205) NULL,
-- 	ODS_CREATE_DATE	DATE NULL,
-- 	ODS_MODIFY_DATE	DATE NULL,
-- 	CREATED_BY	VARCHAR2(255) NULL,
-- 	UPDATED_BY	VARCHAR2(255) NULL,
-- 	APPROVAL_STATUS	VARCHAR2(255) NULL,
-- 	DESCRIPTION	VARCHAR2(255) NULL,
-- 	PAYMENT_REQUEST_TYPE	VARCHAR2(255) NULL,
-- 	PURCHASE_DATE	DATE NULL,
-- 	RECEIPT_AMOUNT	NUMBER NULL,
-- 	ORIGINALLY_CHARGED_ID	NUMBER NULL,
-- 	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
-- 	EVENT_OID	NUMBER NULL,
-- 	ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
-- 	ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
-- 	ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
-- 	ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
-- 	ODI_SESS_NO		VARCHAR2(19 CHAR)
-- )



&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT')


&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
-- create index 	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
-- on	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 (ACCT_COMM_PMT_REQ_OID)

BEGIN
    -- Attempt to create the index
    EXECUTE IMMEDIATE 'CREATE INDEX RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 
                       ON RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 (ACCT_COMM_PMT_REQ_OID)';

EXCEPTION
    -- Catch the specific error when the index already exists
    WHEN OTHERS THEN
        IF SQLCODE = -1418 THEN
            RAISE;
        END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_ACCT_COMM_PMT_REQ' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.ACCT_COMM_PMT_REQ' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '578001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15064: The primary key ACCT_COMM_PMT_REQ_PK is not unique.'',
	''(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT'',
	sysdate,
	''ACCT_COMM_PMT_REQ_PK'',
	''PK'',	
	ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_OID,
	ACCT_COMM_PMT_REQ.APO_OID,
	ACCT_COMM_PMT_REQ.SOURCE_SYSTEM_OID,
	ACCT_COMM_PMT_REQ.CONTACT_OID,
	ACCT_COMM_PMT_REQ.PAYMENT_AMOUNT,
	ACCT_COMM_PMT_REQ.REQUEST_DATE,
	ACCT_COMM_PMT_REQ.CURRENCY,
	ACCT_COMM_PMT_REQ.SHIP_TO,
	ACCT_COMM_PMT_REQ.ATTENTION_TO,
	ACCT_COMM_PMT_REQ.ADDRESS_TYPE,
	ACCT_COMM_PMT_REQ.ADDRESS_LINE1,
	ACCT_COMM_PMT_REQ.ADDRESS_LINE2,
	ACCT_COMM_PMT_REQ.CITY,
	ACCT_COMM_PMT_REQ.STATE,
	ACCT_COMM_PMT_REQ.POSTAL_CODE,
	ACCT_COMM_PMT_REQ.QUESTION_CALL_COMMENT,
	ACCT_COMM_PMT_REQ.THANK_YOU_COMMENT,
	ACCT_COMM_PMT_REQ.ODS_CREATE_DATE,
	ACCT_COMM_PMT_REQ.ODS_MODIFY_DATE,
	ACCT_COMM_PMT_REQ.CREATED_BY,
	ACCT_COMM_PMT_REQ.UPDATED_BY,
	ACCT_COMM_PMT_REQ.APPROVAL_STATUS,
	ACCT_COMM_PMT_REQ.DESCRIPTION,
	ACCT_COMM_PMT_REQ.PAYMENT_REQUEST_TYPE,
	ACCT_COMM_PMT_REQ.PURCHASE_DATE,
	ACCT_COMM_PMT_REQ.RECEIPT_AMOUNT,
	ACCT_COMM_PMT_REQ.ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_ID,
	ACCT_COMM_PMT_REQ.EVENT_OID
from	'
 || VariableCheckTable || 
' ACCT_COMM_PMT_REQ 
where	exists  (
		select	SUB1.ACCT_COMM_PMT_REQ_OID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.ACCT_COMM_PMT_REQ_OID=ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_OID
		group by 	SUB1.ACCT_COMM_PMT_REQ_OID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
-- create index 	ACCT_COMM_PMT_REQ_PKX_flow
-- on	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 
-- 	(ACCT_COMM_PMT_REQ_OID)

BEGIN
    -- Attempt to create the index
    EXECUTE IMMEDIATE 'create index 	ACCT_COMM_PMT_REQ_PKX_flow
on	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 
	(ACCT_COMM_PMT_REQ_OID)
';

EXCEPTION
    -- Catch the specific error when the index already exists
    WHEN OTHERS THEN
        IF SQLCODE = -1418 THEN
            RAISE;
        END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* insert AK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_ACCT_COMM_PMT_REQ' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.ACCT_COMM_PMT_REQ' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '578001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15063: The alternate key ACCT_COMM_PMT_REQ_PKX is not unique.'',
	''(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT'',
	sysdate,
	''ACCT_COMM_PMT_REQ_PKX'',
	''AK'',	
	ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_OID,
	ACCT_COMM_PMT_REQ.APO_OID,
	ACCT_COMM_PMT_REQ.SOURCE_SYSTEM_OID,
	ACCT_COMM_PMT_REQ.CONTACT_OID,
	ACCT_COMM_PMT_REQ.PAYMENT_AMOUNT,
	ACCT_COMM_PMT_REQ.REQUEST_DATE,
	ACCT_COMM_PMT_REQ.CURRENCY,
	ACCT_COMM_PMT_REQ.SHIP_TO,
	ACCT_COMM_PMT_REQ.ATTENTION_TO,
	ACCT_COMM_PMT_REQ.ADDRESS_TYPE,
	ACCT_COMM_PMT_REQ.ADDRESS_LINE1,
	ACCT_COMM_PMT_REQ.ADDRESS_LINE2,
	ACCT_COMM_PMT_REQ.CITY,
	ACCT_COMM_PMT_REQ.STATE,
	ACCT_COMM_PMT_REQ.POSTAL_CODE,
	ACCT_COMM_PMT_REQ.QUESTION_CALL_COMMENT,
	ACCT_COMM_PMT_REQ.THANK_YOU_COMMENT,
	ACCT_COMM_PMT_REQ.ODS_CREATE_DATE,
	ACCT_COMM_PMT_REQ.ODS_MODIFY_DATE,
	ACCT_COMM_PMT_REQ.CREATED_BY,
	ACCT_COMM_PMT_REQ.UPDATED_BY,
	ACCT_COMM_PMT_REQ.APPROVAL_STATUS,
	ACCT_COMM_PMT_REQ.DESCRIPTION,
	ACCT_COMM_PMT_REQ.PAYMENT_REQUEST_TYPE,
	ACCT_COMM_PMT_REQ.PURCHASE_DATE,
	ACCT_COMM_PMT_REQ.RECEIPT_AMOUNT,
	ACCT_COMM_PMT_REQ.ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_ID,
	ACCT_COMM_PMT_REQ.EVENT_OID
from              '	
 || VariableCheckTable || 
' ACCT_COMM_PMT_REQ
where	exists  (
		select	SUB.ACCT_COMM_PMT_REQ_OID
		from 	'
 || VariableCheckTable || 
' SUB
		where 	SUB.ACCT_COMM_PMT_REQ_OID=ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_OID
		group by 	SUB.ACCT_COMM_PMT_REQ_OID
		having 	count(1) > 1
		)
 ';

END;

/*  Checked Datastore =RAX_APP_USER.I$_ACCT_COMM_PMT_REQ  */
/*  Integration Datastore =RAX_APP_USER.I$_ACCT_COMM_PMT_REQ   */
/*  Target Datastore =ODS_OWN.ACCT_COMM_PMT_REQ */



&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column ACCT_COMM_PMT_REQ_OID cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'ACCT_COMM_PMT_REQ_OID',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	ACCT_COMM_PMT_REQ_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column APO_OID cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'APO_OID',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	APO_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column SOURCE_SYSTEM_OID cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'SOURCE_SYSTEM_OID',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	SOURCE_SYSTEM_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column PAYMENT_AMOUNT cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'PAYMENT_AMOUNT',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	PAYMENT_AMOUNT is null



&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column REQUEST_DATE cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'REQUEST_DATE',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	REQUEST_DATE is null



&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column CREATED_BY cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'CREATED_BY',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	CREATED_BY is null



&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column UPDATED_BY cannot be null.',
	sysdate,
	'(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT',
	'UPDATED_BY',
	'NN',	
	ACCT_COMM_PMT_REQ_OID,
	APO_OID,
	SOURCE_SYSTEM_OID,
	CONTACT_OID,
	PAYMENT_AMOUNT,
	REQUEST_DATE,
	CURRENCY,
	SHIP_TO,
	ATTENTION_TO,
	ADDRESS_TYPE,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	CITY,
	STATE,
	POSTAL_CODE,
	QUESTION_CALL_COMMENT,
	THANK_YOU_COMMENT,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	CREATED_BY,
	UPDATED_BY,
	APPROVAL_STATUS,
	DESCRIPTION,
	PAYMENT_REQUEST_TYPE,
	PURCHASE_DATE,
	RECEIPT_AMOUNT,
	ORIGINALLY_CHARGED_ID,
	ACCT_COMM_PMT_REQ_ID,
	EVENT_OID
from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001
where	UPDATED_BY is null



&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
-- create index 	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
-- on	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001 (ODI_ROW_ID)

BEGIN
    -- Attempt to create the index
    EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001
on	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001 (ODI_ROW_ID)
';

EXCEPTION
    -- Catch the specific error when the index already exists
    WHEN OTHERS THEN
        IF SQLCODE = -1418 THEN
            RAISE;
        END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 34 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'ACCT_COMM_PMT_REQ',
	'ODS_OWN.ACCT_COMM_PMT_REQ578001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_ACCT_COMM_PMT_REQ578001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(578001)ODS_Project.LOAD_ACM_PAYMENT_REQUEST_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 35 */
/* Merge Rows */

merge into	ODS_OWN.ACCT_COMM_PMT_REQ T
using	RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 S
on	(
		T.ACCT_COMM_PMT_REQ_OID=S.ACCT_COMM_PMT_REQ_OID
	)
when matched
then update set
	T.APO_OID	= S.APO_OID,
	T.SOURCE_SYSTEM_OID	= S.SOURCE_SYSTEM_OID,
	T.CONTACT_OID	= S.CONTACT_OID,
	T.PAYMENT_AMOUNT	= S.PAYMENT_AMOUNT,
	T.REQUEST_DATE	= S.REQUEST_DATE,
	T.CURRENCY	= S.CURRENCY,
	T.SHIP_TO	= S.SHIP_TO,
	T.ATTENTION_TO	= S.ATTENTION_TO,
	T.ADDRESS_TYPE	= S.ADDRESS_TYPE,
	T.ADDRESS_LINE1	= S.ADDRESS_LINE1,
	T.ADDRESS_LINE2	= S.ADDRESS_LINE2,
	T.CITY	= S.CITY,
	T.STATE	= S.STATE,
	T.POSTAL_CODE	= S.POSTAL_CODE,
	T.QUESTION_CALL_COMMENT	= S.QUESTION_CALL_COMMENT,
	T.THANK_YOU_COMMENT	= S.THANK_YOU_COMMENT,
	T.CREATED_BY	= S.CREATED_BY,
	T.UPDATED_BY	= S.UPDATED_BY,
	T.APPROVAL_STATUS	= S.APPROVAL_STATUS,
	T.DESCRIPTION	= S.DESCRIPTION,
	T.PAYMENT_REQUEST_TYPE	= S.PAYMENT_REQUEST_TYPE,
	T.PURCHASE_DATE	= S.PURCHASE_DATE,
	T.RECEIPT_AMOUNT	= S.RECEIPT_AMOUNT,
	T.ORIGINALLY_CHARGED_ID	= S.ORIGINALLY_CHARGED_ID,
	T.ACCT_COMM_PMT_REQ_ID	= S.ACCT_COMM_PMT_REQ_ID,
	T.EVENT_OID	= S.EVENT_OID
	,                          T.ODS_MODIFY_DATE	= SYSDATE
when not matched
then insert
	(
	T.ACCT_COMM_PMT_REQ_OID,
	T.APO_OID,
	T.SOURCE_SYSTEM_OID,
	T.CONTACT_OID,
	T.PAYMENT_AMOUNT,
	T.REQUEST_DATE,
	T.CURRENCY,
	T.SHIP_TO,
	T.ATTENTION_TO,
	T.ADDRESS_TYPE,
	T.ADDRESS_LINE1,
	T.ADDRESS_LINE2,
	T.CITY,
	T.STATE,
	T.POSTAL_CODE,
	T.QUESTION_CALL_COMMENT,
	T.THANK_YOU_COMMENT,
	T.CREATED_BY,
	T.UPDATED_BY,
	T.APPROVAL_STATUS,
	T.DESCRIPTION,
	T.PAYMENT_REQUEST_TYPE,
	T.PURCHASE_DATE,
	T.RECEIPT_AMOUNT,
	T.ORIGINALLY_CHARGED_ID,
	T.ACCT_COMM_PMT_REQ_ID,
	T.EVENT_OID
	,                           T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.ACCT_COMM_PMT_REQ_OID,
	S.APO_OID,
	S.SOURCE_SYSTEM_OID,
	S.CONTACT_OID,
	S.PAYMENT_AMOUNT,
	S.REQUEST_DATE,
	S.CURRENCY,
	S.SHIP_TO,
	S.ATTENTION_TO,
	S.ADDRESS_TYPE,
	S.ADDRESS_LINE1,
	S.ADDRESS_LINE2,
	S.CITY,
	S.STATE,
	S.POSTAL_CODE,
	S.QUESTION_CALL_COMMENT,
	S.THANK_YOU_COMMENT,
	S.CREATED_BY,
	S.UPDATED_BY,
	S.APPROVAL_STATUS,
	S.DESCRIPTION,
	S.PAYMENT_REQUEST_TYPE,
	S.PURCHASE_DATE,
	S.RECEIPT_AMOUNT,
	S.ORIGINALLY_CHARGED_ID,
	S.ACCT_COMM_PMT_REQ_ID,
	S.EVENT_OID
	,                           SYSDATE,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 36 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 37 */
/* Drop flow table */

drop table RAX_APP_USER.I$_ACCT_COMM_PMT_REQ578001 

&


/*-----------------------------------------------*/
/* TASK No. 38 */
/* Update CDC Load Status */

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
+ nvl((TIMEZONE_OFFSET/24), 0) 
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env
*/

&


/*-----------------------------------------------*/
/* TASK No. 39 */
/* Insert CDC Audit Record */

INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME,
TIMEZONE_OFFSET              
)
select 
:v_cdc_load_table_name
,:v_sess_no
,'LOAD_ACM_PAYMENT_REQUEST_PKG'
,'008'
,TO_DATE(SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
,TO_DATE (SUBSTR(:v_cdc_load_date, 1, 19),'YYYY-MM-DD HH24:MI:SS')
,:v_cdc_overlap
,SYSDATE
,:v_env
,TIMEZONE_OFFSET
from 
ODS_OWN.ODS_CDC_LOAD_STATUS
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME              
)
values (
:v_cdc_load_table_name,
:v_sess_no,
'LOAD_ACM_PAYMENT_REQUEST_PKG',
'008',
TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS'),
TO_DATE (SUBSTR (:v_cdc_load_date, 1, 19),
                           'YYYY-MM-DD HH24:MI:SS'
                          )
,:v_cdc_overlap,
SYSDATE,
 :v_env)
*/


&


/*-----------------------------------------------*/
