/*-----------------------------------------------*/
/* TASK No. 4 */
/* Drop work table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.C$_0ITEM';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 5 */
/* Create work table */

create table RAX_APP_USER.C$_0ITEM as
select	
	ITEM.ITEM_ID	   C1_PACKAGE_PRODUCT_HASH,
	ITEM.ITEM_ID	   C2_ITEM_CODE,
	nvl(ITEM.DESCRIPTION,  'Unknown')	   C3_DESCRIPTION,
	substr(nvl(ITEM.SHORT_DESCRIPTION,  'Unknown'),1,100) 	   C4_SHORT_DESCRIPTION,
	nvl(ITEM_GROUP.ITEM_GROUP,  'Unknown')	   C5_ITEM_GROUP,
	nvl(ITEM_GROUP.MERCHANDISE_CATEGORY,  'Unknown')	   C6_MERCHANDISE_CATEGORY,
	ITEM.CHARGE_TYPE	   C7_CHARGE_TYPE,
	nvl(ITEM.POSTING_CLASSIFICATION,  'Unknown')	   C8_POSTING_CLASSIFICATION,
	nvl(ITEM_GROUP.SALES_CATEGORY,  'Unknown')	   C9_SALES_CATEGORY,
	ITEM.CHARGEBACK_CATEGORY	   C10_CHARGEBACK_CATEGORY,
	ITEM.SKU_CATEGORY	   C11_SKU_CATEGORY,
	ITEM.MANUFACTURER_ITEM	   C12_MANUFACTURER_ITEM,
	ITEM.SUB_CLASS	   C13_SUB_CLASS
from	ODS_OWN.ITEM   ITEM, ODS_OWN.ITEM_GROUP   ITEM_GROUP, ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM
where	(1=1)
And (ITEM.ODS_MODIFY_DATE >=  TO_DATE(SUBSTR(:v_cdc_load_date,1,19),'YYYY-MM-DD HH24:MI:SS') - 2)
 And (ITEM.ITEM_GROUP_OID=ITEM_GROUP.ITEM_GROUP_OID (+))
AND (ITEM.SOURCE_SYSTEM_OID=SOURCE_SYSTEM.SOURCE_SYSTEM_OID (+))


&


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0ITEM',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 8 */
/* Drop flow table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_ITEM';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_ITEM
(
	ITEM_ID	NUMBER NULL,
	EFFECTIVE_DATE	DATE NULL,
	LOAD_ID	NUMBER NULL,
	ACTIVE_IND	VARCHAR2(5) NULL,
	PACKAGE_PRODUCT_HASH	VARCHAR2(1000) NULL,
	PRODUCT_DETAIL_DESCRIPTION	VARCHAR2(1000) NULL,
	SOURCE_SYSTEM_NAME	VARCHAR2(50) NULL,
	ITEM_CODE	VARCHAR2(50) NULL,
	DESCRIPTION	VARCHAR2(200) NULL,
	SHORT_DESCRIPTION	VARCHAR2(100) NULL,
	ITEM_GROUP	VARCHAR2(50) NULL,
	MERCHANDISE_CATEGORY	VARCHAR2(50) NULL,
	CHARGE_TYPE	VARCHAR2(50) NULL,
	POSTING_CLASSIFICATION	VARCHAR2(50) NULL,
	SELLABLE_UNIT_ID	NUMBER NULL,
	SELLABLE_UNIT_PAPER_UNITS	NUMBER NULL,
	SELLABLE_UNIT_COSTS	NUMBER NULL,
	SELLABLE_UNIT_IMAGES	NUMBER NULL,
	SALES_CATEGORY	VARCHAR2(50) NULL,
	CHARGEBACK_CATEGORY	VARCHAR2(100) NULL,
	SKU_CATEGORY	VARCHAR2(10) NULL,
	MANUFACTURER_ITEM	VARCHAR2(100) NULL,
	SUB_CLASS	VARCHAR2(100) NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 10 */
/* Insert flow into I$ table */

insert /*+ APPEND */  into RAX_APP_USER.I$_ITEM
	(
	PACKAGE_PRODUCT_HASH,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
	,IND_UPDATE
	)


select 	 
	
	C1_PACKAGE_PRODUCT_HASH,
	C2_ITEM_CODE,
	C3_DESCRIPTION,
	C4_SHORT_DESCRIPTION,
	C5_ITEM_GROUP,
	C6_MERCHANDISE_CATEGORY,
	C7_CHARGE_TYPE,
	C8_POSTING_CLASSIFICATION,
	C9_SALES_CATEGORY,
	C10_CHARGEBACK_CATEGORY,
	C11_SKU_CATEGORY,
	C12_MANUFACTURER_ITEM,
	C13_SUB_CLASS,

	'I' IND_UPDATE

from	RAX_APP_USER.C$_0ITEM
where	(1=1)






minus
select
	PACKAGE_PRODUCT_HASH,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
	,'I'	IND_UPDATE
from	MART.ITEM

&


/*-----------------------------------------------*/
/* TASK No. 11 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_ITEM',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_ITEM_IDX
on		RAX_APP_USER.I$_ITEM (ITEM_CODE)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* create check table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
						(
							CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
							SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
							RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
							FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
							ERR_TYPE		VARCHAR2(1 CHAR) NULL,
							ERR_MESS		VARCHAR2(250 CHAR) NULL ,
							CHECK_DATE	DATE NULL,
							ORIGIN		VARCHAR2(100 CHAR) NULL,
							CONS_NAME	VARCHAR2(35 CHAR) NULL,
							CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ERR_COUNT		NUMBER(10) NULL
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;
	

&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'MART'
and	ORIGIN 		= '(307003)Warehouse_Project.LOAD_ITEM_DIM_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 15 */
/* create error table */

BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_ITEM
						(
							ODI_ROW_ID 		UROWID,
							ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
							ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
							ODI_CHECK_DATE	DATE NULL, 
							ITEM_ID	NUMBER NULL,
							EFFECTIVE_DATE	DATE NULL,
							LOAD_ID	NUMBER NULL,
							ACTIVE_IND	VARCHAR2(5) NULL,
							PACKAGE_PRODUCT_HASH	VARCHAR2(1000) NULL,
							PRODUCT_DETAIL_DESCRIPTION	VARCHAR2(1000) NULL,
							SOURCE_SYSTEM_NAME	VARCHAR2(50) NULL,
							ITEM_CODE	VARCHAR2(50) NULL,
							DESCRIPTION	VARCHAR2(200) NULL,
							SHORT_DESCRIPTION	VARCHAR2(100) NULL,
							ITEM_GROUP	VARCHAR2(50) NULL,
							MERCHANDISE_CATEGORY	VARCHAR2(50) NULL,
							CHARGE_TYPE	VARCHAR2(50) NULL,
							POSTING_CLASSIFICATION	VARCHAR2(50) NULL,
							SELLABLE_UNIT_ID	NUMBER NULL,
							SELLABLE_UNIT_PAPER_UNITS	NUMBER NULL,
							SELLABLE_UNIT_COSTS	NUMBER NULL,
							SELLABLE_UNIT_IMAGES	NUMBER NULL,
							SALES_CATEGORY	VARCHAR2(50) NULL,
							CHARGEBACK_CATEGORY	VARCHAR2(100) NULL,
							SKU_CATEGORY	VARCHAR2(10) NULL,
							MANUFACTURER_ITEM	VARCHAR2(100) NULL,
							SUB_CLASS	VARCHAR2(100) NULL,
							ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
							ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
							ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
							ODI_SESS_NO		VARCHAR2(19 CHAR)
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 16 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_ITEM
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(307003)Warehouse_Project.LOAD_ITEM_DIM_INT')


&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index ITEM_CIX1_flow on RAX_APP_USER.I$_ITEM (ITEM_CODE)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -1408 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* insert AK errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15063: The alternate key ITEM_CIX1 is not unique.',
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	sysdate,
	'ITEM_CIX1',
	'AK',	
	ITEM.ITEM_ID,
	ITEM.EFFECTIVE_DATE,
	ITEM.LOAD_ID,
	ITEM.ACTIVE_IND,
	ITEM.PACKAGE_PRODUCT_HASH,
	ITEM.PRODUCT_DETAIL_DESCRIPTION,
	ITEM.SOURCE_SYSTEM_NAME,
	ITEM.ITEM_CODE,
	ITEM.DESCRIPTION,
	ITEM.SHORT_DESCRIPTION,
	ITEM.ITEM_GROUP,
	ITEM.MERCHANDISE_CATEGORY,
	ITEM.CHARGE_TYPE,
	ITEM.POSTING_CLASSIFICATION,
	ITEM.SELLABLE_UNIT_ID,
	ITEM.SELLABLE_UNIT_PAPER_UNITS,
	ITEM.SELLABLE_UNIT_COSTS,
	ITEM.SELLABLE_UNIT_IMAGES,
	ITEM.SALES_CATEGORY,
	ITEM.CHARGEBACK_CATEGORY,
	ITEM.SKU_CATEGORY,
	ITEM.MANUFACTURER_ITEM,
	ITEM.SUB_CLASS
from	RAX_APP_USER.I$_ITEM   ITEM
where	exists  (
		select	SUB.ITEM_CODE
		from 	RAX_APP_USER.I$_ITEM SUB
		where 	SUB.ITEM_CODE=ITEM.ITEM_CODE
		group by 	SUB.ITEM_CODE
		having 	count(1) > 1
		)



&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
create index 	ITEM_CIX2_flow
on	RAX_APP_USER.I$_ITEM 
	(ITEM_ID)


&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* insert AK errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15063: The alternate key ITEM_CIX2 is not unique.',
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	sysdate,
	'ITEM_CIX2',
	'AK',	
	ITEM.ITEM_ID,
	ITEM.EFFECTIVE_DATE,
	ITEM.LOAD_ID,
	ITEM.ACTIVE_IND,
	ITEM.PACKAGE_PRODUCT_HASH,
	ITEM.PRODUCT_DETAIL_DESCRIPTION,
	ITEM.SOURCE_SYSTEM_NAME,
	ITEM.ITEM_CODE,
	ITEM.DESCRIPTION,
	ITEM.SHORT_DESCRIPTION,
	ITEM.ITEM_GROUP,
	ITEM.MERCHANDISE_CATEGORY,
	ITEM.CHARGE_TYPE,
	ITEM.POSTING_CLASSIFICATION,
	ITEM.SELLABLE_UNIT_ID,
	ITEM.SELLABLE_UNIT_PAPER_UNITS,
	ITEM.SELLABLE_UNIT_COSTS,
	ITEM.SELLABLE_UNIT_IMAGES,
	ITEM.SALES_CATEGORY,
	ITEM.CHARGEBACK_CATEGORY,
	ITEM.SKU_CATEGORY,
	ITEM.MANUFACTURER_ITEM,
	ITEM.SUB_CLASS
from	RAX_APP_USER.I$_ITEM   ITEM
where	exists  (
		select	SUB.ITEM_ID
		from 	RAX_APP_USER.I$_ITEM SUB
		where 	SUB.ITEM_ID=ITEM.ITEM_ID
		group by 	SUB.ITEM_ID
		having 	count(1) > 1
		)



&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column PACKAGE_PRODUCT_HASH cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'PACKAGE_PRODUCT_HASH',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	PACKAGE_PRODUCT_HASH is null



&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column ITEM_CODE cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'ITEM_CODE',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	ITEM_CODE is null



&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column DESCRIPTION cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'DESCRIPTION',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	DESCRIPTION is null



&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column ITEM_GROUP cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'ITEM_GROUP',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	ITEM_GROUP is null



&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column MERCHANDISE_CATEGORY cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'MERCHANDISE_CATEGORY',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	MERCHANDISE_CATEGORY is null



&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column CHARGE_TYPE cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'CHARGE_TYPE',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	CHARGE_TYPE is null



&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ITEM
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column POSTING_CLASSIFICATION cannot be null.',
	sysdate,
	'(307003)Warehouse_Project.LOAD_ITEM_DIM_INT',
	'POSTING_CLASSIFICATION',
	'NN',	
	ITEM_ID,
	EFFECTIVE_DATE,
	LOAD_ID,
	ACTIVE_IND,
	PACKAGE_PRODUCT_HASH,
	PRODUCT_DETAIL_DESCRIPTION,
	SOURCE_SYSTEM_NAME,
	ITEM_CODE,
	DESCRIPTION,
	SHORT_DESCRIPTION,
	ITEM_GROUP,
	MERCHANDISE_CATEGORY,
	CHARGE_TYPE,
	POSTING_CLASSIFICATION,
	SELLABLE_UNIT_ID,
	SELLABLE_UNIT_PAPER_UNITS,
	SELLABLE_UNIT_COSTS,
	SELLABLE_UNIT_IMAGES,
	SALES_CATEGORY,
	CHARGEBACK_CATEGORY,
	SKU_CATEGORY,
	MANUFACTURER_ITEM,
	SUB_CLASS
from	RAX_APP_USER.I$_ITEM
where	POSTING_CLASSIFICATION is null



&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index RAX_APP_USER.E$_ITEM_IDX on RAX_APP_USER.E$_ITEM (ODI_ROW_ID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_ITEM  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_ITEM E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'MART',
	'ITEM',
	'MART.ITEM',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_ITEM E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(307003)Warehouse_Project.LOAD_ITEM_DIM_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* Merge Rows */

merge into	MART.ITEM T
using	RAX_APP_USER.I$_ITEM S
on	(
		T.ITEM_CODE=S.ITEM_CODE
	)
when matched
then update set
	T.PACKAGE_PRODUCT_HASH	= S.PACKAGE_PRODUCT_HASH,
	T.DESCRIPTION	= S.DESCRIPTION,
	T.SHORT_DESCRIPTION	= S.SHORT_DESCRIPTION,
	T.ITEM_GROUP	= S.ITEM_GROUP,
	T.MERCHANDISE_CATEGORY	= S.MERCHANDISE_CATEGORY,
	T.CHARGE_TYPE	= S.CHARGE_TYPE,
	T.POSTING_CLASSIFICATION	= S.POSTING_CLASSIFICATION,
	T.SALES_CATEGORY	= S.SALES_CATEGORY,
	T.CHARGEBACK_CATEGORY	= S.CHARGEBACK_CATEGORY,
	T.SKU_CATEGORY	= S.SKU_CATEGORY,
	T.MANUFACTURER_ITEM	= S.MANUFACTURER_ITEM,
	T.SUB_CLASS	= S.SUB_CLASS
	,            T.EFFECTIVE_DATE	= SYSDATE,
	T.LOAD_ID	= :v_sess_no,
	T.ACTIVE_IND	= 'A',
	T.PRODUCT_DETAIL_DESCRIPTION	= '.',
	T.SOURCE_SYSTEM_NAME	= 'Sales-ODS',
	T.SELLABLE_UNIT_ID	= -1,
	T.SELLABLE_UNIT_PAPER_UNITS	= 0,
	T.SELLABLE_UNIT_COSTS	= 0,
	T.SELLABLE_UNIT_IMAGES	= 0
when not matched
then insert
	(
	T.PACKAGE_PRODUCT_HASH,
	T.ITEM_CODE,
	T.DESCRIPTION,
	T.SHORT_DESCRIPTION,
	T.ITEM_GROUP,
	T.MERCHANDISE_CATEGORY,
	T.CHARGE_TYPE,
	T.POSTING_CLASSIFICATION,
	T.SALES_CATEGORY,
	T.CHARGEBACK_CATEGORY,
	T.SKU_CATEGORY,
	T.MANUFACTURER_ITEM,
	T.SUB_CLASS
	,             T.ITEM_ID,
	T.EFFECTIVE_DATE,
	T.LOAD_ID,
	T.ACTIVE_IND,
	T.PRODUCT_DETAIL_DESCRIPTION,
	T.SOURCE_SYSTEM_NAME,
	T.SELLABLE_UNIT_ID,
	T.SELLABLE_UNIT_PAPER_UNITS,
	T.SELLABLE_UNIT_COSTS,
	T.SELLABLE_UNIT_IMAGES
	)
values
	(
	S.PACKAGE_PRODUCT_HASH,
	S.ITEM_CODE,
	S.DESCRIPTION,
	S.SHORT_DESCRIPTION,
	S.ITEM_GROUP,
	S.MERCHANDISE_CATEGORY,
	S.CHARGE_TYPE,
	S.POSTING_CLASSIFICATION,
	S.SALES_CATEGORY,
	S.CHARGEBACK_CATEGORY,
	S.SKU_CATEGORY,
	S.MANUFACTURER_ITEM,
	S.SUB_CLASS
	,             mart.item_ID_SEQ.nextval,
	SYSDATE,
	:v_sess_no,
	'A',
	'.',
	'Sales-ODS',
	-1,
	0,
	0,
	0
	)

&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 33 */
/* Update CDC Load Status */

UPDATE ODS.DW_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE DW_TABLE_NAME=:v_cdc_load_table_name

&


/*-----------------------------------------------*/
