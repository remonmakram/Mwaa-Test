/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Drop work table */

-- drop table RAX_APP_USER.C$_0STG_PERSON_INFO 

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 5 */
-- /* Create work table */

-- create table RAX_APP_USER.C$_0STG_PERSON_INFO
-- (
-- 	C1_EMAILID	VARCHAR2(150) NULL,
-- 	C2_ERROR_TXT	VARCHAR2(1000) NULL,
-- 	C3_LATITUDE	NUMBER(11,8) NULL,
-- 	C4_MIDDLE_NAME	VARCHAR2(40) NULL,
-- 	C5_ADDRESS_LINE5	VARCHAR2(70) NULL,
-- 	C6_PERSON_INFO_KEY	CHAR(24) NULL,
-- 	C7_FIRST_NAME	VARCHAR2(64) NULL,
-- 	C8_TAX_GEO_CODE	VARCHAR2(40) NULL,
-- 	C9_COMPANY	VARCHAR2(50) NULL,
-- 	C10_ADDRESS_LINE6	VARCHAR2(70) NULL,
-- 	C11_ADDRESS_LINE4	VARCHAR2(70) NULL,
-- 	C12_CITY	VARCHAR2(35) NULL,
-- 	C13_TITLE	VARCHAR2(10) NULL,
-- 	C14_HTTP_URL	VARCHAR2(255) NULL,
-- 	C15_CREATEPROGID	VARCHAR2(40) NULL,
-- 	C16_VERIFICATION_STATUS	CHAR(15) NULL,
-- 	C17_STATE	VARCHAR2(35) NULL,
-- 	C18_MODIFYPROGID	VARCHAR2(40) NULL,
-- 	C19_BEEPER	CHAR(40) NULL,
-- 	C20_PREFERRED_SHIP_ADDRESS	CHAR(1) NULL,
-- 	C21_ADDRESS_LINE2	VARCHAR2(70) NULL,
-- 	C22_MOBILE_PHONE	CHAR(40) NULL,
-- 	C23_LOCKID	NUMBER(5) NULL,
-- 	C24_IS_COMMERCIAL_ADDRESS	CHAR(1) NULL,
-- 	C25_LAST_NAME	VARCHAR2(64) NULL,
-- 	C26_TIME_ZONE	VARCHAR2(15) NULL,
-- 	C27_ALTERNATE_EMAILID	VARCHAR2(150) NULL,
-- 	C28_MODIFYUSERID	VARCHAR2(40) NULL,
-- 	C29_ADDRESS_LINE1	VARCHAR2(70) NULL,
-- 	C30_ZIP_CODE	VARCHAR2(35) NULL,
-- 	C31_CREATETS	DATE NULL,
-- 	C32_OTHER_PHONE	CHAR(40) NULL,
-- 	C33_COUNTRY	VARCHAR2(40) NULL,
-- 	C34_USE_COUNT	NUMBER(5) NULL,
-- 	C35_SUFFIX	VARCHAR2(40) NULL,
-- 	C36_EVENING_PHONE	CHAR(40) NULL,
-- 	C37_DAY_PHONE	CHAR(40) NULL,
-- 	C38_DEPARTMENT	VARCHAR2(40) NULL,
-- 	C39_DAY_FAX_NO	CHAR(40) NULL,
-- 	C40_CREATEUSERID	VARCHAR2(40) NULL,
-- 	C41_JOB_TITLE	VARCHAR2(40) NULL,
-- 	C42_IS_ADDRESS_VERIFIED	CHAR(1) NULL,
-- 	C43_ADDRESS_LINE3	VARCHAR2(70) NULL,
-- 	C44_LONGITUDE	NUMBER(11,8) NULL,
-- 	C45_MODIFYTS	DATE NULL,
-- 	C46_EVENING_FAX_NO	CHAR(40) NULL,
-- 	C47_PERSON_ID	CHAR(35) NULL
-- )
-- NOLOGGING

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 6 */
-- /* Load data */

-- /* SOURCE CODE */
-- select	
-- 	PI.EMAILID	   C1_EMAILID,
-- 	PI.ERROR_TXT	   C2_ERROR_TXT,
-- 	PI.LATITUDE	   C3_LATITUDE,
-- 	PI.MIDDLE_NAME	   C4_MIDDLE_NAME,
-- 	PI.ADDRESS_LINE5	   C5_ADDRESS_LINE5,
-- 	TRIM(PI.PERSON_INFO_KEY)	   C6_PERSON_INFO_KEY,
-- 	PI.FIRST_NAME	   C7_FIRST_NAME,
-- 	PI.TAX_GEO_CODE	   C8_TAX_GEO_CODE,
-- 	PI.COMPANY	   C9_COMPANY,
-- 	PI.ADDRESS_LINE6	   C10_ADDRESS_LINE6,
-- 	PI.ADDRESS_LINE4	   C11_ADDRESS_LINE4,
-- 	TRIM(PI.CITY)	   C12_CITY,
-- 	PI.TITLE	   C13_TITLE,
-- 	PI.HTTP_URL	   C14_HTTP_URL,
-- 	PI.CREATEPROGID	   C15_CREATEPROGID,
-- 	TRIM(PI.VERIFICATION_STATUS)	   C16_VERIFICATION_STATUS,
-- 	TRIM(PI.STATE)	   C17_STATE,
-- 	PI.MODIFYPROGID	   C18_MODIFYPROGID,
-- 	TRIM(PI.BEEPER)
-- 	   C19_BEEPER,
-- 	TRIM(PI.PREFERRED_SHIP_ADDRESS)	   C20_PREFERRED_SHIP_ADDRESS,
-- 	PI.ADDRESS_LINE2	   C21_ADDRESS_LINE2,
-- 	TRIM(PI.MOBILE_PHONE)	   C22_MOBILE_PHONE,
-- 	PI.LOCKID	   C23_LOCKID,
-- 	TRIM(PI.IS_COMMERCIAL_ADDRESS)	   C24_IS_COMMERCIAL_ADDRESS,
-- 	PI.LAST_NAME	   C25_LAST_NAME,
-- 	PI.TIME_ZONE	   C26_TIME_ZONE,
-- 	PI.ALTERNATE_EMAILID	   C27_ALTERNATE_EMAILID,
-- 	PI.MODIFYUSERID	   C28_MODIFYUSERID,
-- 	PI.ADDRESS_LINE1	   C29_ADDRESS_LINE1,
-- 	PI.ZIP_CODE	   C30_ZIP_CODE,
-- 	PI.CREATETS	   C31_CREATETS,
-- 	TRIM(PI.OTHER_PHONE)	   C32_OTHER_PHONE,
-- 	PI.COUNTRY	   C33_COUNTRY,
-- 	PI.USE_COUNT	   C34_USE_COUNT,
-- 	PI.SUFFIX	   C35_SUFFIX,
-- 	TRIM(PI.EVENING_PHONE)	   C36_EVENING_PHONE,
-- 	TRIM(PI.DAY_PHONE)	   C37_DAY_PHONE,
-- 	PI.DEPARTMENT	   C38_DEPARTMENT,
-- 	TRIM(PI.DAY_FAX_NO)	   C39_DAY_FAX_NO,
-- 	PI.CREATEUSERID	   C40_CREATEUSERID,
-- 	PI.JOB_TITLE	   C41_JOB_TITLE,
-- 	TRIM(PI.IS_ADDRESS_VERIFIED)	   C42_IS_ADDRESS_VERIFIED,
-- 	PI.ADDRESS_LINE3	   C43_ADDRESS_LINE3,
-- 	PI.LONGITUDE	   C44_LONGITUDE,
-- 	PI.MODIFYTS	   C45_MODIFYTS,
-- 	TRIM(PI.EVENING_FAX_NO)	   C46_EVENING_FAX_NO,
-- 	TRIM(PI.PERSON_ID)	   C47_PERSON_ID
-- from	OMS3_OWN.YFS_PERSON_INFO   PI
-- where	(1=1)
-- And (PI.MODIFYTS >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  -:v_cdc_oms_overlap




-- )





-- &

-- /* TARGET CODE */
-- insert into RAX_APP_USER.C$_0STG_PERSON_INFO
-- (
-- 	C1_EMAILID,
-- 	C2_ERROR_TXT,
-- 	C3_LATITUDE,
-- 	C4_MIDDLE_NAME,
-- 	C5_ADDRESS_LINE5,
-- 	C6_PERSON_INFO_KEY,
-- 	C7_FIRST_NAME,
-- 	C8_TAX_GEO_CODE,
-- 	C9_COMPANY,
-- 	C10_ADDRESS_LINE6,
-- 	C11_ADDRESS_LINE4,
-- 	C12_CITY,
-- 	C13_TITLE,
-- 	C14_HTTP_URL,
-- 	C15_CREATEPROGID,
-- 	C16_VERIFICATION_STATUS,
-- 	C17_STATE,
-- 	C18_MODIFYPROGID,
-- 	C19_BEEPER,
-- 	C20_PREFERRED_SHIP_ADDRESS,
-- 	C21_ADDRESS_LINE2,
-- 	C22_MOBILE_PHONE,
-- 	C23_LOCKID,
-- 	C24_IS_COMMERCIAL_ADDRESS,
-- 	C25_LAST_NAME,
-- 	C26_TIME_ZONE,
-- 	C27_ALTERNATE_EMAILID,
-- 	C28_MODIFYUSERID,
-- 	C29_ADDRESS_LINE1,
-- 	C30_ZIP_CODE,
-- 	C31_CREATETS,
-- 	C32_OTHER_PHONE,
-- 	C33_COUNTRY,
-- 	C34_USE_COUNT,
-- 	C35_SUFFIX,
-- 	C36_EVENING_PHONE,
-- 	C37_DAY_PHONE,
-- 	C38_DEPARTMENT,
-- 	C39_DAY_FAX_NO,
-- 	C40_CREATEUSERID,
-- 	C41_JOB_TITLE,
-- 	C42_IS_ADDRESS_VERIFIED,
-- 	C43_ADDRESS_LINE3,
-- 	C44_LONGITUDE,
-- 	C45_MODIFYTS,
-- 	C46_EVENING_FAX_NO,
-- 	C47_PERSON_ID
-- )
-- values
-- (
-- 	:C1_EMAILID,
-- 	:C2_ERROR_TXT,
-- 	:C3_LATITUDE,
-- 	:C4_MIDDLE_NAME,
-- 	:C5_ADDRESS_LINE5,
-- 	:C6_PERSON_INFO_KEY,
-- 	:C7_FIRST_NAME,
-- 	:C8_TAX_GEO_CODE,
-- 	:C9_COMPANY,
-- 	:C10_ADDRESS_LINE6,
-- 	:C11_ADDRESS_LINE4,
-- 	:C12_CITY,
-- 	:C13_TITLE,
-- 	:C14_HTTP_URL,
-- 	:C15_CREATEPROGID,
-- 	:C16_VERIFICATION_STATUS,
-- 	:C17_STATE,
-- 	:C18_MODIFYPROGID,
-- 	:C19_BEEPER,
-- 	:C20_PREFERRED_SHIP_ADDRESS,
-- 	:C21_ADDRESS_LINE2,
-- 	:C22_MOBILE_PHONE,
-- 	:C23_LOCKID,
-- 	:C24_IS_COMMERCIAL_ADDRESS,
-- 	:C25_LAST_NAME,
-- 	:C26_TIME_ZONE,
-- 	:C27_ALTERNATE_EMAILID,
-- 	:C28_MODIFYUSERID,
-- 	:C29_ADDRESS_LINE1,
-- 	:C30_ZIP_CODE,
-- 	:C31_CREATETS,
-- 	:C32_OTHER_PHONE,
-- 	:C33_COUNTRY,
-- 	:C34_USE_COUNT,
-- 	:C35_SUFFIX,
-- 	:C36_EVENING_PHONE,
-- 	:C37_DAY_PHONE,
-- 	:C38_DEPARTMENT,
-- 	:C39_DAY_FAX_NO,
-- 	:C40_CREATEUSERID,
-- 	:C41_JOB_TITLE,
-- 	:C42_IS_ADDRESS_VERIFIED,
-- 	:C43_ADDRESS_LINE3,
-- 	:C44_LONGITUDE,
-- 	:C45_MODIFYTS,
-- 	:C46_EVENING_FAX_NO,
-- 	:C47_PERSON_ID
-- )

-- &


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0STG_PERSON_INFO',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Create target table  */

BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.STG_PERSON_INFO
						(
							EMAILID	VARCHAR2(150) NULL,
							ERROR_TXT	VARCHAR2(1000) NULL,
							LATITUDE	NUMBER(11,8) NULL,
							MIDDLE_NAME	VARCHAR2(40) NULL,
							ADDRESS_LINE5	VARCHAR2(70) NULL,
							PERSON_INFO_KEY	CHAR(24) NULL,
							FIRST_NAME	VARCHAR2(64) NULL,
							TAX_GEO_CODE	VARCHAR2(40) NULL,
							COMPANY	VARCHAR2(50) NULL,
							ADDRESS_LINE6	VARCHAR2(70) NULL,
							ADDRESS_LINE4	VARCHAR2(70) NULL,
							CITY	VARCHAR2(35) NULL,
							TITLE	VARCHAR2(10) NULL,
							HTTP_URL	VARCHAR2(255) NULL,
							CREATEPROGID	VARCHAR2(40) NULL,
							VERIFICATION_STATUS	CHAR(15) NULL,
							STATE	VARCHAR2(35) NULL,
							MODIFYPROGID	VARCHAR2(40) NULL,
							BEEPER	CHAR(40) NULL,
							PREFERRED_SHIP_ADDRESS	CHAR(1) NULL,
							ADDRESS_LINE2	VARCHAR2(70) NULL,
							MOBILE_PHONE	CHAR(40) NULL,
							LOCKID	NUMBER(5) NULL,
							IS_COMMERCIAL_ADDRESS	CHAR(1) NULL,
							LAST_NAME	VARCHAR2(64) NULL,
							TIME_ZONE	VARCHAR2(15) NULL,
							ALTERNATE_EMAILID	VARCHAR2(150) NULL,
							MODIFYUSERID	VARCHAR2(40) NULL,
							ADDRESS_LINE1	VARCHAR2(70) NULL,
							ZIP_CODE	VARCHAR2(35) NULL,
							CREATETS	DATE NULL,
							OTHER_PHONE	CHAR(40) NULL,
							COUNTRY	VARCHAR2(40) NULL,
							USE_COUNT	NUMBER(5) NULL,
							SUFFIX	VARCHAR2(40) NULL,
							EVENING_PHONE	CHAR(40) NULL,
							DAY_PHONE	CHAR(40) NULL,
							DEPARTMENT	VARCHAR2(40) NULL,
							DAY_FAX_NO	CHAR(40) NULL,
							CREATEUSERID	VARCHAR2(40) NULL,
							JOB_TITLE	VARCHAR2(40) NULL,
							IS_ADDRESS_VERIFIED	CHAR(1) NULL,
							ADDRESS_LINE3	VARCHAR2(70) NULL,
							LONGITUDE	NUMBER(11,8) NULL,
							MODIFYTS	DATE NULL,
							EVENING_FAX_NO	CHAR(40) NULL,
							PERSON_ID	CHAR(35) NULL
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END; 

&


/*-----------------------------------------------*/
/* TASK No. 10 */
/* Truncate target table */

truncate table RAX_APP_USER.STG_PERSON_INFO


&


/*-----------------------------------------------*/
/* TASK No. 11 */
/* Insert new rows */

 
insert into	RAX_APP_USER.STG_PERSON_INFO 
( 
	EMAILID,
	ERROR_TXT,
	LATITUDE,
	MIDDLE_NAME,
	ADDRESS_LINE5,
	PERSON_INFO_KEY,
	FIRST_NAME,
	TAX_GEO_CODE,
	COMPANY,
	ADDRESS_LINE6,
	ADDRESS_LINE4,
	CITY,
	TITLE,
	HTTP_URL,
	CREATEPROGID,
	VERIFICATION_STATUS,
	STATE,
	MODIFYPROGID,
	BEEPER,
	PREFERRED_SHIP_ADDRESS,
	ADDRESS_LINE2,
	MOBILE_PHONE,
	LOCKID,
	IS_COMMERCIAL_ADDRESS,
	LAST_NAME,
	TIME_ZONE,
	ALTERNATE_EMAILID,
	MODIFYUSERID,
	ADDRESS_LINE1,
	ZIP_CODE,
	CREATETS,
	OTHER_PHONE,
	COUNTRY,
	USE_COUNT,
	SUFFIX,
	EVENING_PHONE,
	DAY_PHONE,
	DEPARTMENT,
	DAY_FAX_NO,
	CREATEUSERID,
	JOB_TITLE,
	IS_ADDRESS_VERIFIED,
	ADDRESS_LINE3,
	LONGITUDE,
	MODIFYTS,
	EVENING_FAX_NO,
	PERSON_ID 
	 
) 

select
    EMAILID,
	ERROR_TXT,
	LATITUDE,
	MIDDLE_NAME,
	ADDRESS_LINE5,
	PERSON_INFO_KEY,
	FIRST_NAME,
	TAX_GEO_CODE,
	COMPANY,
	ADDRESS_LINE6,
	ADDRESS_LINE4,
	CITY,
	TITLE,
	HTTP_URL,
	CREATEPROGID,
	VERIFICATION_STATUS,
	STATE,
	MODIFYPROGID,
	BEEPER,
	PREFERRED_SHIP_ADDRESS,
	ADDRESS_LINE2,
	MOBILE_PHONE,
	LOCKID,
	IS_COMMERCIAL_ADDRESS,
	LAST_NAME,
	TIME_ZONE,
	ALTERNATE_EMAILID,
	MODIFYUSERID,
	ADDRESS_LINE1,
	ZIP_CODE,
	CREATETS,
	OTHER_PHONE,
	COUNTRY,
	USE_COUNT,
	SUFFIX,
	EVENING_PHONE,
	DAY_PHONE,
	DEPARTMENT,
	DAY_FAX_NO,
	CREATEUSERID,
	JOB_TITLE,
	IS_ADDRESS_VERIFIED,
	ADDRESS_LINE3,
	LONGITUDE,
	MODIFYTS,
	EVENING_FAX_NO,
	PERSON_ID   
   
FROM (	


select 	
	C1_EMAILID EMAILID,
	C2_ERROR_TXT ERROR_TXT,
	C3_LATITUDE LATITUDE,
	C4_MIDDLE_NAME MIDDLE_NAME,
	C5_ADDRESS_LINE5 ADDRESS_LINE5,
	C6_PERSON_INFO_KEY PERSON_INFO_KEY,
	C7_FIRST_NAME FIRST_NAME,
	C8_TAX_GEO_CODE TAX_GEO_CODE,
	C9_COMPANY COMPANY,
	C10_ADDRESS_LINE6 ADDRESS_LINE6,
	C11_ADDRESS_LINE4 ADDRESS_LINE4,
	C12_CITY CITY,
	C13_TITLE TITLE,
	C14_HTTP_URL HTTP_URL,
	C15_CREATEPROGID CREATEPROGID,
	C16_VERIFICATION_STATUS VERIFICATION_STATUS,
	C17_STATE STATE,
	C18_MODIFYPROGID MODIFYPROGID,
	C19_BEEPER BEEPER,
	C20_PREFERRED_SHIP_ADDRESS PREFERRED_SHIP_ADDRESS,
	C21_ADDRESS_LINE2 ADDRESS_LINE2,
	C22_MOBILE_PHONE MOBILE_PHONE,
	C23_LOCKID LOCKID,
	C24_IS_COMMERCIAL_ADDRESS IS_COMMERCIAL_ADDRESS,
	C25_LAST_NAME LAST_NAME,
	C26_TIME_ZONE TIME_ZONE,
	C27_ALTERNATE_EMAILID ALTERNATE_EMAILID,
	C28_MODIFYUSERID MODIFYUSERID,
	C29_ADDRESS_LINE1 ADDRESS_LINE1,
	C30_ZIP_CODE ZIP_CODE,
	C31_CREATETS CREATETS,
	C32_OTHER_PHONE OTHER_PHONE,
	C33_COUNTRY COUNTRY,
	C34_USE_COUNT USE_COUNT,
	C35_SUFFIX SUFFIX,
	C36_EVENING_PHONE EVENING_PHONE,
	C37_DAY_PHONE DAY_PHONE,
	C38_DEPARTMENT DEPARTMENT,
	C39_DAY_FAX_NO DAY_FAX_NO,
	C40_CREATEUSERID CREATEUSERID,
	C41_JOB_TITLE JOB_TITLE,
	C42_IS_ADDRESS_VERIFIED IS_ADDRESS_VERIFIED,
	C43_ADDRESS_LINE3 ADDRESS_LINE3,
	C44_LONGITUDE LONGITUDE,
	C45_MODIFYTS MODIFYTS,
	C46_EVENING_FAX_NO EVENING_FAX_NO,
	C47_PERSON_ID PERSON_ID 
from	RAX_APP_USER.C$_0STG_PERSON_INFO
where		(1=1)	






)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 1000008 */
/* Drop work table */

drop table RAX_APP_USER.C$_0STG_PERSON_INFO 

&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Insert new rows */

 
insert into	ODS_STAGE.OMS_PERSON_INFO_XR 
( 
	PERSON_INFO_KEY 
	,PERSON_INFO_OID,
	ODS_CREATE_DATE 
) 

select
    PERSON_INFO_KEY   
  ,ODS_STAGE.PERSON_INFO_OID_SEQ.nextval,
	SYSDATE 
FROM (	


select 	DISTINCT
	TRIM(PI.PERSON_INFO_KEY) PERSON_INFO_KEY 
from	RAX_APP_USER.STG_PERSON_INFO   PI, ODS_STAGE.OMS_PERSON_INFO_XR   OMS_PERSON_INFO_XR
where		(1=1)	
 And (TRIM(PI.PERSON_INFO_KEY)=OMS_PERSON_INFO_XR.PERSON_INFO_KEY (+)
AND OMS_PERSON_INFO_XR.PERSON_INFO_KEY IS NULL)





)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 15 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 15 */




/*-----------------------------------------------*/
/* TASK No. 16 */
/* Drop flow table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_PERSON_INFO18300 ';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END; 

&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_PERSON_INFO18300
(
	PERSON_INFO_OID	NUMBER NULL,
	FIRST_NAME	VARCHAR2(80) NULL,
	MIDDLE_NAME	VARCHAR2(80) NULL,
	LAST_NAME	VARCHAR2(80) NULL,
	ADDRESS_LINE1	VARCHAR2(70) NULL,
	ADDRESS_LINE2	VARCHAR2(70) NULL,
	ADDRESS_LINE3	VARCHAR2(70) NULL,
	ADDRESS_LINE4	VARCHAR2(70) NULL,
	ADDRESS_LINE5	VARCHAR2(70) NULL,
	ADDRESS_LINE6	VARCHAR2(70) NULL,
	CITY	VARCHAR2(40) NULL,
	STATE	VARCHAR2(40) NULL,
	ZIP_CODE	VARCHAR2(40) NULL,
	EMAIL_ADDRESS	VARCHAR2(150) NULL,
	DAY_PHONE	VARCHAR2(40) NULL,
	MOBILE_PHONE	VARCHAR2(40) NULL,
	EVENING_PHONE	VARCHAR2(40) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	COUNTRY	VARCHAR2(40) NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_PERSON_INFO18300
(
	PERSON_INFO_OID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	ADDRESS_LINE3,
	ADDRESS_LINE4,
	ADDRESS_LINE5,
	ADDRESS_LINE6,
	CITY,
	STATE,
	ZIP_CODE,
	EMAIL_ADDRESS,
	DAY_PHONE,
	MOBILE_PHONE,
	EVENING_PHONE,
	SOURCE_SYSTEM_OID,
	COUNTRY,
	IND_UPDATE
)
select 
PERSON_INFO_OID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	ADDRESS_LINE3,
	ADDRESS_LINE4,
	ADDRESS_LINE5,
	ADDRESS_LINE6,
	CITY,
	STATE,
	ZIP_CODE,
	EMAIL_ADDRESS,
	DAY_PHONE,
	MOBILE_PHONE,
	EVENING_PHONE,
	SOURCE_SYSTEM_OID,
	COUNTRY,
	IND_UPDATE
 from (


select 	 
	
	OMS_PERSON_INFO_XR.PERSON_INFO_OID PERSON_INFO_OID,
	PI.FIRST_NAME FIRST_NAME,
	PI.MIDDLE_NAME MIDDLE_NAME,
	PI.LAST_NAME LAST_NAME,
	PI.ADDRESS_LINE1 ADDRESS_LINE1,
	PI.ADDRESS_LINE2 ADDRESS_LINE2,
	PI.ADDRESS_LINE3 ADDRESS_LINE3,
	PI.ADDRESS_LINE4 ADDRESS_LINE4,
	PI.ADDRESS_LINE5 ADDRESS_LINE5,
	PI.ADDRESS_LINE6 ADDRESS_LINE6,
	PI.CITY CITY,
	PI.STATE STATE,
	PI.ZIP_CODE ZIP_CODE,
	PI.EMAILID EMAIL_ADDRESS,
	PI.DAY_PHONE DAY_PHONE,
	PI.MOBILE_PHONE MOBILE_PHONE,
	PI.EVENING_PHONE EVENING_PHONE,
	SOURCE_SYSTEM.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,
	PI.COUNTRY COUNTRY,

	'I' IND_UPDATE

from	RAX_APP_USER.STG_PERSON_INFO   PI, ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM, ODS_STAGE.OMS_PERSON_INFO_XR   OMS_PERSON_INFO_XR
where	(1=1)
 And (TRIM(PI.PERSON_INFO_KEY)=OMS_PERSON_INFO_XR.PERSON_INFO_KEY)
And (SOURCE_SYSTEM.SOURCE_SYSTEM_SHORT_NAME='OMS')




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.PERSON_INFO T
	where	T.PERSON_INFO_OID	= S.PERSON_INFO_OID 
		 and ((T.FIRST_NAME = S.FIRST_NAME) or (T.FIRST_NAME IS NULL and S.FIRST_NAME IS NULL)) and
		((T.MIDDLE_NAME = S.MIDDLE_NAME) or (T.MIDDLE_NAME IS NULL and S.MIDDLE_NAME IS NULL)) and
		((T.LAST_NAME = S.LAST_NAME) or (T.LAST_NAME IS NULL and S.LAST_NAME IS NULL)) and
		((T.ADDRESS_LINE1 = S.ADDRESS_LINE1) or (T.ADDRESS_LINE1 IS NULL and S.ADDRESS_LINE1 IS NULL)) and
		((T.ADDRESS_LINE2 = S.ADDRESS_LINE2) or (T.ADDRESS_LINE2 IS NULL and S.ADDRESS_LINE2 IS NULL)) and
		((T.ADDRESS_LINE3 = S.ADDRESS_LINE3) or (T.ADDRESS_LINE3 IS NULL and S.ADDRESS_LINE3 IS NULL)) and
		((T.ADDRESS_LINE4 = S.ADDRESS_LINE4) or (T.ADDRESS_LINE4 IS NULL and S.ADDRESS_LINE4 IS NULL)) and
		((T.ADDRESS_LINE5 = S.ADDRESS_LINE5) or (T.ADDRESS_LINE5 IS NULL and S.ADDRESS_LINE5 IS NULL)) and
		((T.ADDRESS_LINE6 = S.ADDRESS_LINE6) or (T.ADDRESS_LINE6 IS NULL and S.ADDRESS_LINE6 IS NULL)) and
		((T.CITY = S.CITY) or (T.CITY IS NULL and S.CITY IS NULL)) and
		((T.STATE = S.STATE) or (T.STATE IS NULL and S.STATE IS NULL)) and
		((T.ZIP_CODE = S.ZIP_CODE) or (T.ZIP_CODE IS NULL and S.ZIP_CODE IS NULL)) and
		((T.EMAIL_ADDRESS = S.EMAIL_ADDRESS) or (T.EMAIL_ADDRESS IS NULL and S.EMAIL_ADDRESS IS NULL)) and
		((T.DAY_PHONE = S.DAY_PHONE) or (T.DAY_PHONE IS NULL and S.DAY_PHONE IS NULL)) and
		((T.MOBILE_PHONE = S.MOBILE_PHONE) or (T.MOBILE_PHONE IS NULL and S.MOBILE_PHONE IS NULL)) and
		((T.EVENING_PHONE = S.EVENING_PHONE) or (T.EVENING_PHONE IS NULL and S.EVENING_PHONE IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL)) and
		((T.COUNTRY = S.COUNTRY) or (T.COUNTRY IS NULL and S.COUNTRY IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* Recycle previous errors */
BEGIN
   EXECUTE IMMEDIATE 'insert into RAX_APP_USER.I$_PERSON_INFO18300
                        (
                            PERSON_INFO_OID,
                            FIRST_NAME,
                            MIDDLE_NAME,
                            LAST_NAME,
                            ADDRESS_LINE1,
                            ADDRESS_LINE2,
                            ADDRESS_LINE3,
                            ADDRESS_LINE4,
                            ADDRESS_LINE5,
                            ADDRESS_LINE6,
                            CITY,
                            STATE,
                            ZIP_CODE,
                            EMAIL_ADDRESS,
                            DAY_PHONE,
                            MOBILE_PHONE,
                            EVENING_PHONE,
                            SOURCE_SYSTEM_OID,
                            COUNTRY,
                            IND_UPDATE
                        )
                        select	DISTINCT PERSON_INFO_OID,
                            FIRST_NAME,
                            MIDDLE_NAME,
                            LAST_NAME,
                            ADDRESS_LINE1,
                            ADDRESS_LINE2,
                            ADDRESS_LINE3,
                            ADDRESS_LINE4,
                            ADDRESS_LINE5,
                            ADDRESS_LINE6,
                            CITY,
                            STATE,
                            ZIP_CODE,
                            EMAIL_ADDRESS,
                            DAY_PHONE,
                            MOBILE_PHONE,
                            EVENING_PHONE,
                            SOURCE_SYSTEM_OID,
                            COUNTRY,
                            ''I'' IND_UPDATE
                        from	RAX_APP_USER.E$_PERSON_INFO18300 E
                        where 	not exists (
                                select	''?''
                                from	RAX_APP_USER.I$_PERSON_INFO18300 T
                                where			T.PERSON_INFO_OID=E.PERSON_INFO_OID
                                )
                        and	E.ODI_ORIGIN	= ''(18300)ODS_Project.LOAD_PERSON_INFO_INT''
                        and	E.ODI_ERR_TYPE	= ''F''';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_PERSON_INFO18300',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_PERSON_INFO_IDX18300
on		RAX_APP_USER.I$_PERSON_INFO18300 (PERSON_INFO_OID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* create check table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
						(
							CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
							SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
							RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
							FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
							ERR_TYPE		VARCHAR2(1 CHAR) NULL,
							ERR_MESS		VARCHAR2(250 CHAR) NULL ,
							CHECK_DATE	DATE NULL,
							ORIGIN		VARCHAR2(100 CHAR) NULL,
							CONS_NAME	VARCHAR2(35 CHAR) NULL,
							CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ERR_COUNT		NUMBER(10) NULL
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END; 
	

&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(18300)ODS_Project.LOAD_PERSON_INFO_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* create error table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_PERSON_INFO18300
						(
							ODI_ROW_ID 		UROWID,
							ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
							ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
							ODI_CHECK_DATE	DATE NULL, 
							PERSON_INFO_OID	NUMBER NULL,
							FIRST_NAME	VARCHAR2(80) NULL,
							MIDDLE_NAME	VARCHAR2(80) NULL,
							LAST_NAME	VARCHAR2(80) NULL,
							ADDRESS_LINE1	VARCHAR2(70) NULL,
							ADDRESS_LINE2	VARCHAR2(70) NULL,
							ADDRESS_LINE3	VARCHAR2(70) NULL,
							ADDRESS_LINE4	VARCHAR2(70) NULL,
							ADDRESS_LINE5	VARCHAR2(70) NULL,
							ADDRESS_LINE6	VARCHAR2(70) NULL,
							CITY	VARCHAR2(40) NULL,
							STATE	VARCHAR2(40) NULL,
							ZIP_CODE	VARCHAR2(40) NULL,
							EMAIL_ADDRESS	VARCHAR2(150) NULL,
							DAY_PHONE	VARCHAR2(40) NULL,
							MOBILE_PHONE	VARCHAR2(40) NULL,
							EVENING_PHONE	VARCHAR2(40) NULL,
							ODS_CREATE_DATE	DATE NULL,
							ODS_MODIFY_DATE	DATE NULL,
							SOURCE_SYSTEM_OID	NUMBER NULL,
							COUNTRY	VARCHAR2(40) NULL,
							ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
							ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
							ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
							ODI_SESS_NO		VARCHAR2(19 CHAR)
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;



&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_PERSON_INFO18300
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(18300)ODS_Project.LOAD_PERSON_INFO_INT')


&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.I$_PERSON_INFO18300 on	RAX_APP_USER.I$_PERSON_INFO18300 (PERSON_INFO_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 and SQLCODE != -01408 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_PERSON_INFO' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.PERSON_INFO' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '18300';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_PERSON_INFO18300
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	PERSON_INFO_OID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	ADDRESS_LINE3,
	ADDRESS_LINE4,
	ADDRESS_LINE5,
	ADDRESS_LINE6,
	CITY,
	STATE,
	ZIP_CODE,
	EMAIL_ADDRESS,
	DAY_PHONE,
	MOBILE_PHONE,
	EVENING_PHONE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	COUNTRY
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15064: The primary key PERSON_INFO_PK is not unique.'',
	''(18300)ODS_Project.LOAD_PERSON_INFO_INT'',
	sysdate,
	''PERSON_INFO_PK'',
	''PK'',	
	PERSON_INFO.PERSON_INFO_OID,
	PERSON_INFO.FIRST_NAME,
	PERSON_INFO.MIDDLE_NAME,
	PERSON_INFO.LAST_NAME,
	PERSON_INFO.ADDRESS_LINE1,
	PERSON_INFO.ADDRESS_LINE2,
	PERSON_INFO.ADDRESS_LINE3,
	PERSON_INFO.ADDRESS_LINE4,
	PERSON_INFO.ADDRESS_LINE5,
	PERSON_INFO.ADDRESS_LINE6,
	PERSON_INFO.CITY,
	PERSON_INFO.STATE,
	PERSON_INFO.ZIP_CODE,
	PERSON_INFO.EMAIL_ADDRESS,
	PERSON_INFO.DAY_PHONE,
	PERSON_INFO.MOBILE_PHONE,
	PERSON_INFO.EVENING_PHONE,
	PERSON_INFO.ODS_CREATE_DATE,
	PERSON_INFO.ODS_MODIFY_DATE,
	PERSON_INFO.SOURCE_SYSTEM_OID,
	PERSON_INFO.COUNTRY
from	'
 || VariableCheckTable || 
' PERSON_INFO 
where	exists  (
		select	SUB1.PERSON_INFO_OID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.PERSON_INFO_OID=PERSON_INFO.PERSON_INFO_OID
		group by 	SUB1.PERSON_INFO_OID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	PERSON_INFO_PKX_flow on RAX_APP_USER.I$_PERSON_INFO18300 (PERSON_INFO_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 and SQLCODE != -01408 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* insert AK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_PERSON_INFO' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.PERSON_INFO' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '18300';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_PERSON_INFO18300
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	PERSON_INFO_OID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	ADDRESS_LINE3,
	ADDRESS_LINE4,
	ADDRESS_LINE5,
	ADDRESS_LINE6,
	CITY,
	STATE,
	ZIP_CODE,
	EMAIL_ADDRESS,
	DAY_PHONE,
	MOBILE_PHONE,
	EVENING_PHONE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	COUNTRY
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15063: The alternate key PERSON_INFO_PKX is not unique.'',
	''(18300)ODS_Project.LOAD_PERSON_INFO_INT'',
	sysdate,
	''PERSON_INFO_PKX'',
	''AK'',	
	PERSON_INFO.PERSON_INFO_OID,
	PERSON_INFO.FIRST_NAME,
	PERSON_INFO.MIDDLE_NAME,
	PERSON_INFO.LAST_NAME,
	PERSON_INFO.ADDRESS_LINE1,
	PERSON_INFO.ADDRESS_LINE2,
	PERSON_INFO.ADDRESS_LINE3,
	PERSON_INFO.ADDRESS_LINE4,
	PERSON_INFO.ADDRESS_LINE5,
	PERSON_INFO.ADDRESS_LINE6,
	PERSON_INFO.CITY,
	PERSON_INFO.STATE,
	PERSON_INFO.ZIP_CODE,
	PERSON_INFO.EMAIL_ADDRESS,
	PERSON_INFO.DAY_PHONE,
	PERSON_INFO.MOBILE_PHONE,
	PERSON_INFO.EVENING_PHONE,
	PERSON_INFO.ODS_CREATE_DATE,
	PERSON_INFO.ODS_MODIFY_DATE,
	PERSON_INFO.SOURCE_SYSTEM_OID,
	PERSON_INFO.COUNTRY
from              '	
 || VariableCheckTable || 
' PERSON_INFO
where	exists  (
		select	SUB.PERSON_INFO_OID
		from 	'
 || VariableCheckTable || 
' SUB
		where 	SUB.PERSON_INFO_OID=PERSON_INFO.PERSON_INFO_OID
		group by 	SUB.PERSON_INFO_OID
		having 	count(1) > 1
		)
 ';

END;

/*  Checked Datastore =RAX_APP_USER.I$_PERSON_INFO  */
/*  Integration Datastore =RAX_APP_USER.I$_PERSON_INFO   */
/*  Target Datastore =ODS_OWN.PERSON_INFO */



&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_PERSON_INFO18300
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	PERSON_INFO_OID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	ADDRESS_LINE3,
	ADDRESS_LINE4,
	ADDRESS_LINE5,
	ADDRESS_LINE6,
	CITY,
	STATE,
	ZIP_CODE,
	EMAIL_ADDRESS,
	DAY_PHONE,
	MOBILE_PHONE,
	EVENING_PHONE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	COUNTRY
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column PERSON_INFO_OID cannot be null.',
	sysdate,
	'(18300)ODS_Project.LOAD_PERSON_INFO_INT',
	'PERSON_INFO_OID',
	'NN',	
	PERSON_INFO_OID,
	FIRST_NAME,
	MIDDLE_NAME,
	LAST_NAME,
	ADDRESS_LINE1,
	ADDRESS_LINE2,
	ADDRESS_LINE3,
	ADDRESS_LINE4,
	ADDRESS_LINE5,
	ADDRESS_LINE6,
	CITY,
	STATE,
	ZIP_CODE,
	EMAIL_ADDRESS,
	DAY_PHONE,
	MOBILE_PHONE,
	EVENING_PHONE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	COUNTRY
from	RAX_APP_USER.I$_PERSON_INFO18300
where	PERSON_INFO_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_PERSON_INFO18300 on	RAX_APP_USER.E$_PERSON_INFO18300 (ODI_ROW_ID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 and SQLCODE != -01408 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_PERSON_INFO18300  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_PERSON_INFO18300 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'PERSON_INFO',
	'ODS_OWN.PERSON_INFO18300',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_PERSON_INFO18300 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(18300)ODS_Project.LOAD_PERSON_INFO_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 34 */
/* Merge Rows */

merge into	ODS_OWN.PERSON_INFO T
using	RAX_APP_USER.I$_PERSON_INFO18300 S
on	(
		T.PERSON_INFO_OID=S.PERSON_INFO_OID
	)
when matched
then update set
	T.FIRST_NAME	= S.FIRST_NAME,
	T.MIDDLE_NAME	= S.MIDDLE_NAME,
	T.LAST_NAME	= S.LAST_NAME,
	T.ADDRESS_LINE1	= S.ADDRESS_LINE1,
	T.ADDRESS_LINE2	= S.ADDRESS_LINE2,
	T.ADDRESS_LINE3	= S.ADDRESS_LINE3,
	T.ADDRESS_LINE4	= S.ADDRESS_LINE4,
	T.ADDRESS_LINE5	= S.ADDRESS_LINE5,
	T.ADDRESS_LINE6	= S.ADDRESS_LINE6,
	T.CITY	= S.CITY,
	T.STATE	= S.STATE,
	T.ZIP_CODE	= S.ZIP_CODE,
	T.EMAIL_ADDRESS	= S.EMAIL_ADDRESS,
	T.DAY_PHONE	= S.DAY_PHONE,
	T.MOBILE_PHONE	= S.MOBILE_PHONE,
	T.EVENING_PHONE	= S.EVENING_PHONE,
	T.SOURCE_SYSTEM_OID	= S.SOURCE_SYSTEM_OID,
	T.COUNTRY	= S.COUNTRY
	,                  T.ODS_MODIFY_DATE	= SYSDATE
when not matched
then insert
	(
	T.PERSON_INFO_OID,
	T.FIRST_NAME,
	T.MIDDLE_NAME,
	T.LAST_NAME,
	T.ADDRESS_LINE1,
	T.ADDRESS_LINE2,
	T.ADDRESS_LINE3,
	T.ADDRESS_LINE4,
	T.ADDRESS_LINE5,
	T.ADDRESS_LINE6,
	T.CITY,
	T.STATE,
	T.ZIP_CODE,
	T.EMAIL_ADDRESS,
	T.DAY_PHONE,
	T.MOBILE_PHONE,
	T.EVENING_PHONE,
	T.SOURCE_SYSTEM_OID,
	T.COUNTRY
	,                   T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.PERSON_INFO_OID,
	S.FIRST_NAME,
	S.MIDDLE_NAME,
	S.LAST_NAME,
	S.ADDRESS_LINE1,
	S.ADDRESS_LINE2,
	S.ADDRESS_LINE3,
	S.ADDRESS_LINE4,
	S.ADDRESS_LINE5,
	S.ADDRESS_LINE6,
	S.CITY,
	S.STATE,
	S.ZIP_CODE,
	S.EMAIL_ADDRESS,
	S.DAY_PHONE,
	S.MOBILE_PHONE,
	S.EVENING_PHONE,
	S.SOURCE_SYSTEM_OID,
	S.COUNTRY
	,                   SYSDATE,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 35 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 36 */
/* Drop flow table */

drop table RAX_APP_USER.I$_PERSON_INFO18300 

&


/*-----------------------------------------------*/
/* TASK No. 37 */
/* Update CDC Load Status */

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
+ nvl((TIMEZONE_OFFSET/24), 0) 
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env
*/

&


/*-----------------------------------------------*/
/* TASK No. 38 */
/* Insert CDC Audit Record */

INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME,
TIMEZONE_OFFSET              
)
select 
:v_cdc_load_table_name
,:v_sess_no
,'LOAD_PERSON_INFO_PKG'
,'027'
,TO_DATE(SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
,TO_DATE (SUBSTR(:v_cdc_load_date, 1, 19),'YYYY-MM-DD HH24:MI:SS')
,:v_cdc_overlap
,SYSDATE
,:v_env
,TIMEZONE_OFFSET
from 
ODS_OWN.ODS_CDC_LOAD_STATUS
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME              
)
values (
:v_cdc_load_table_name,
:v_sess_no,
'LOAD_PERSON_INFO_PKG',
'027',
TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS'),
TO_DATE (SUBSTR (:v_cdc_load_date, 1, 19),
                           'YYYY-MM-DD HH24:MI:SS'
                          )
,:v_cdc_overlap,
SYSDATE,
 :v_env)
*/


&


/*-----------------------------------------------*/
