/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Drop work table */

-- drop table RAX_APP_USER.C$_0STG_LINE_CHARGE 

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 5 */
-- /* Create work table */

-- create table RAX_APP_USER.C$_0STG_LINE_CHARGE
-- (
-- 	C1_RECORD_TYPE	VARCHAR2(20) NULL,
-- 	C2_HEADER_KEY	CHAR(24) NULL,
-- 	C3_EXTN_TAX_CODE	VARCHAR2(20) NULL,
-- 	C4_CREATETS	DATE NULL,
-- 	C5_LINE_KEY	CHAR(24) NULL,
-- 	C6_REFERENCE	VARCHAR2(50) NULL,
-- 	C7_CHARGE_CATEGORY	VARCHAR2(20) NULL,
-- 	C8_CREATEPROGID	VARCHAR2(40) NULL,
-- 	C9_EXTN_IS_PERCENTAGE_DISCOUNT	CHAR(1) NULL,
-- 	C10_ORIGINAL_CHARGEPERUNIT	NUMBER(19,6) NULL,
-- 	C11_ORIGINAL_CHARGEPERLINE	NUMBER(15,2) NULL,
-- 	C12_EXTN_TDEBIT_AMOUNT	NUMBER(9,2) NULL,
-- 	C13_EXTN_TAX_INCLUSIVE	VARCHAR2(1) NULL,
-- 	C14_EXTN_DISCOUNT_PERCENTAGE	NUMBER(5,2) NULL,
-- 	C15_CHARGEPERUNIT	NUMBER(19,6) NULL,
-- 	C16_CHARGEPERLINE	NUMBER(15,2) NULL,
-- 	C17_MODIFYUSERID	VARCHAR2(40) NULL,
-- 	C18_MODIFYTS	DATE NULL,
-- 	C19_MODIFYPROGID	VARCHAR2(40) NULL,
-- 	C20_CREATEUSERID	VARCHAR2(40) NULL,
-- 	C21_LINE_CHARGES_KEY	CHAR(24) NULL,
-- 	C22_EXTN_TAXABLE	VARCHAR2(1) NULL,
-- 	C23_INVOICED_EXTENDED_CHARGE	NUMBER(15,2) NULL,
-- 	C24_CHARGEAMOUNT	NUMBER(15,2) NULL,
-- 	C25_LOCKID	NUMBER(5) NULL,
-- 	C26_EXTN_CHARGE_DESCRIPTION	VARCHAR2(100) NULL,
-- 	C27_INVOICED_CHARGE_PER_LINE	NUMBER(15,2) NULL,
-- 	C28_CHARGE_NAME	VARCHAR2(40) NULL
-- )
-- NOLOGGING

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 6 */
-- /* Load data */

-- /* SOURCE CODE */
-- select	
-- 	LC.RECORD_TYPE	   C1_RECORD_TYPE,
-- 	LC.HEADER_KEY	   C2_HEADER_KEY,
-- 	LC.EXTN_TAX_CODE	   C3_EXTN_TAX_CODE,
-- 	LC.CREATETS	   C4_CREATETS,
-- 	LC.LINE_KEY	   C5_LINE_KEY,
-- 	LC.REFERENCE	   C6_REFERENCE,
-- 	LC.CHARGE_CATEGORY	   C7_CHARGE_CATEGORY,
-- 	LC.CREATEPROGID	   C8_CREATEPROGID,
-- 	LC.EXTN_IS_PERCENTAGE_DISCOUNT	   C9_EXTN_IS_PERCENTAGE_DISCOUNT,
-- 	LC.ORIGINAL_CHARGEPERUNIT	   C10_ORIGINAL_CHARGEPERUNIT,
-- 	LC.ORIGINAL_CHARGEPERLINE	   C11_ORIGINAL_CHARGEPERLINE,
-- 	LC.EXTN_TDEBIT_AMOUNT	   C12_EXTN_TDEBIT_AMOUNT,
-- 	LC.EXTN_TAX_INCLUSIVE	   C13_EXTN_TAX_INCLUSIVE,
-- 	LC.EXTN_DISCOUNT_PERCENTAGE	   C14_EXTN_DISCOUNT_PERCENTAGE,
-- 	LC.CHARGEPERUNIT	   C15_CHARGEPERUNIT,
-- 	LC.CHARGEPERLINE	   C16_CHARGEPERLINE,
-- 	LC.MODIFYUSERID	   C17_MODIFYUSERID,
-- 	LC.MODIFYTS	   C18_MODIFYTS,
-- 	LC.MODIFYPROGID	   C19_MODIFYPROGID,
-- 	LC.CREATEUSERID	   C20_CREATEUSERID,
-- 	LC.LINE_CHARGES_KEY	   C21_LINE_CHARGES_KEY,
-- 	LC.EXTN_TAXABLE	   C22_EXTN_TAXABLE,
-- 	LC.INVOICED_EXTENDED_CHARGE	   C23_INVOICED_EXTENDED_CHARGE,
-- 	LC.CHARGEAMOUNT	   C24_CHARGEAMOUNT,
-- 	LC.LOCKID	   C25_LOCKID,
-- 	LC.EXTN_CHARGE_DESCRIPTION	   C26_EXTN_CHARGE_DESCRIPTION,
-- 	LC.INVOICED_CHARGE_PER_LINE	   C27_INVOICED_CHARGE_PER_LINE,
-- 	LC.CHARGE_NAME	   C28_CHARGE_NAME
-- from	OMS3_OWN.YFS_LINE_CHARGES   LC
-- where	(1=1)
-- And (LC.MODIFYTS >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  -:v_cdc_oms_overlap)





-- &

-- /* TARGET CODE */
-- insert into RAX_APP_USER.C$_0STG_LINE_CHARGE
-- (
-- 	C1_RECORD_TYPE,
-- 	C2_HEADER_KEY,
-- 	C3_EXTN_TAX_CODE,
-- 	C4_CREATETS,
-- 	C5_LINE_KEY,
-- 	C6_REFERENCE,
-- 	C7_CHARGE_CATEGORY,
-- 	C8_CREATEPROGID,
-- 	C9_EXTN_IS_PERCENTAGE_DISCOUNT,
-- 	C10_ORIGINAL_CHARGEPERUNIT,
-- 	C11_ORIGINAL_CHARGEPERLINE,
-- 	C12_EXTN_TDEBIT_AMOUNT,
-- 	C13_EXTN_TAX_INCLUSIVE,
-- 	C14_EXTN_DISCOUNT_PERCENTAGE,
-- 	C15_CHARGEPERUNIT,
-- 	C16_CHARGEPERLINE,
-- 	C17_MODIFYUSERID,
-- 	C18_MODIFYTS,
-- 	C19_MODIFYPROGID,
-- 	C20_CREATEUSERID,
-- 	C21_LINE_CHARGES_KEY,
-- 	C22_EXTN_TAXABLE,
-- 	C23_INVOICED_EXTENDED_CHARGE,
-- 	C24_CHARGEAMOUNT,
-- 	C25_LOCKID,
-- 	C26_EXTN_CHARGE_DESCRIPTION,
-- 	C27_INVOICED_CHARGE_PER_LINE,
-- 	C28_CHARGE_NAME
-- )
-- values
-- (
-- 	:C1_RECORD_TYPE,
-- 	:C2_HEADER_KEY,
-- 	:C3_EXTN_TAX_CODE,
-- 	:C4_CREATETS,
-- 	:C5_LINE_KEY,
-- 	:C6_REFERENCE,
-- 	:C7_CHARGE_CATEGORY,
-- 	:C8_CREATEPROGID,
-- 	:C9_EXTN_IS_PERCENTAGE_DISCOUNT,
-- 	:C10_ORIGINAL_CHARGEPERUNIT,
-- 	:C11_ORIGINAL_CHARGEPERLINE,
-- 	:C12_EXTN_TDEBIT_AMOUNT,
-- 	:C13_EXTN_TAX_INCLUSIVE,
-- 	:C14_EXTN_DISCOUNT_PERCENTAGE,
-- 	:C15_CHARGEPERUNIT,
-- 	:C16_CHARGEPERLINE,
-- 	:C17_MODIFYUSERID,
-- 	:C18_MODIFYTS,
-- 	:C19_MODIFYPROGID,
-- 	:C20_CREATEUSERID,
-- 	:C21_LINE_CHARGES_KEY,
-- 	:C22_EXTN_TAXABLE,
-- 	:C23_INVOICED_EXTENDED_CHARGE,
-- 	:C24_CHARGEAMOUNT,
-- 	:C25_LOCKID,
-- 	:C26_EXTN_CHARGE_DESCRIPTION,
-- 	:C27_INVOICED_CHARGE_PER_LINE,
-- 	:C28_CHARGE_NAME
-- )

-- &


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0STG_LINE_CHARGE',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Create target table  */

BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.STG_LINE_CHARGE
						(
							RECORD_TYPE	VARCHAR2(20) NULL,
							HEADER_KEY	CHAR(24) NULL,
							EXTN_TAX_CODE	VARCHAR2(20) NULL,
							CREATETS	DATE NULL,
							LINE_KEY	CHAR(24) NULL,
							REFERENCE	VARCHAR2(50) NULL,
							CHARGE_CATEGORY	VARCHAR2(20) NULL,
							CREATEPROGID	VARCHAR2(40) NULL,
							EXTN_IS_PERCENTAGE_DISCOUNT	CHAR(1) NULL,
							ORIGINAL_CHARGEPERUNIT	NUMBER(19,6) NULL,
							ORIGINAL_CHARGEPERLINE	NUMBER(15,2) NULL,
							EXTN_TDEBIT_AMOUNT	NUMBER(9,2) NULL,
							EXTN_TAX_INCLUSIVE	VARCHAR2(1) NULL,
							EXTN_DISCOUNT_PERCENTAGE	NUMBER(5,2) NULL,
							CHARGEPERUNIT	NUMBER(19,6) NULL,
							CHARGEPERLINE	NUMBER(15,2) NULL,
							MODIFYUSERID	VARCHAR2(40) NULL,
							MODIFYTS	DATE NULL,
							MODIFYPROGID	VARCHAR2(40) NULL,
							CREATEUSERID	VARCHAR2(40) NULL,
							LINE_CHARGES_KEY	CHAR(24) NULL,
							EXTN_TAXABLE	VARCHAR2(1) NULL,
							INVOICED_EXTENDED_CHARGE	NUMBER(15,2) NULL,
							CHARGEAMOUNT	NUMBER(15,2) NULL,
							LOCKID	NUMBER(5) NULL,
							EXTN_CHARGE_DESCRIPTION	VARCHAR2(100) NULL,
							INVOICED_CHARGE_PER_LINE	NUMBER(15,2) NULL,
							CHARGE_NAME	VARCHAR2(40) NULL
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 10 */
/* Truncate target table */

truncate table RAX_APP_USER.STG_LINE_CHARGE


&


/*-----------------------------------------------*/
/* TASK No. 11 */
/* Insert new rows */

 
insert into	RAX_APP_USER.STG_LINE_CHARGE 
( 
	RECORD_TYPE,
	HEADER_KEY,
	EXTN_TAX_CODE,
	CREATETS,
	LINE_KEY,
	REFERENCE,
	CHARGE_CATEGORY,
	CREATEPROGID,
	EXTN_IS_PERCENTAGE_DISCOUNT,
	ORIGINAL_CHARGEPERUNIT,
	ORIGINAL_CHARGEPERLINE,
	EXTN_TDEBIT_AMOUNT,
	EXTN_TAX_INCLUSIVE,
	EXTN_DISCOUNT_PERCENTAGE,
	CHARGEPERUNIT,
	CHARGEPERLINE,
	MODIFYUSERID,
	MODIFYTS,
	MODIFYPROGID,
	CREATEUSERID,
	LINE_CHARGES_KEY,
	EXTN_TAXABLE,
	INVOICED_EXTENDED_CHARGE,
	CHARGEAMOUNT,
	LOCKID,
	EXTN_CHARGE_DESCRIPTION,
	INVOICED_CHARGE_PER_LINE,
	CHARGE_NAME 
	 
) 

select
    RECORD_TYPE,
	HEADER_KEY,
	EXTN_TAX_CODE,
	CREATETS,
	LINE_KEY,
	REFERENCE,
	CHARGE_CATEGORY,
	CREATEPROGID,
	EXTN_IS_PERCENTAGE_DISCOUNT,
	ORIGINAL_CHARGEPERUNIT,
	ORIGINAL_CHARGEPERLINE,
	EXTN_TDEBIT_AMOUNT,
	EXTN_TAX_INCLUSIVE,
	EXTN_DISCOUNT_PERCENTAGE,
	CHARGEPERUNIT,
	CHARGEPERLINE,
	MODIFYUSERID,
	MODIFYTS,
	MODIFYPROGID,
	CREATEUSERID,
	LINE_CHARGES_KEY,
	EXTN_TAXABLE,
	INVOICED_EXTENDED_CHARGE,
	CHARGEAMOUNT,
	LOCKID,
	EXTN_CHARGE_DESCRIPTION,
	INVOICED_CHARGE_PER_LINE,
	CHARGE_NAME   
   
FROM (	


select 	
	C1_RECORD_TYPE RECORD_TYPE,
	C2_HEADER_KEY HEADER_KEY,
	C3_EXTN_TAX_CODE EXTN_TAX_CODE,
	C4_CREATETS CREATETS,
	C5_LINE_KEY LINE_KEY,
	C6_REFERENCE REFERENCE,
	C7_CHARGE_CATEGORY CHARGE_CATEGORY,
	C8_CREATEPROGID CREATEPROGID,
	C9_EXTN_IS_PERCENTAGE_DISCOUNT EXTN_IS_PERCENTAGE_DISCOUNT,
	C10_ORIGINAL_CHARGEPERUNIT ORIGINAL_CHARGEPERUNIT,
	C11_ORIGINAL_CHARGEPERLINE ORIGINAL_CHARGEPERLINE,
	C12_EXTN_TDEBIT_AMOUNT EXTN_TDEBIT_AMOUNT,
	C13_EXTN_TAX_INCLUSIVE EXTN_TAX_INCLUSIVE,
	C14_EXTN_DISCOUNT_PERCENTAGE EXTN_DISCOUNT_PERCENTAGE,
	C15_CHARGEPERUNIT CHARGEPERUNIT,
	C16_CHARGEPERLINE CHARGEPERLINE,
	C17_MODIFYUSERID MODIFYUSERID,
	C18_MODIFYTS MODIFYTS,
	C19_MODIFYPROGID MODIFYPROGID,
	C20_CREATEUSERID CREATEUSERID,
	C21_LINE_CHARGES_KEY LINE_CHARGES_KEY,
	C22_EXTN_TAXABLE EXTN_TAXABLE,
	C23_INVOICED_EXTENDED_CHARGE INVOICED_EXTENDED_CHARGE,
	C24_CHARGEAMOUNT CHARGEAMOUNT,
	C25_LOCKID LOCKID,
	C26_EXTN_CHARGE_DESCRIPTION EXTN_CHARGE_DESCRIPTION,
	C27_INVOICED_CHARGE_PER_LINE INVOICED_CHARGE_PER_LINE,
	C28_CHARGE_NAME CHARGE_NAME 
from	RAX_APP_USER.C$_0STG_LINE_CHARGE
where		(1=1)	






)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 1000008 */
/* Drop work table */

drop table RAX_APP_USER.C$_0STG_LINE_CHARGE 

&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 13 */




/*-----------------------------------------------*/
/* TASK No. 14 */
/* Drop flow table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_OMS_LINE_CHARGE_XR107001';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 15 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_OMS_LINE_CHARGE_XR107001
(
	LINE_CHARGE_OID	NUMBER(22) NULL,
	LINE_CHARGES_KEY	VARCHAR2(24) NULL,
	ODS_CREATE_DATE	DATE NULL,
	HEADER_KEY	VARCHAR2(24) NULL,
	LINE_KEY	VARCHAR2(24) NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 16 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_OMS_LINE_CHARGE_XR107001
(
	LINE_CHARGES_KEY,
	HEADER_KEY,
	LINE_KEY,
	IND_UPDATE
)
select 
LINE_CHARGES_KEY,
	HEADER_KEY,
	LINE_KEY,
	IND_UPDATE
 from (


select 	 
	DISTINCT
	TRIM(LC.LINE_CHARGES_KEY) LINE_CHARGES_KEY,
	TRIM(LC.HEADER_KEY) HEADER_KEY,
	TRIM(LC.LINE_KEY) LINE_KEY,

	'I' IND_UPDATE

from	RAX_APP_USER.STG_LINE_CHARGE   LC, ODS_STAGE.OMS_LINE_CHARGE_XR   OMS_LINE_CHARGE_XR
where	(1=1)
 And (TRIM(LC.LINE_CHARGES_KEY)=OMS_LINE_CHARGE_XR.LINE_CHARGES_KEY (+)
AND OMS_LINE_CHARGE_XR.LINE_CHARGES_KEY IS NULL)





) S
where NOT EXISTS 
	( select 1 from ODS_STAGE.OMS_LINE_CHARGE_XR T
	where	T.LINE_CHARGES_KEY	= S.LINE_CHARGES_KEY 
		 and ((T.HEADER_KEY = S.HEADER_KEY) or (T.HEADER_KEY IS NULL and S.HEADER_KEY IS NULL)) and
		((T.LINE_KEY = S.LINE_KEY) or (T.LINE_KEY IS NULL and S.LINE_KEY IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_OMS_LINE_CHARGE_XR107001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* Create Index on flow table */

BEGIN  
   EXECUTE IMMEDIATE 'create index	RAX_APP_USER.I$_OMS_LINE_CHARGE_XR_IDX107001 on RAX_APP_USER.I$_OMS_LINE_CHARGE_XR107001 (LINE_CHARGES_KEY) NOLOGGING';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 and SQLCODE != -01408 and SQLCODE != -972 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* Merge Rows */

merge into	ODS_STAGE.OMS_LINE_CHARGE_XR T
using	RAX_APP_USER.I$_OMS_LINE_CHARGE_XR107001 S
on	(
		T.LINE_CHARGES_KEY=S.LINE_CHARGES_KEY
	)
when matched
then update set
	T.HEADER_KEY	= S.HEADER_KEY,
	T.LINE_KEY	= S.LINE_KEY
	
when not matched
then insert
	(
	T.LINE_CHARGES_KEY,
	T.HEADER_KEY,
	T.LINE_KEY
	,   T.LINE_CHARGE_OID,
	T.ODS_CREATE_DATE
	)
values
	(
	S.LINE_CHARGES_KEY,
	S.HEADER_KEY,
	S.LINE_KEY
	,   ODS_STAGE.LINE_CHARGE_OID_SEQ.nextval,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 21 */
/* Drop flow table */

drop table RAX_APP_USER.I$_OMS_LINE_CHARGE_XR107001 

&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 22 */




/*-----------------------------------------------*/
/* TASK No. 23 */
/* Drop flow table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_LINE_CHARGE108001';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END; 

&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_LINE_CHARGE108001
(
	LINE_CHARGE_OID	NUMBER NULL,
	ORDER_LINE_OID	NUMBER NULL,
	CHARGE_AMOUNT	NUMBER NULL,
	CHARGE_PER_LINE	NUMBER NULL,
	CHARGE_PER_UNIT	NUMBER NULL,
	CHARGE_CATEGORY	VARCHAR2(20) NULL,
	CHARGE_NAME	VARCHAR2(40) NULL,
	CHARGE_DESCRIPTION	VARCHAR2(100) NULL,
	DISCOUNT_PERCENTAGE	NUMBER NULL,
	TAXABLE	VARCHAR2(1) NULL,
	TAX_CODE	VARCHAR2(20) NULL,
	TAX_INCLUSIVE	VARCHAR2(1) NULL,
	TDEBIT_AMOUNT	NUMBER NULL,
	INVOICED_CHARGE_PER_LINE	NUMBER NULL,
	INVOICED_EXTENDED_CHARGE	NUMBER NULL,
	ORIGINAL_CHARGE_PER_LINE	NUMBER NULL,
	ORIGINAL_CHARGE_PER_UNIT	NUMBER NULL,
	RECORD_TYPE	VARCHAR2(20) NULL,
	REFERENCE	VARCHAR2(50) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_LINE_CHARGE108001
(
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	SOURCE_SYSTEM_OID,
	IND_UPDATE
)
select 
LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	SOURCE_SYSTEM_OID,
	IND_UPDATE
 from (


select 	 
	
	OMS_LINE_CHARGE_XR.LINE_CHARGE_OID LINE_CHARGE_OID,
	ORDER_LINE.ORDER_LINE_OID ORDER_LINE_OID,
	LC.CHARGEAMOUNT CHARGE_AMOUNT,
	LC.CHARGEPERLINE CHARGE_PER_LINE,
	LC.CHARGEPERUNIT CHARGE_PER_UNIT,
	LC.CHARGE_CATEGORY CHARGE_CATEGORY,
	LC.CHARGE_NAME CHARGE_NAME,
	LC.EXTN_CHARGE_DESCRIPTION CHARGE_DESCRIPTION,
	LC.EXTN_DISCOUNT_PERCENTAGE DISCOUNT_PERCENTAGE,
	LC.EXTN_TAXABLE TAXABLE,
	LC.EXTN_TAX_CODE TAX_CODE,
	LC.EXTN_TAX_INCLUSIVE TAX_INCLUSIVE,
	LC.EXTN_TDEBIT_AMOUNT TDEBIT_AMOUNT,
	LC.INVOICED_CHARGE_PER_LINE INVOICED_CHARGE_PER_LINE,
	LC.INVOICED_EXTENDED_CHARGE INVOICED_EXTENDED_CHARGE,
	LC.ORIGINAL_CHARGEPERLINE ORIGINAL_CHARGE_PER_LINE,
	LC.ORIGINAL_CHARGEPERUNIT ORIGINAL_CHARGE_PER_UNIT,
	LC.RECORD_TYPE RECORD_TYPE,
	LC.REFERENCE REFERENCE,
	SOURCE_SYSTEM.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,

	'I' IND_UPDATE

from	RAX_APP_USER.STG_LINE_CHARGE   LC, ODS_STAGE.OMS_LINE_CHARGE_XR   OMS_LINE_CHARGE_XR, ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM, ODS_STAGE.OMS_ORDER_LINE_XR   OMS_ORDER_LINE_XR1, ODS_OWN.ORDER_LINE   ORDER_LINE
where	(1=1)
 And (TRIM(LC.LINE_CHARGES_KEY)=OMS_LINE_CHARGE_XR.LINE_CHARGES_KEY (+))
AND (OMS_ORDER_LINE_XR1.ORDER_LINE_KEY=LC.LINE_KEY)
AND (ORDER_LINE.ORDER_LINE_OID=OMS_ORDER_LINE_XR1.ORDER_LINE_OID)
And (SOURCE_SYSTEM.SOURCE_SYSTEM_SHORT_NAME='OMS')




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.LINE_CHARGE T
	where	T.LINE_CHARGE_OID	= S.LINE_CHARGE_OID 
		 and ((T.ORDER_LINE_OID = S.ORDER_LINE_OID) or (T.ORDER_LINE_OID IS NULL and S.ORDER_LINE_OID IS NULL)) and
		((T.CHARGE_AMOUNT = S.CHARGE_AMOUNT) or (T.CHARGE_AMOUNT IS NULL and S.CHARGE_AMOUNT IS NULL)) and
		((T.CHARGE_PER_LINE = S.CHARGE_PER_LINE) or (T.CHARGE_PER_LINE IS NULL and S.CHARGE_PER_LINE IS NULL)) and
		((T.CHARGE_PER_UNIT = S.CHARGE_PER_UNIT) or (T.CHARGE_PER_UNIT IS NULL and S.CHARGE_PER_UNIT IS NULL)) and
		((T.CHARGE_CATEGORY = S.CHARGE_CATEGORY) or (T.CHARGE_CATEGORY IS NULL and S.CHARGE_CATEGORY IS NULL)) and
		((T.CHARGE_NAME = S.CHARGE_NAME) or (T.CHARGE_NAME IS NULL and S.CHARGE_NAME IS NULL)) and
		((T.CHARGE_DESCRIPTION = S.CHARGE_DESCRIPTION) or (T.CHARGE_DESCRIPTION IS NULL and S.CHARGE_DESCRIPTION IS NULL)) and
		((T.DISCOUNT_PERCENTAGE = S.DISCOUNT_PERCENTAGE) or (T.DISCOUNT_PERCENTAGE IS NULL and S.DISCOUNT_PERCENTAGE IS NULL)) and
		((T.TAXABLE = S.TAXABLE) or (T.TAXABLE IS NULL and S.TAXABLE IS NULL)) and
		((T.TAX_CODE = S.TAX_CODE) or (T.TAX_CODE IS NULL and S.TAX_CODE IS NULL)) and
		((T.TAX_INCLUSIVE = S.TAX_INCLUSIVE) or (T.TAX_INCLUSIVE IS NULL and S.TAX_INCLUSIVE IS NULL)) and
		((T.TDEBIT_AMOUNT = S.TDEBIT_AMOUNT) or (T.TDEBIT_AMOUNT IS NULL and S.TDEBIT_AMOUNT IS NULL)) and
		((T.INVOICED_CHARGE_PER_LINE = S.INVOICED_CHARGE_PER_LINE) or (T.INVOICED_CHARGE_PER_LINE IS NULL and S.INVOICED_CHARGE_PER_LINE IS NULL)) and
		((T.INVOICED_EXTENDED_CHARGE = S.INVOICED_EXTENDED_CHARGE) or (T.INVOICED_EXTENDED_CHARGE IS NULL and S.INVOICED_EXTENDED_CHARGE IS NULL)) and
		((T.ORIGINAL_CHARGE_PER_LINE = S.ORIGINAL_CHARGE_PER_LINE) or (T.ORIGINAL_CHARGE_PER_LINE IS NULL and S.ORIGINAL_CHARGE_PER_LINE IS NULL)) and
		((T.ORIGINAL_CHARGE_PER_UNIT = S.ORIGINAL_CHARGE_PER_UNIT) or (T.ORIGINAL_CHARGE_PER_UNIT IS NULL and S.ORIGINAL_CHARGE_PER_UNIT IS NULL)) and
		((T.RECORD_TYPE = S.RECORD_TYPE) or (T.RECORD_TYPE IS NULL and S.RECORD_TYPE IS NULL)) and
		((T.REFERENCE = S.REFERENCE) or (T.REFERENCE IS NULL and S.REFERENCE IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* Recycle previous errors */

BEGIN  
   EXECUTE IMMEDIATE 'insert into RAX_APP_USER.I$_LINE_CHARGE108001
						(
							LINE_CHARGE_OID,
							ORDER_LINE_OID,
							CHARGE_AMOUNT,
							CHARGE_PER_LINE,
							CHARGE_PER_UNIT,
							CHARGE_CATEGORY,
							CHARGE_NAME,
							CHARGE_DESCRIPTION,
							DISCOUNT_PERCENTAGE,
							TAXABLE,
							TAX_CODE,
							TAX_INCLUSIVE,
							TDEBIT_AMOUNT,
							INVOICED_CHARGE_PER_LINE,
							INVOICED_EXTENDED_CHARGE,
							ORIGINAL_CHARGE_PER_LINE,
							ORIGINAL_CHARGE_PER_UNIT,
							RECORD_TYPE,
							REFERENCE,
							SOURCE_SYSTEM_OID,
							IND_UPDATE
						)
						select	DISTINCT LINE_CHARGE_OID,
							ORDER_LINE_OID,
							CHARGE_AMOUNT,
							CHARGE_PER_LINE,
							CHARGE_PER_UNIT,
							CHARGE_CATEGORY,
							CHARGE_NAME,
							CHARGE_DESCRIPTION,
							DISCOUNT_PERCENTAGE,
							TAXABLE,
							TAX_CODE,
							TAX_INCLUSIVE,
							TDEBIT_AMOUNT,
							INVOICED_CHARGE_PER_LINE,
							INVOICED_EXTENDED_CHARGE,
							ORIGINAL_CHARGE_PER_LINE,
							ORIGINAL_CHARGE_PER_UNIT,
							RECORD_TYPE,
							REFERENCE,
							SOURCE_SYSTEM_OID,
							''I'' IND_UPDATE
						from	RAX_APP_USER.E$_LINE_CHARGE108001 E
						where 	not exists (
								select	''?''
								from	RAX_APP_USER.I$_LINE_CHARGE108001 T
								where			T.LINE_CHARGE_OID=E.LINE_CHARGE_OID
								)
						and	E.ODI_ORIGIN	= ''(108001)ODS_Project.LOAD_LINE_CHARGE_INT''
						and	E.ODI_ERR_TYPE	= ''F''';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_LINE_CHARGE108001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_LINE_CHARGE_IDX108001
on		RAX_APP_USER.I$_LINE_CHARGE108001 (LINE_CHARGE_OID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* create check table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
						(
							CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
							SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
							RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
							FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
							ERR_TYPE		VARCHAR2(1 CHAR) NULL,
							ERR_MESS		VARCHAR2(250 CHAR) NULL ,
							CHECK_DATE	DATE NULL,
							ORIGIN		VARCHAR2(100 CHAR) NULL,
							CONS_NAME	VARCHAR2(35 CHAR) NULL,
							CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ERR_COUNT		NUMBER(10) NULL
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END; 
	

&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(108001)ODS_Project.LOAD_LINE_CHARGE_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* create error table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_LINE_CHARGE108001
						(
							ODI_ROW_ID 		UROWID,
							ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
							ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
							ODI_CHECK_DATE	DATE NULL, 
							LINE_CHARGE_OID	NUMBER NULL,
							ORDER_LINE_OID	NUMBER NULL,
							CHARGE_AMOUNT	NUMBER NULL,
							CHARGE_PER_LINE	NUMBER NULL,
							CHARGE_PER_UNIT	NUMBER NULL,
							CHARGE_CATEGORY	VARCHAR2(20) NULL,
							CHARGE_NAME	VARCHAR2(40) NULL,
							CHARGE_DESCRIPTION	VARCHAR2(100) NULL,
							DISCOUNT_PERCENTAGE	NUMBER NULL,
							TAXABLE	VARCHAR2(1) NULL,
							TAX_CODE	VARCHAR2(20) NULL,
							TAX_INCLUSIVE	VARCHAR2(1) NULL,
							TDEBIT_AMOUNT	NUMBER NULL,
							INVOICED_CHARGE_PER_LINE	NUMBER NULL,
							INVOICED_EXTENDED_CHARGE	NUMBER NULL,
							ORIGINAL_CHARGE_PER_LINE	NUMBER NULL,
							ORIGINAL_CHARGE_PER_UNIT	NUMBER NULL,
							RECORD_TYPE	VARCHAR2(20) NULL,
							REFERENCE	VARCHAR2(50) NULL,
							ODS_CREATE_DATE	DATE NULL,
							ODS_MODIFY_DATE	DATE NULL,
							SOURCE_SYSTEM_OID	NUMBER NULL,
							ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
							ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
							ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
							ODI_SESS_NO		VARCHAR2(19 CHAR)
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;



&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_LINE_CHARGE108001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(108001)ODS_Project.LOAD_LINE_CHARGE_INT')


&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.I$_LINE_CHARGE108001 on RAX_APP_USER.I$_LINE_CHARGE108001 (LINE_CHARGE_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 and SQLCODE != -01408 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 34 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_LINE_CHARGE' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.LINE_CHARGE' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '108001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_LINE_CHARGE108001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''The primary key LINE_CHARGE_PK is not unique.'',
	''(108001)ODS_Project.LOAD_LINE_CHARGE_INT'',
	sysdate,
	''LINE_CHARGE_PK'',
	''PK'',	
	LINE_CHARGE.LINE_CHARGE_OID,
	LINE_CHARGE.ORDER_LINE_OID,
	LINE_CHARGE.CHARGE_AMOUNT,
	LINE_CHARGE.CHARGE_PER_LINE,
	LINE_CHARGE.CHARGE_PER_UNIT,
	LINE_CHARGE.CHARGE_CATEGORY,
	LINE_CHARGE.CHARGE_NAME,
	LINE_CHARGE.CHARGE_DESCRIPTION,
	LINE_CHARGE.DISCOUNT_PERCENTAGE,
	LINE_CHARGE.TAXABLE,
	LINE_CHARGE.TAX_CODE,
	LINE_CHARGE.TAX_INCLUSIVE,
	LINE_CHARGE.TDEBIT_AMOUNT,
	LINE_CHARGE.INVOICED_CHARGE_PER_LINE,
	LINE_CHARGE.INVOICED_EXTENDED_CHARGE,
	LINE_CHARGE.ORIGINAL_CHARGE_PER_LINE,
	LINE_CHARGE.ORIGINAL_CHARGE_PER_UNIT,
	LINE_CHARGE.RECORD_TYPE,
	LINE_CHARGE.REFERENCE,
	LINE_CHARGE.ODS_CREATE_DATE,
	LINE_CHARGE.ODS_MODIFY_DATE,
	LINE_CHARGE.SOURCE_SYSTEM_OID
from	'
 || VariableCheckTable || 
' LINE_CHARGE 
where	exists  (
		select	SUB1.LINE_CHARGE_OID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.LINE_CHARGE_OID=LINE_CHARGE.LINE_CHARGE_OID
		group by 	SUB1.LINE_CHARGE_OID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 35 */
/* insert FK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_LINE_CHARGE' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.LINE_CHARGE' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '108001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_LINE_CHARGE108001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''Join error (LC_ORDER_LINE) between the table LINE_CHARGE and the table ORDER_LINE.'',
	sysdate,
	''(108001)ODS_Project.LOAD_LINE_CHARGE_INT'',
	''LC_ORDER_LINE'',
	''FK'',	
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID

from	'
 || VariableCheckTable || 
' LINE_CHARGE 
where 	(
		LINE_CHARGE.ORDER_LINE_OID 
	) not in 	(
		select 	ORDER_LINE_OID
		from 	ODS_OWN.ORDER_LINE
		)
and	(
		LINE_CHARGE.ORDER_LINE_OID is not null 
	)

';

END;

/*  Checked Datastore =RAX_APP_USER.I$_LINE_CHARGE  */
/*  Integration Datastore =RAX_APP_USER.I$_LINE_CHARGE   */
/*  Target Datastore =ODS_OWN.LINE_CHARGE */


&


/*-----------------------------------------------*/
/* TASK No. 36 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_LINE_CHARGE108001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'The column LINE_CHARGE_OID cannot be null.',
	sysdate,
	'(108001)ODS_Project.LOAD_LINE_CHARGE_INT',
	'LINE_CHARGE_OID',
	'NN',	
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
from	RAX_APP_USER.I$_LINE_CHARGE108001
where	LINE_CHARGE_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 37 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_LINE_CHARGE108001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'The column ORDER_LINE_OID cannot be null.',
	sysdate,
	'(108001)ODS_Project.LOAD_LINE_CHARGE_INT',
	'ORDER_LINE_OID',
	'NN',	
	LINE_CHARGE_OID,
	ORDER_LINE_OID,
	CHARGE_AMOUNT,
	CHARGE_PER_LINE,
	CHARGE_PER_UNIT,
	CHARGE_CATEGORY,
	CHARGE_NAME,
	CHARGE_DESCRIPTION,
	DISCOUNT_PERCENTAGE,
	TAXABLE,
	TAX_CODE,
	TAX_INCLUSIVE,
	TDEBIT_AMOUNT,
	INVOICED_CHARGE_PER_LINE,
	INVOICED_EXTENDED_CHARGE,
	ORIGINAL_CHARGE_PER_LINE,
	ORIGINAL_CHARGE_PER_UNIT,
	RECORD_TYPE,
	REFERENCE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
from	RAX_APP_USER.I$_LINE_CHARGE108001
where	ORDER_LINE_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 38 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_LINE_CHARGE108001 on RAX_APP_USER.E$_LINE_CHARGE108001 (ODI_ROW_ID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 and SQLCODE != -01408 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 39 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_LINE_CHARGE108001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_LINE_CHARGE108001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 40 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'LINE_CHARGE',
	'ODS_OWN.LINE_CHARGE108001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_LINE_CHARGE108001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(108001)ODS_Project.LOAD_LINE_CHARGE_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 41 */
/* Merge Rows */

merge into	ODS_OWN.LINE_CHARGE T
using	RAX_APP_USER.I$_LINE_CHARGE108001 S
on	(
		T.LINE_CHARGE_OID=S.LINE_CHARGE_OID
	)
when matched
then update set
	T.ORDER_LINE_OID	= S.ORDER_LINE_OID,
	T.CHARGE_AMOUNT	= S.CHARGE_AMOUNT,
	T.CHARGE_PER_LINE	= S.CHARGE_PER_LINE,
	T.CHARGE_PER_UNIT	= S.CHARGE_PER_UNIT,
	T.CHARGE_CATEGORY	= S.CHARGE_CATEGORY,
	T.CHARGE_NAME	= S.CHARGE_NAME,
	T.CHARGE_DESCRIPTION	= S.CHARGE_DESCRIPTION,
	T.DISCOUNT_PERCENTAGE	= S.DISCOUNT_PERCENTAGE,
	T.TAXABLE	= S.TAXABLE,
	T.TAX_CODE	= S.TAX_CODE,
	T.TAX_INCLUSIVE	= S.TAX_INCLUSIVE,
	T.TDEBIT_AMOUNT	= S.TDEBIT_AMOUNT,
	T.INVOICED_CHARGE_PER_LINE	= S.INVOICED_CHARGE_PER_LINE,
	T.INVOICED_EXTENDED_CHARGE	= S.INVOICED_EXTENDED_CHARGE,
	T.ORIGINAL_CHARGE_PER_LINE	= S.ORIGINAL_CHARGE_PER_LINE,
	T.ORIGINAL_CHARGE_PER_UNIT	= S.ORIGINAL_CHARGE_PER_UNIT,
	T.RECORD_TYPE	= S.RECORD_TYPE,
	T.REFERENCE	= S.REFERENCE,
	T.SOURCE_SYSTEM_OID	= S.SOURCE_SYSTEM_OID
	,                   T.ODS_MODIFY_DATE	= SYSDATE
when not matched
then insert
	(
	T.LINE_CHARGE_OID,
	T.ORDER_LINE_OID,
	T.CHARGE_AMOUNT,
	T.CHARGE_PER_LINE,
	T.CHARGE_PER_UNIT,
	T.CHARGE_CATEGORY,
	T.CHARGE_NAME,
	T.CHARGE_DESCRIPTION,
	T.DISCOUNT_PERCENTAGE,
	T.TAXABLE,
	T.TAX_CODE,
	T.TAX_INCLUSIVE,
	T.TDEBIT_AMOUNT,
	T.INVOICED_CHARGE_PER_LINE,
	T.INVOICED_EXTENDED_CHARGE,
	T.ORIGINAL_CHARGE_PER_LINE,
	T.ORIGINAL_CHARGE_PER_UNIT,
	T.RECORD_TYPE,
	T.REFERENCE,
	T.SOURCE_SYSTEM_OID
	,                    T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.LINE_CHARGE_OID,
	S.ORDER_LINE_OID,
	S.CHARGE_AMOUNT,
	S.CHARGE_PER_LINE,
	S.CHARGE_PER_UNIT,
	S.CHARGE_CATEGORY,
	S.CHARGE_NAME,
	S.CHARGE_DESCRIPTION,
	S.DISCOUNT_PERCENTAGE,
	S.TAXABLE,
	S.TAX_CODE,
	S.TAX_INCLUSIVE,
	S.TDEBIT_AMOUNT,
	S.INVOICED_CHARGE_PER_LINE,
	S.INVOICED_EXTENDED_CHARGE,
	S.ORIGINAL_CHARGE_PER_LINE,
	S.ORIGINAL_CHARGE_PER_UNIT,
	S.RECORD_TYPE,
	S.REFERENCE,
	S.SOURCE_SYSTEM_OID
	,                    SYSDATE,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 42 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 43 */
/* Drop flow table */

drop table RAX_APP_USER.I$_LINE_CHARGE108001 

&


/*-----------------------------------------------*/
/* TASK No. 44 */
/* Update CDC Load Status */

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name

&


/*-----------------------------------------------*/
