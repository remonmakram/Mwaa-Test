/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Drop work table */

-- drop table RAX_APP_USER.C$_0SAS_APPT_SLOT_STG purge

-- &


/*-----------------------------------------------*/
/* TASK No. 5 */
/* Create work table */

-- create table RAX_APP_USER.C$_0SAS_APPT_SLOT_STG
-- (
-- 	C1_APPOINTMENT_SLOT_ID	NUMBER NULL,
-- 	C2_PICTURE_DAY_ID	NUMBER NULL,
-- 	C3_APPOINTMENT_TIME	TIMESTAMP(6) NULL,
-- 	C4_SLOT_TYPE	VARCHAR2(1) NULL,
-- 	C5_AUDIT_CREATE_DATE	TIMESTAMP(6) NULL,
-- 	C6_AUDIT_CREATED_BY	VARCHAR2(255) NULL,
-- 	C7_AUDIT_MODIFY_DATE	TIMESTAMP(6) NULL,
-- 	C8_AUDIT_MODIFIED_BY	VARCHAR2(255) NULL
-- )
-- NOLOGGING

-- &


/*-----------------------------------------------*/
/* TASK No. 6 */
/* Load data */

/* SOURCE CODE */


-- select	
-- 	APPOINTMENT_SLOT.APPOINTMENT_SLOT_ID	   C1_APPOINTMENT_SLOT_ID,
-- 	APPOINTMENT_SLOT.PICTURE_DAY_ID	   C2_PICTURE_DAY_ID,
-- 	APPOINTMENT_SLOT.APPOINTMENT_TIME	   C3_APPOINTMENT_TIME,
-- 	APPOINTMENT_SLOT.SLOT_TYPE	   C4_SLOT_TYPE,
-- 	APPOINTMENT_SLOT.AUDIT_CREATE_DATE	   C5_AUDIT_CREATE_DATE,
-- 	APPOINTMENT_SLOT.AUDIT_CREATED_BY	   C6_AUDIT_CREATED_BY,
-- 	APPOINTMENT_SLOT.AUDIT_MODIFY_DATE	   C7_AUDIT_MODIFY_DATE,
-- 	APPOINTMENT_SLOT.AUDIT_MODIFIED_BY	   C8_AUDIT_MODIFIED_BY
-- from	SAS_SIT_OWN.APPOINTMENT_SLOT   APPOINTMENT_SLOT
-- where	(1=1)
-- And ((1=1) 
-- and APPOINTMENT_SLOT.AUDIT_MODIFY_DATE >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  -:v_cdc_overlap )



-- &

-- /* TARGET CODE */
-- insert /*+ append */ into RAX_APP_USER.C$_0SAS_APPT_SLOT_STG
-- (
-- 	C1_APPOINTMENT_SLOT_ID,
-- 	C2_PICTURE_DAY_ID,
-- 	C3_APPOINTMENT_TIME,
-- 	C4_SLOT_TYPE,
-- 	C5_AUDIT_CREATE_DATE,
-- 	C6_AUDIT_CREATED_BY,
-- 	C7_AUDIT_MODIFY_DATE,
-- 	C8_AUDIT_MODIFIED_BY
-- )
-- values
-- (
-- 	:C1_APPOINTMENT_SLOT_ID,
-- 	:C2_PICTURE_DAY_ID,
-- 	:C3_APPOINTMENT_TIME,
-- 	:C4_SLOT_TYPE,
-- 	:C5_AUDIT_CREATE_DATE,
-- 	:C6_AUDIT_CREATED_BY,
-- 	:C7_AUDIT_MODIFY_DATE,
-- 	:C8_AUDIT_MODIFIED_BY
-- )

-- &


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0SAS_APPT_SLOT_STG',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 9 */




/*-----------------------------------------------*/
/* TASK No. 10 */
/* Drop flow table */

-- drop table RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 

BEGIN
  EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001';
EXCEPTION
  WHEN OTHERS THEN
   IF SQLCODE != -942 THEN
     RAISE;
   END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 11 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001
(
	APPOINTMENT_SLOT_ID	NUMBER NULL,
	PICTURE_DAY_ID	NUMBER NULL,
	APPOINTMENT_TIME	TIMESTAMP(6) NULL,
	SLOT_TYPE	VARCHAR2(1) NULL,
	AUDIT_CREATE_DATE	TIMESTAMP(6) NULL,
	AUDIT_CREATED_BY	VARCHAR2(255) NULL,
	AUDIT_MODIFY_DATE	TIMESTAMP(6) NULL,
	AUDIT_MODIFIED_BY	VARCHAR2(255) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001
(
	APPOINTMENT_SLOT_ID,
	PICTURE_DAY_ID,
	APPOINTMENT_TIME,
	SLOT_TYPE,
	AUDIT_CREATE_DATE,
	AUDIT_CREATED_BY,
	AUDIT_MODIFY_DATE,
	AUDIT_MODIFIED_BY,
	IND_UPDATE
)
select 
APPOINTMENT_SLOT_ID,
	PICTURE_DAY_ID,
	APPOINTMENT_TIME,
	SLOT_TYPE,
	AUDIT_CREATE_DATE,
	AUDIT_CREATED_BY,
	AUDIT_MODIFY_DATE,
	AUDIT_MODIFIED_BY,
	IND_UPDATE
 from (


select 	 
	
	C1_APPOINTMENT_SLOT_ID APPOINTMENT_SLOT_ID,
	C2_PICTURE_DAY_ID PICTURE_DAY_ID,
	C3_APPOINTMENT_TIME APPOINTMENT_TIME,
	C4_SLOT_TYPE SLOT_TYPE,
	C5_AUDIT_CREATE_DATE AUDIT_CREATE_DATE,
	C6_AUDIT_CREATED_BY AUDIT_CREATED_BY,
	C7_AUDIT_MODIFY_DATE AUDIT_MODIFY_DATE,
	C8_AUDIT_MODIFIED_BY AUDIT_MODIFIED_BY,

	'I' IND_UPDATE

from	RAX_APP_USER.C$_0SAS_APPT_SLOT_STG
where	(1=1)






) S
where NOT EXISTS 
	( select 1 from ODS_STAGE.SAS_APPOINTMENT_SLOT_STG T
	where	T.APPOINTMENT_SLOT_ID	= S.APPOINTMENT_SLOT_ID 
		 and ((T.PICTURE_DAY_ID = S.PICTURE_DAY_ID) or (T.PICTURE_DAY_ID IS NULL and S.PICTURE_DAY_ID IS NULL)) and
		((T.APPOINTMENT_TIME = S.APPOINTMENT_TIME) or (T.APPOINTMENT_TIME IS NULL and S.APPOINTMENT_TIME IS NULL)) and
		((T.SLOT_TYPE = S.SLOT_TYPE) or (T.SLOT_TYPE IS NULL and S.SLOT_TYPE IS NULL)) and
		((T.AUDIT_CREATE_DATE = S.AUDIT_CREATE_DATE) or (T.AUDIT_CREATE_DATE IS NULL and S.AUDIT_CREATE_DATE IS NULL)) and
		((T.AUDIT_CREATED_BY = S.AUDIT_CREATED_BY) or (T.AUDIT_CREATED_BY IS NULL and S.AUDIT_CREATED_BY IS NULL)) and
		((T.AUDIT_MODIFY_DATE = S.AUDIT_MODIFY_DATE) or (T.AUDIT_MODIFY_DATE IS NULL and S.AUDIT_MODIFY_DATE IS NULL)) and
		((T.AUDIT_MODIFIED_BY = S.AUDIT_MODIFIED_BY) or (T.AUDIT_MODIFIED_BY IS NULL and S.AUDIT_MODIFIED_BY IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_SAS_APPT_SLOT_STG1384001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* Create Index on flow table */

-- create index	RAX_APP_USER.I$_SAS_APPT_SLOT_STG_IDX1384001
-- on		RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 (APPOINTMENT_SLOT_ID)
-- NOLOGGING

BEGIN
  EXECUTE IMMEDIATE 'create index RAX_APP_USER.I$_SAS_APPT_SLOT_STG_IDX1384001
on   RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 (APPOINTMENT_SLOT_ID)';
EXCEPTION
  WHEN OTHERS THEN
   -- Handle the case where the identifier is too long (ORA-00972)
   IF SQLCODE = -972 or  SQLCODE = -1408 or SQLCODE = -955  THEN
     DBMS_OUTPUT.PUT_LINE('Identifier is too long. Skipping creation of index.');
   ELSE
     RAISE;
   END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 15 */
/* create check table */


-- create table RAX_APP_USER.SNP_CHECK_TAB
-- (
-- 	CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
-- 	SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
-- 	RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
-- 	FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
-- 	ERR_TYPE		VARCHAR2(1 CHAR) NULL,
-- 	ERR_MESS		VARCHAR2(250 CHAR) NULL ,
-- 	CHECK_DATE	DATE NULL,
-- 	ORIGIN		VARCHAR2(100 CHAR) NULL,
-- 	CONS_NAME	VARCHAR2(35 CHAR) NULL,
-- 	CONS_TYPE		VARCHAR2(2 CHAR) NULL,
-- 	ERR_COUNT		NUMBER(10) NULL
-- )

BEGIN
  EXECUTE IMMEDIATE 'drop table RAX_APP_USER.SNP_CHECK_TAB';
EXCEPTION
  WHEN OTHERS THEN
   IF SQLCODE != -942 THEN
     RAISE;
   END IF;
END;

&


BEGIN
   EXECUTE IMMEDIATE '
		create table RAX_APP_USER.SNP_CHECK_TAB
		(
			CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
			SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
			RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
			FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
			ERR_TYPE		VARCHAR2(1 CHAR) NULL,
			ERR_MESS		VARCHAR2(250 CHAR) NULL ,
			CHECK_DATE	DATE NULL,
			ORIGIN		VARCHAR2(100 CHAR) NULL,
			CONS_NAME	VARCHAR2(35 CHAR) NULL,
			CONS_TYPE		VARCHAR2(2 CHAR) NULL,
			ERR_COUNT		NUMBER(10) NULL
		)
   ';
END;

&


/*-----------------------------------------------*/
/* TASK No. 16 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_STAGE'
and	ORIGIN 		= '(1384001)ODS_Project.LOAD_SAS_APPOINTMENT_SLOT_STG_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* create error table */

BEGIN
  EXECUTE IMMEDIATE 'drop table RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001';
EXCEPTION
  WHEN OTHERS THEN
   IF SQLCODE != -942 THEN
     RAISE;
   END IF;
END;

&

create table RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
(
	ODI_ROW_ID 		UROWID,
	ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
	ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
	ODI_CHECK_DATE	DATE NULL, 
	APPOINTMENT_SLOT_ID	NUMBER NULL,
	PICTURE_DAY_ID	NUMBER NULL,
	APPOINTMENT_TIME	TIMESTAMP(6) NULL,
	SLOT_TYPE	VARCHAR2(1) NULL,
	AUDIT_CREATE_DATE	TIMESTAMP(6) NULL,
	AUDIT_CREATED_BY	VARCHAR2(255) NULL,
	AUDIT_MODIFY_DATE	TIMESTAMP(6) NULL,
	AUDIT_MODIFIED_BY	VARCHAR2(255) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	EVENT_REF_ID	VARCHAR2(10) NULL,
	ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
	ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
	ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
	ODI_SESS_NO		VARCHAR2(19 CHAR)
)



&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(1384001)ODS_Project.LOAD_SAS_APPOINTMENT_SLOT_STG_INT')


&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
-- create index 	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001
-- on	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 (APPOINTMENT_SLOT_ID)

BEGIN
  EXECUTE IMMEDIATE 'create index RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001
on   RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 (APPOINTMENT_SLOT_ID)';
EXCEPTION
  WHEN OTHERS THEN
   -- Handle the case where the identifier is too long (ORA-00972)
   IF SQLCODE = -972 or  SQLCODE = -1408 or SQLCODE = -955  THEN
     DBMS_OUTPUT.PUT_LINE('Identifier is too long. Skipping creation of index.');
   ELSE
     RAISE;
   END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_SAS_APPT_SLOT_STG' INTO CheckTable FROM DUAL;
               SELECT 'ODS_STAGE.SAS_APPOINTMENT_SLOT_STG' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '1384001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	APPOINTMENT_SLOT_ID,
	PICTURE_DAY_ID,
	APPOINTMENT_TIME,
	SLOT_TYPE,
	AUDIT_CREATE_DATE,
	AUDIT_CREATED_BY,
	AUDIT_MODIFY_DATE,
	AUDIT_MODIFIED_BY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15064: The primary key APPOINTMENT_SLOT_PK is not unique.'',
	''(1384001)ODS_Project.LOAD_SAS_APPOINTMENT_SLOT_STG_INT'',
	sysdate,
	''APPOINTMENT_SLOT_PK'',
	''PK'',	
	SAS_APPT_SLOT_STG.APPOINTMENT_SLOT_ID,
	SAS_APPT_SLOT_STG.PICTURE_DAY_ID,
	SAS_APPT_SLOT_STG.APPOINTMENT_TIME,
	SAS_APPT_SLOT_STG.SLOT_TYPE,
	SAS_APPT_SLOT_STG.AUDIT_CREATE_DATE,
	SAS_APPT_SLOT_STG.AUDIT_CREATED_BY,
	SAS_APPT_SLOT_STG.AUDIT_MODIFY_DATE,
	SAS_APPT_SLOT_STG.AUDIT_MODIFIED_BY,
	SAS_APPT_SLOT_STG.ODS_CREATE_DATE,
	SAS_APPT_SLOT_STG.ODS_MODIFY_DATE
from	'
 || VariableCheckTable || 
' SAS_APPT_SLOT_STG 
where	exists  (
		select	SUB1.APPOINTMENT_SLOT_ID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.APPOINTMENT_SLOT_ID=SAS_APPT_SLOT_STG.APPOINTMENT_SLOT_ID
		group by 	SUB1.APPOINTMENT_SLOT_ID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
-- create index 	SAS_APPOINTMENT_SLOT_PK_flow
-- on	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 
-- 	(APPOINTMENT_SLOT_ID)

BEGIN
  EXECUTE IMMEDIATE 'create index SAS_APPOINTMENT_SLOT_PK_flow
on   RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001  (APPOINTMENT_SLOT_ID)';
EXCEPTION
  WHEN OTHERS THEN
   -- Handle the case where the identifier is too long (ORA-00972)
   IF SQLCODE = -972 or  SQLCODE = -1408 or SQLCODE = -955  THEN
     DBMS_OUTPUT.PUT_LINE('Identifier is too long. Skipping creation of index.');
   ELSE
     RAISE;
   END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* insert AK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_SAS_APPT_SLOT_STG' INTO CheckTable FROM DUAL;
               SELECT 'ODS_STAGE.SAS_APPOINTMENT_SLOT_STG' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '1384001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	APPOINTMENT_SLOT_ID,
	PICTURE_DAY_ID,
	APPOINTMENT_TIME,
	SLOT_TYPE,
	AUDIT_CREATE_DATE,
	AUDIT_CREATED_BY,
	AUDIT_MODIFY_DATE,
	AUDIT_MODIFIED_BY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15063: The alternate key SAS_APPOINTMENT_SLOT_PK is not unique.'',
	''(1384001)ODS_Project.LOAD_SAS_APPOINTMENT_SLOT_STG_INT'',
	sysdate,
	''SAS_APPOINTMENT_SLOT_PK'',
	''AK'',	
	SAS_APPT_SLOT_STG.APPOINTMENT_SLOT_ID,
	SAS_APPT_SLOT_STG.PICTURE_DAY_ID,
	SAS_APPT_SLOT_STG.APPOINTMENT_TIME,
	SAS_APPT_SLOT_STG.SLOT_TYPE,
	SAS_APPT_SLOT_STG.AUDIT_CREATE_DATE,
	SAS_APPT_SLOT_STG.AUDIT_CREATED_BY,
	SAS_APPT_SLOT_STG.AUDIT_MODIFY_DATE,
	SAS_APPT_SLOT_STG.AUDIT_MODIFIED_BY,
	SAS_APPT_SLOT_STG.ODS_CREATE_DATE,
	SAS_APPT_SLOT_STG.ODS_MODIFY_DATE
from              '	
 || VariableCheckTable || 
' SAS_APPT_SLOT_STG
where	exists  (
		select	SUB.APPOINTMENT_SLOT_ID
		from 	'
 || VariableCheckTable || 
' SUB
		where 	SUB.APPOINTMENT_SLOT_ID=SAS_APPT_SLOT_STG.APPOINTMENT_SLOT_ID
		group by 	SUB.APPOINTMENT_SLOT_ID
		having 	count(1) > 1
		)
 ';

END;

/*  Checked Datastore =RAX_APP_USER.I$_SAS_APPT_SLOT_STG  */
/*  Integration Datastore =RAX_APP_USER.I$_SAS_APPT_SLOT_STG   */
/*  Target Datastore =ODS_STAGE.SAS_APPOINTMENT_SLOT_STG */



&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	APPOINTMENT_SLOT_ID,
	PICTURE_DAY_ID,
	APPOINTMENT_TIME,
	SLOT_TYPE,
	AUDIT_CREATE_DATE,
	AUDIT_CREATED_BY,
	AUDIT_MODIFY_DATE,
	AUDIT_MODIFIED_BY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column APPOINTMENT_SLOT_ID cannot be null.',
	sysdate,
	'(1384001)ODS_Project.LOAD_SAS_APPOINTMENT_SLOT_STG_INT',
	'APPOINTMENT_SLOT_ID',
	'NN',	
	APPOINTMENT_SLOT_ID,
	PICTURE_DAY_ID,
	APPOINTMENT_TIME,
	SLOT_TYPE,
	AUDIT_CREATE_DATE,
	AUDIT_CREATED_BY,
	AUDIT_MODIFY_DATE,
	AUDIT_MODIFIED_BY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE
from	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001
where	APPOINTMENT_SLOT_ID is null



&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
-- create index 	RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
-- on	RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001 (ODI_ROW_ID)

BEGIN
  EXECUTE IMMEDIATE 'create index RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001
on   RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001 (ODI_ROW_ID)';
EXCEPTION
  WHEN OTHERS THEN
   -- Handle the case where the identifier is too long (ORA-00972)
   IF SQLCODE = -972 or  SQLCODE = -1408 or SQLCODE = -955  THEN
     DBMS_OUTPUT.PUT_LINE('Identifier is too long. Skipping creation of index.');
   ELSE
     RAISE;
   END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_STAGE',
	'SAS_APPT_SLOT_STG',
	'ODS_STAGE.SAS_APPOINTMENT_SLOT_STG1384001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_SAS_APPT_SLOT_STG1384001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(1384001)ODS_Project.LOAD_SAS_APPOINTMENT_SLOT_STG_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* Merge Rows */

merge into	ODS_STAGE.SAS_APPOINTMENT_SLOT_STG T
using	RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001 S
on	(
		T.APPOINTMENT_SLOT_ID=S.APPOINTMENT_SLOT_ID
	)
when matched
then update set
	T.PICTURE_DAY_ID	= S.PICTURE_DAY_ID,
	T.APPOINTMENT_TIME	= S.APPOINTMENT_TIME,
	T.SLOT_TYPE	= S.SLOT_TYPE,
	T.AUDIT_CREATE_DATE	= S.AUDIT_CREATE_DATE,
	T.AUDIT_CREATED_BY	= S.AUDIT_CREATED_BY,
	T.AUDIT_MODIFY_DATE	= S.AUDIT_MODIFY_DATE,
	T.AUDIT_MODIFIED_BY	= S.AUDIT_MODIFIED_BY
	,       T.ODS_MODIFY_DATE	= sysdate
when not matched
then insert
	(
	T.APPOINTMENT_SLOT_ID,
	T.PICTURE_DAY_ID,
	T.APPOINTMENT_TIME,
	T.SLOT_TYPE,
	T.AUDIT_CREATE_DATE,
	T.AUDIT_CREATED_BY,
	T.AUDIT_MODIFY_DATE,
	T.AUDIT_MODIFIED_BY
	,        T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.APPOINTMENT_SLOT_ID,
	S.PICTURE_DAY_ID,
	S.APPOINTMENT_TIME,
	S.SLOT_TYPE,
	S.AUDIT_CREATE_DATE,
	S.AUDIT_CREATED_BY,
	S.AUDIT_MODIFY_DATE,
	S.AUDIT_MODIFIED_BY
	,        sysdate,
	sysdate
	)

&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 29 */
/* Drop flow table */

-- drop table RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001

BEGIN
  EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_SAS_APPT_SLOT_STG1384001';
EXCEPTION
  WHEN OTHERS THEN
   IF SQLCODE != -942 THEN
     RAISE;
   END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 1000008 */
/* Drop work table */

-- drop table RAX_APP_USER.C$_0SAS_APPT_SLOT_STG purge

BEGIN
  EXECUTE IMMEDIATE 'drop table RAX_APP_USER.C$_0SAS_APPT_SLOT_STG purge';
EXCEPTION
  WHEN OTHERS THEN
   IF SQLCODE != -942 THEN
     RAISE;
   END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* MERGE INTO ODS_STAGE.SAS_APPOINTMENT_SLOT_XR */

-- SAS_APPOINTMENT_SLOT_XR
MERGE INTO ODS_STAGE.SAS_APPOINTMENT_SLOT_XR d
USING (
select * from
    (  Select
        XR.APPOINTMENT_SLOT_OID APPOINTMENT_SLOT_OID,
        STG.APPOINTMENT_SLOT_ID as SK_APPOINTMENT_SLOT_ID,
        STG.PICTURE_DAY_ID as SK_PICTURE_DAY_ID,
        sysdate as ODS_CREATE_DATE,
        sysdate as ODS_MODIFY_DATE
    -- select *
    FROM 
        ODS_STAGE.SAS_APPOINTMENT_SLOT_STG stg
        ,ODS_STAGE.SAS_APPOINTMENT_SLOT_XR xr
    WHERE (1=1)
        and stg.ODS_MODIFY_DATE >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  -:v_cdc_overlap
        and STG.APPOINTMENT_SLOT_ID=XR.SK_APPOINTMENT_SLOT_ID(+)
     ) s
where NOT EXISTS 
	( select 1 from ODS_STAGE.SAS_APPOINTMENT_SLOT_XR T
	where	T.SK_APPOINTMENT_SLOT_ID	= S.SK_APPOINTMENT_SLOT_ID 
		 and
		((T.APPOINTMENT_SLOT_OID = S.APPOINTMENT_SLOT_OID) or (T.APPOINTMENT_SLOT_OID IS NULL and S.APPOINTMENT_SLOT_OID IS NULL)) and
		((T.SK_APPOINTMENT_SLOT_ID = S.SK_APPOINTMENT_SLOT_ID) or (T.SK_APPOINTMENT_SLOT_ID IS NULL and S.SK_APPOINTMENT_SLOT_ID IS NULL)) and
		((T.SK_PICTURE_DAY_ID = S.SK_PICTURE_DAY_ID) or (T.SK_PICTURE_DAY_ID IS NULL and S.SK_PICTURE_DAY_ID IS NULL)) 
    )
) s 
ON
  (s.SK_APPOINTMENT_SLOT_ID=d.SK_APPOINTMENT_SLOT_ID)
WHEN MATCHED
THEN
UPDATE SET
  d.APPOINTMENT_SLOT_OID = s.APPOINTMENT_SLOT_OID,
--  d.SK_APPOINTMENT_SLOT_ID = s.SK_APPOINTMENT_SLOT_ID,
  d.SK_PICTURE_DAY_ID = s.SK_PICTURE_DAY_ID,
  d.ODS_MODIFY_DATE = s.ODS_MODIFY_DATE
WHEN NOT MATCHED
THEN
INSERT (
  APPOINTMENT_SLOT_OID, SK_APPOINTMENT_SLOT_ID, 
  SK_PICTURE_DAY_ID, ODS_CREATE_DATE, ODS_MODIFY_DATE)
VALUES (
  ODS_STAGE.APPOINTMENT_SLOT_OID_SEQ.nextval, s.SK_APPOINTMENT_SLOT_ID,
  s.SK_PICTURE_DAY_ID, s.ODS_CREATE_DATE, s.ODS_MODIFY_DATE
  )


&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* MERGE INTO ODS_OWN.APPOINTMENT_SLOT */

MERGE INTO ODS_OWN.APPOINTMENT_SLOT d
USING (
select * from (
      Select
        XR.APPOINTMENT_SLOT_OID as APPOINTMENT_SLOT_OID,
        sf_pd.picture_day_oid,
        STG.APPOINTMENT_TIME as APPOINTMENT_TIME,
        STG.SLOT_TYPE as SLOT_TYPE,
        STG.AUDIT_CREATE_DATE as AUDIT_CREATE_DATE,
        STG.AUDIT_CREATED_BY as AUDIT_CREATED_BY,
        STG.AUDIT_MODIFY_DATE as AUDIT_MODIFY_DATE,
        STG.AUDIT_MODIFIED_BY as AUDIT_MODIFIED_BY,
        SS.SOURCE_SYSTEM_OID as SOURCE_SYSTEM_OID,
        sysdate as ODS_CREATE_DATE,
        sysdate as ODS_MODIFY_DATE
-- select *
    from
        ODS_STAGE.SAS_APPOINTMENT_SLOT_STG stg
        ,ODS_STAGE.SAS_APPOINTMENT_SLOT_XR xr
, ods_stage.sf_picture_day_xr sf_pdxr
, ods_stage.sf_picture_date_stg sf_pds
, ods_own.picture_day sf_pd
        ,ODS_OWN.SOURCE_SYSTEM SS
    where (1=1)
        and stg.APPOINTMENT_TIME >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - 3
        and SS.SOURCE_SYSTEM_SHORT_NAME='SAS'
        and STG.APPOINTMENT_SLOT_ID=XR.SK_APPOINTMENT_SLOT_ID(+)
and stg.picture_day_id = ods_own.safe_to_number(sf_pds.externalid__c(+))
and sf_pds.id = sf_pdxr.picture_day_id(+)
and sf_pdxr.picture_day_oid = sf_pd.picture_day_oid(+)
   and  XR.APPOINTMENT_SLOT_OID  not in ('12052803', '12052829', '12052811', '12052814', '12052839', '12052828', '12052797', '12052826', '12052804', '12052831', '12052805', '12052818', '12052819', '12052835', '12052821', '12052832', '12052801', '12052822', '12052834', '12052810', '12052802', '12052793', '12052794', '12052809', '12052806', '12052812', '12052817', '12052825', '12052796', '12052807', '12052823', '12052827', '12052792', '12052808', '12052830', '12052836', '12052816', '12052824', '12052837', '12052815', '12052795', '12052800', '12052820', '12052798', '12052799', '12052813', '12052833', '12052838')
     ) s
where NOT EXISTS 
	( select 1 from ODS_OWN.APPOINTMENT_SLOT T
	where	T.APPOINTMENT_SLOT_OID	= S.APPOINTMENT_SLOT_OID 
		 and ((T.APPOINTMENT_SLOT_OID = S.APPOINTMENT_SLOT_OID) or (T.APPOINTMENT_SLOT_OID IS NULL and S.APPOINTMENT_SLOT_OID IS NULL)) and
        ((T.PICTURE_DAY_OID = S.PICTURE_DAY_OID) or (T.PICTURE_DAY_OID IS NULL and S.PICTURE_DAY_OID IS NULL)) and
        ((T.APPOINTMENT_TIME = S.APPOINTMENT_TIME) or (T.APPOINTMENT_TIME IS NULL and S.APPOINTMENT_TIME IS NULL)) and
        ((T.SLOT_TYPE = S.SLOT_TYPE) or (T.SLOT_TYPE IS NULL and S.SLOT_TYPE IS NULL)) and
        ((T.AUDIT_CREATE_DATE = S.AUDIT_CREATE_DATE) or (T.AUDIT_CREATE_DATE IS NULL and S.AUDIT_CREATE_DATE IS NULL)) and
        ((T.AUDIT_CREATED_BY = S.AUDIT_CREATED_BY) or (T.AUDIT_CREATED_BY IS NULL and S.AUDIT_CREATED_BY IS NULL)) and
        ((T.AUDIT_MODIFY_DATE = S.AUDIT_MODIFY_DATE) or (T.AUDIT_MODIFY_DATE IS NULL and S.AUDIT_MODIFY_DATE IS NULL)) and
        ((T.AUDIT_MODIFIED_BY = S.AUDIT_MODIFIED_BY) or (T.AUDIT_MODIFIED_BY IS NULL and S.AUDIT_MODIFIED_BY IS NULL)) and
        ((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL))
        )
) s 
ON
  (d.APPOINTMENT_SLOT_OID = s.APPOINTMENT_SLOT_OID)
WHEN MATCHED
THEN
UPDATE SET
  d.PICTURE_DAY_OID = s.PICTURE_DAY_OID,
  d.APPOINTMENT_TIME = s.APPOINTMENT_TIME,
  d.SLOT_TYPE = s.SLOT_TYPE,
  d.AUDIT_CREATE_DATE = s.AUDIT_CREATE_DATE,
  d.AUDIT_CREATED_BY = s.AUDIT_CREATED_BY,
  d.AUDIT_MODIFY_DATE = s.AUDIT_MODIFY_DATE,
  d.AUDIT_MODIFIED_BY = s.AUDIT_MODIFIED_BY,
  d.SOURCE_SYSTEM_OID = s.SOURCE_SYSTEM_OID,
  d.ODS_MODIFY_DATE = s.ODS_MODIFY_DATE
WHEN NOT MATCHED
THEN
INSERT (
  APPOINTMENT_SLOT_OID, PICTURE_DAY_OID, APPOINTMENT_TIME,
  SLOT_TYPE, AUDIT_CREATE_DATE,
  AUDIT_CREATED_BY, AUDIT_MODIFY_DATE, AUDIT_MODIFIED_BY,
  SOURCE_SYSTEM_OID, ODS_CREATE_DATE,
  ODS_MODIFY_DATE)
VALUES (
  s.APPOINTMENT_SLOT_OID, s.PICTURE_DAY_OID, s.APPOINTMENT_TIME,
  s.SLOT_TYPE, s.AUDIT_CREATE_DATE,
  s.AUDIT_CREATED_BY, s.AUDIT_MODIFY_DATE, s.AUDIT_MODIFIED_BY,
  s.SOURCE_SYSTEM_OID, s.ODS_CREATE_DATE,
  s.ODS_MODIFY_DATE)

&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* Update CDC Load Status */

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
+ nvl((TIMEZONE_OFFSET/24), 0) 
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env
*/

&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* Insert CDC Audit Record */

INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME,
TIMEZONE_OFFSET              
)
select 
:v_cdc_load_table_name
,:v_sess_no
,'LOAD_SAS_APPOINTMENT_SLOT_PKG'
,'008'
,TO_DATE(SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
,TO_DATE (SUBSTR(:v_cdc_load_date, 1, 19),'YYYY-MM-DD HH24:MI:SS')
,:v_cdc_overlap
,SYSDATE
,:v_env
,TIMEZONE_OFFSET
from 
ODS_OWN.ODS_CDC_LOAD_STATUS
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME              
)
values (
:v_cdc_load_table_name,
:v_sess_no,
'LOAD_SAS_APPOINTMENT_SLOT_PKG',
'008',
TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS'),
TO_DATE (SUBSTR (:v_cdc_load_date, 1, 19),
                           'YYYY-MM-DD HH24:MI:SS'
                          )
,:v_cdc_overlap,
SYSDATE,
 :v_env)
*/


&


/*-----------------------------------------------*/
