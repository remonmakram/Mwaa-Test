/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Drop work table */

BEGIN
    EXECUTE IMMEDIATE 'drop table RAX_APP_USER.C$_0STG_ACCOUNT_COMMISSION';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -942 THEN
            DBMS_OUTPUT.PUT_LINE('Table does not exist.');
        ELSE
            RAISE;
        END IF;
END; 

&


/*-----------------------------------------------*/
/* TASK No. 5 */
/* Create work table */

create table RAX_APP_USER.C$_0STG_ACCOUNT_COMMISSION
(
	C1_ACTUAL_PAYMENT_AMOUNT	NUMBER NULL,
	C2_ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
	C3_LAW_ACCOUNT_COMMISSION_ID	NUMBER NULL,
	C4_CHECK_NUMBER	VARCHAR2(10) NULL,
	C5_PAYMENT_DATE	DATE NULL,
	C6_EVENT_REF_ID	VARCHAR2(30) NULL,
	C7_VOID_IND	VARCHAR2(1) NULL,
	C8_PAYMENT_AMOUNT	NUMBER NULL,
	C9_REC_STATUS	NUMBER NULL,
	C10_BANK_INST_CODE	VARCHAR2(3) NULL,
	C11_TRANS_IDENT	NUMBER NULL,
	C12_CURRENCY_CODE	VARCHAR2(5) NULL,
	C13_RECONCILE_DATE	DATE NULL,
	C14_LOAD_ID	NUMBER NULL,
	C15_EFFECTIVE_DATE	DATE NULL,
	C16_ACTIVITY_CODE	VARCHAR2(15) NULL,
	C17_MAINT_DATE	DATE NULL,
	C18_PAY_TO	VARCHAR2(30) NULL,
	C19_CASH_CODE	VARCHAR2(4) NULL
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 6 */
/* Load data */

/* SOURCE CODE */
select	
	LAW_ACCOUNT_COMMISSION.ACTUAL_PAYMENT_AMOUNT	   C1_ACTUAL_PAYMENT_AMOUNT,
	LAW_ACCOUNT_COMMISSION.ACCT_COMM_PMT_REQ_ID	   C2_ACCT_COMM_PMT_REQ_ID,
	LAW_ACCOUNT_COMMISSION.LAW_ACCOUNT_COMMISSION_ID	   C3_LAW_ACCOUNT_COMMISSION_ID,
	LAW_ACCOUNT_COMMISSION.CHECK_NUMBER	   C4_CHECK_NUMBER,
	LAW_ACCOUNT_COMMISSION.PAYMENT_DATE	   C5_PAYMENT_DATE,
	LAW_ACCOUNT_COMMISSION.EVENT_REF_ID	   C6_EVENT_REF_ID,
	LAW_ACCOUNT_COMMISSION.VOID_IND	   C7_VOID_IND,
	LAW_ACCOUNT_COMMISSION.PAYMENT_AMOUNT	   C8_PAYMENT_AMOUNT,
	LAW_ACCOUNT_COMMISSION.REC_STATUS	   C9_REC_STATUS,
	LAW_ACCOUNT_COMMISSION.BANK_INST_CODE	   C10_BANK_INST_CODE,
	LAW_ACCOUNT_COMMISSION.TRANS_IDENT	   C11_TRANS_IDENT,
	LAW_ACCOUNT_COMMISSION.CURRENCY_CODE	   C12_CURRENCY_CODE,
	LAW_ACCOUNT_COMMISSION.RECONCILE_DATE	   C13_RECONCILE_DATE,
	LAW_ACCOUNT_COMMISSION.LOAD_ID	   C14_LOAD_ID,
	LAW_ACCOUNT_COMMISSION.EFFECTIVE_DATE	   C15_EFFECTIVE_DATE,
	LAW_ACCOUNT_COMMISSION.ACTIVITY_CODE	   C16_ACTIVITY_CODE,
	LAW_ACCOUNT_COMMISSION.MAINT_DATE	   C17_MAINT_DATE,
	LAW_ACCOUNT_COMMISSION.PAY_TO	   C18_PAY_TO,
	LAW_ACCOUNT_COMMISSION.CASH_CODE	   C19_CASH_CODE
from	ODS.LAW_ACCOUNT_COMMISSION   LAW_ACCOUNT_COMMISSION
where	(1=1)
And (LAW_ACCOUNT_COMMISSION.EFFECTIVE_DATE >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  -:v_cdc_oms_overlap)





&

/* TARGET CODE */
insert into RAX_APP_USER.C$_0STG_ACCOUNT_COMMISSION
(
	C1_ACTUAL_PAYMENT_AMOUNT,
	C2_ACCT_COMM_PMT_REQ_ID,
	C3_LAW_ACCOUNT_COMMISSION_ID,
	C4_CHECK_NUMBER,
	C5_PAYMENT_DATE,
	C6_EVENT_REF_ID,
	C7_VOID_IND,
	C8_PAYMENT_AMOUNT,
	C9_REC_STATUS,
	C10_BANK_INST_CODE,
	C11_TRANS_IDENT,
	C12_CURRENCY_CODE,
	C13_RECONCILE_DATE,
	C14_LOAD_ID,
	C15_EFFECTIVE_DATE,
	C16_ACTIVITY_CODE,
	C17_MAINT_DATE,
	C18_PAY_TO,
	C19_CASH_CODE
)
values
(
	:C1_ACTUAL_PAYMENT_AMOUNT,
	:C2_ACCT_COMM_PMT_REQ_ID,
	:C3_LAW_ACCOUNT_COMMISSION_ID,
	:C4_CHECK_NUMBER,
	:C5_PAYMENT_DATE,
	:C6_EVENT_REF_ID,
	:C7_VOID_IND,
	:C8_PAYMENT_AMOUNT,
	:C9_REC_STATUS,
	:C10_BANK_INST_CODE,
	:C11_TRANS_IDENT,
	:C12_CURRENCY_CODE,
	:C13_RECONCILE_DATE,
	:C14_LOAD_ID,
	:C15_EFFECTIVE_DATE,
	:C16_ACTIVITY_CODE,
	:C17_MAINT_DATE,
	:C18_PAY_TO,
	:C19_CASH_CODE
)

&


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0STG_ACCOUNT_COMMISSION',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Create target table  */

BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.STG_ACCOUNT_COMMISSION
(
	ACTUAL_PAYMENT_AMOUNT	NUMBER NULL,
	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
	LAW_ACCOUNT_COMMISSION_ID	NUMBER NULL,
	CHECK_NUMBER	VARCHAR2(10) NULL,
	PAYMENT_DATE	DATE NULL,
	EVENT_REF_ID	VARCHAR2(30) NULL,
	VOID_IND	VARCHAR2(1) NULL,
	PAYMENT_AMOUNT	NUMBER NULL,
	REC_STATUS	NUMBER NULL,
	BANK_INST_CODE	VARCHAR2(3) NULL,
	TRANS_IDENT	NUMBER NULL,
	CURRENCY_CODE	VARCHAR2(5) NULL,
	RECONCILE_DATE	DATE NULL,
	LOAD_ID	NUMBER NULL,
	EFFECTIVE_DATE	DATE NULL,
	ACTIVITY_CODE	VARCHAR2(15) NULL,
	MAINT_DATE	DATE NULL,
	PAY_TO	VARCHAR2(30) NULL,
	CASH_CODE	VARCHAR2(4) NULL
)
';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;

&


/*-----------------------------------------------*/
/* TASK No. 10 */
/* Truncate target table */

truncate table RAX_APP_USER.STG_ACCOUNT_COMMISSION


&


/*-----------------------------------------------*/
/* TASK No. 11 */
/* Insert new rows */

 
insert into	RAX_APP_USER.STG_ACCOUNT_COMMISSION 
( 
	ACTUAL_PAYMENT_AMOUNT,
	ACCT_COMM_PMT_REQ_ID,
	LAW_ACCOUNT_COMMISSION_ID,
	CHECK_NUMBER,
	PAYMENT_DATE,
	EVENT_REF_ID,
	VOID_IND,
	PAYMENT_AMOUNT,
	REC_STATUS,
	BANK_INST_CODE,
	TRANS_IDENT,
	CURRENCY_CODE,
	RECONCILE_DATE,
	LOAD_ID,
	EFFECTIVE_DATE,
	ACTIVITY_CODE,
	MAINT_DATE,
	PAY_TO,
	CASH_CODE 
	 
) 

select
    ACTUAL_PAYMENT_AMOUNT,
	ACCT_COMM_PMT_REQ_ID,
	LAW_ACCOUNT_COMMISSION_ID,
	CHECK_NUMBER,
	PAYMENT_DATE,
	EVENT_REF_ID,
	VOID_IND,
	PAYMENT_AMOUNT,
	REC_STATUS,
	BANK_INST_CODE,
	TRANS_IDENT,
	CURRENCY_CODE,
	RECONCILE_DATE,
	LOAD_ID,
	EFFECTIVE_DATE,
	ACTIVITY_CODE,
	MAINT_DATE,
	PAY_TO,
	CASH_CODE   
   
FROM (	


select 	
	C1_ACTUAL_PAYMENT_AMOUNT ACTUAL_PAYMENT_AMOUNT,
	C2_ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID,
	C3_LAW_ACCOUNT_COMMISSION_ID LAW_ACCOUNT_COMMISSION_ID,
	C4_CHECK_NUMBER CHECK_NUMBER,
	C5_PAYMENT_DATE PAYMENT_DATE,
	C6_EVENT_REF_ID EVENT_REF_ID,
	C7_VOID_IND VOID_IND,
	C8_PAYMENT_AMOUNT PAYMENT_AMOUNT,
	C9_REC_STATUS REC_STATUS,
	C10_BANK_INST_CODE BANK_INST_CODE,
	C11_TRANS_IDENT TRANS_IDENT,
	C12_CURRENCY_CODE CURRENCY_CODE,
	C13_RECONCILE_DATE RECONCILE_DATE,
	C14_LOAD_ID LOAD_ID,
	C15_EFFECTIVE_DATE EFFECTIVE_DATE,
	C16_ACTIVITY_CODE ACTIVITY_CODE,
	C17_MAINT_DATE MAINT_DATE,
	C18_PAY_TO PAY_TO,
	C19_CASH_CODE CASH_CODE 
from	RAX_APP_USER.C$_0STG_ACCOUNT_COMMISSION
where		(1=1)	






)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 1000008 */
/* Drop work table */

drop table RAX_APP_USER.C$_0STG_ACCOUNT_COMMISSION 

&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Insert new rows */

 
insert into	ODS_STAGE.LAW_ACCOUNT_COMMISSION_XR 
( 
	ACCOUNT_COMMISSION_KEY,
	CASH_CODE,
	BANK_INST_CODE,
	TRANS_IDENT,
	VOID_IND,
	EVENT_REF_ID,
	REC_STATUS,
	ACCT_COMM_PMT_REQ_ID 
	,ACCOUNT_COMMISSION_OID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE 
) 

select
    ACCOUNT_COMMISSION_KEY,
	CASH_CODE,
	BANK_INST_CODE,
	TRANS_IDENT,
	VOID_IND,
	EVENT_REF_ID,
	REC_STATUS,
	ACCT_COMM_PMT_REQ_ID   
  ,ODS_STAGE.ACCOUNT_COMMISSION_OID_SEQ.nextval,
	SYSDATE,
	sysdate 
FROM (	


select 	
	STG_ACCT_COMM.LAW_ACCOUNT_COMMISSION_ID ACCOUNT_COMMISSION_KEY,
	STG_ACCT_COMM.CASH_CODE CASH_CODE,
	STG_ACCT_COMM.BANK_INST_CODE BANK_INST_CODE,
	STG_ACCT_COMM.TRANS_IDENT TRANS_IDENT,
	STG_ACCT_COMM.VOID_IND VOID_IND,
	STG_ACCT_COMM.EVENT_REF_ID EVENT_REF_ID,
	STG_ACCT_COMM.REC_STATUS REC_STATUS,
	STG_ACCT_COMM.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID 
from	ODS_STAGE.LAW_ACCOUNT_COMMISSION_XR   LAW_ACCT_COMM_XR, RAX_APP_USER.STG_ACCOUNT_COMMISSION   STG_ACCT_COMM, ODS_OWN.ACCT_COMM_PMT_REQ   ACCT_COMM_PMT_REQ
where		(1=1)	
 And (STG_ACCT_COMM.LAW_ACCOUNT_COMMISSION_ID=LAW_ACCT_COMM_XR.ACCOUNT_COMMISSION_KEY(+)
AND LAW_ACCT_COMM_XR.ACCOUNT_COMMISSION_KEY IS NULL)
AND (STG_ACCT_COMM.ACCT_COMM_PMT_REQ_ID=ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_ID)
And (ACCT_COMM_PMT_REQ.PAYMENT_REQUEST_TYPE <> 'RefundCheck')




)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 15 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 15 */




/*-----------------------------------------------*/
/* TASK No. 16 */
/* Drop flow table */

BEGIN
    EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_ACCOUNT_COMMISSION423001';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -942 THEN
            DBMS_OUTPUT.PUT_LINE('Table does not exist.');
        ELSE
            RAISE;
        END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_ACCOUNT_COMMISSION423001
(
	ACCOUNT_COMMISSION_OID	NUMBER NULL,
	EVENT_OID	NUMBER NULL,
	PAYMENT_DATE	DATE NULL,
	PAYMENT_AMOUNT	NUMBER NULL,
	CURRENCY	VARCHAR2(20) NULL,
	EVENT_REF_ID	VARCHAR2(255) NULL,
	CHECK_NUMBER	VARCHAR2(255) NULL,
	PAY_TO	VARCHAR2(255) NULL,
	ACTIVITY_CODE	VARCHAR2(255) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	RECONCILE_DATE	DATE NULL,
	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
	APO_OID	NUMBER NULL,
	APO_ID	VARCHAR2(255) NULL,
	STATUS	VARCHAR2(50) NULL,
	PAYMENT_TYPE	VARCHAR2(255) NULL,
	ACTUAL_PAYMENT_AMOUNT	NUMBER NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001
(
	ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	ACTUAL_PAYMENT_AMOUNT,
	IND_UPDATE
)
select 
ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	ACTUAL_PAYMENT_AMOUNT,
	IND_UPDATE
 from (


select 	 
	
	LAW_ACCOUNT_COMMISSION_XR.ACCOUNT_COMMISSION_OID ACCOUNT_COMMISSION_OID,
	EVENT.EVENT_OID EVENT_OID,
	STG_ACCT_COMM.PAYMENT_DATE PAYMENT_DATE,
	STG_ACCT_COMM.PAYMENT_AMOUNT PAYMENT_AMOUNT,
	STG_ACCT_COMM.CURRENCY_CODE CURRENCY,
	STG_ACCT_COMM.EVENT_REF_ID EVENT_REF_ID,
	STG_ACCT_COMM.CHECK_NUMBER CHECK_NUMBER,
	STG_ACCT_COMM.PAY_TO PAY_TO,
	STG_ACCT_COMM.ACTIVITY_CODE ACTIVITY_CODE,
	SOURCE_SYSTEM.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,
	case when STG_ACCT_COMM.RECONCILE_DATE = to_date('17000101','yyyymmdd') then null else STG_ACCT_COMM.RECONCILE_DATE end RECONCILE_DATE,
	STG_ACCT_COMM.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID,
	APO.APO_OID APO_OID,
	APO.APO_ID APO_ID,
	case when STG_ACCT_COMM.REC_STATUS=0 then 'Unreleased' when STG_ACCT_COMM.REC_STATUS=1 then 'Open' when STG_ACCT_COMM.REC_STATUS=2 then 'Reconciled' when STG_ACCT_COMM.REC_STATUS=3 then 'Voided' when STG_ACCT_COMM.REC_STATUS=4 then 'StopPayment' when STG_ACCT_COMM.REC_STATUS=5 then 'StaleDated' when STG_ACCT_COMM.REC_STATUS=6 then 'Escheated' else 'Unknown' end STATUS,
	STG_ACCT_COMM.ACTUAL_PAYMENT_AMOUNT ACTUAL_PAYMENT_AMOUNT,

	'I' IND_UPDATE

from	RAX_APP_USER.STG_ACCOUNT_COMMISSION   STG_ACCT_COMM, ODS_OWN.EVENT   EVENT, ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM, ODS_STAGE.LAW_ACCOUNT_COMMISSION_XR   LAW_ACCOUNT_COMMISSION_XR, ODS_OWN.ACCT_COMM_PMT_REQ   ACCT_COMM_PMT_REQ, ODS_OWN.APO   APO
where	(1=1)
 And (STG_ACCT_COMM.EVENT_REF_ID=EVENT.EVENT_REF_ID (+))
AND (STG_ACCT_COMM.LAW_ACCOUNT_COMMISSION_ID=LAW_ACCOUNT_COMMISSION_XR.ACCOUNT_COMMISSION_KEY)
AND (STG_ACCT_COMM.ACCT_COMM_PMT_REQ_ID=ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_ID)
AND (ACCT_COMM_PMT_REQ.APO_OID=APO.APO_OID (+))
And (SOURCE_SYSTEM.SOURCE_SYSTEM_SHORT_NAME = 'LAWSON')
 And (ACCT_COMM_PMT_REQ.PAYMENT_REQUEST_TYPE <> 'RefundCheck')




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.ACCOUNT_COMMISSION T
	where	T.ACCOUNT_COMMISSION_OID	= S.ACCOUNT_COMMISSION_OID 
		 and ((T.EVENT_OID = S.EVENT_OID) or (T.EVENT_OID IS NULL and S.EVENT_OID IS NULL)) and
		((T.PAYMENT_DATE = S.PAYMENT_DATE) or (T.PAYMENT_DATE IS NULL and S.PAYMENT_DATE IS NULL)) and
		((T.PAYMENT_AMOUNT = S.PAYMENT_AMOUNT) or (T.PAYMENT_AMOUNT IS NULL and S.PAYMENT_AMOUNT IS NULL)) and
		((T.CURRENCY = S.CURRENCY) or (T.CURRENCY IS NULL and S.CURRENCY IS NULL)) and
		((T.EVENT_REF_ID = S.EVENT_REF_ID) or (T.EVENT_REF_ID IS NULL and S.EVENT_REF_ID IS NULL)) and
		((T.CHECK_NUMBER = S.CHECK_NUMBER) or (T.CHECK_NUMBER IS NULL and S.CHECK_NUMBER IS NULL)) and
		((T.PAY_TO = S.PAY_TO) or (T.PAY_TO IS NULL and S.PAY_TO IS NULL)) and
		((T.ACTIVITY_CODE = S.ACTIVITY_CODE) or (T.ACTIVITY_CODE IS NULL and S.ACTIVITY_CODE IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL)) and
		((T.RECONCILE_DATE = S.RECONCILE_DATE) or (T.RECONCILE_DATE IS NULL and S.RECONCILE_DATE IS NULL)) and
		((T.ACCT_COMM_PMT_REQ_ID = S.ACCT_COMM_PMT_REQ_ID) or (T.ACCT_COMM_PMT_REQ_ID IS NULL and S.ACCT_COMM_PMT_REQ_ID IS NULL)) and
		((T.APO_OID = S.APO_OID) or (T.APO_OID IS NULL and S.APO_OID IS NULL)) and
		((T.APO_ID = S.APO_ID) or (T.APO_ID IS NULL and S.APO_ID IS NULL)) and
		((T.STATUS = S.STATUS) or (T.STATUS IS NULL and S.STATUS IS NULL)) and
		((T.ACTUAL_PAYMENT_AMOUNT = S.ACTUAL_PAYMENT_AMOUNT) or (T.ACTUAL_PAYMENT_AMOUNT IS NULL and S.ACTUAL_PAYMENT_AMOUNT IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* Recycle previous errors */

insert into RAX_APP_USER.I$_ACCOUNT_COMMISSION423001
(
	ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	ACTUAL_PAYMENT_AMOUNT,
	IND_UPDATE
)
select	DISTINCT ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	ACTUAL_PAYMENT_AMOUNT,
	'I' IND_UPDATE
from	RAX_APP_USER.E$_ACCOUNT_COMMISSION423001 E
where 	not exists (
		select	'?'
		from	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001 T
		where			T.ACCOUNT_COMMISSION_OID=E.ACCOUNT_COMMISSION_OID
		)
and	E.ODI_ORIGIN	= '(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT'
and	E.ODI_ERR_TYPE	= 'F'

&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_ACCOUNT_COMMISSION423001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* Create Index on flow table */

BEGIN  
   EXECUTE IMMEDIATE 'create index	RAX_APP_USER.I$_ACCOUNT_COMMISSION_IDX423001 on	
	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001 (ACCOUNT_COMMISSION_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;

&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* create check table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
(
	CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
	SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
	RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
	FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
	ERR_TYPE		VARCHAR2(1 CHAR) NULL,
	ERR_MESS		VARCHAR2(250 CHAR) NULL ,
	CHECK_DATE	DATE NULL,
	ORIGIN		VARCHAR2(100 CHAR) NULL,
	CONS_NAME	VARCHAR2(35 CHAR) NULL,
	CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ERR_COUNT		NUMBER(10) NULL
)
';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;
	

&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* create error table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_ACCOUNT_COMMISSION423001
(
	ODI_ROW_ID 		UROWID,
	ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
	ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
	ODI_CHECK_DATE	DATE NULL, 
	ACCOUNT_COMMISSION_OID	NUMBER NULL,
	EVENT_OID	NUMBER NULL,
	PAYMENT_DATE	DATE NULL,
	PAYMENT_AMOUNT	NUMBER NULL,
	CURRENCY	VARCHAR2(20) NULL,
	EVENT_REF_ID	VARCHAR2(255) NULL,
	CHECK_NUMBER	VARCHAR2(255) NULL,
	PAY_TO	VARCHAR2(255) NULL,
	ACTIVITY_CODE	VARCHAR2(255) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	RECONCILE_DATE	DATE NULL,
	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
	APO_OID	NUMBER NULL,
	APO_ID	VARCHAR2(255) NULL,
	STATUS	VARCHAR2(50) NULL,
	PAYMENT_TYPE	VARCHAR2(255) NULL,
	ACTUAL_PAYMENT_AMOUNT	NUMBER NULL,
	ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
	ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
	ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
	ODI_SESS_NO		VARCHAR2(19 CHAR)
)
';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;



&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_ACCOUNT_COMMISSION423001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT')


&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
create index 	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001
on	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001 (ACCOUNT_COMMISSION_OID)


&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_ACCOUNT_COMMISSION' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.ACCOUNT_COMMISSION' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '423001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_ACCOUNT_COMMISSION423001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	PAYMENT_TYPE,
	ACTUAL_PAYMENT_AMOUNT
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15064: The primary key ACCOUNT_COMMISSION_PK is not unique.'',
	''(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT'',
	sysdate,
	''ACCOUNT_COMMISSION_PK'',
	''PK'',	
	ACCOUNT_COMMISSION.ACCOUNT_COMMISSION_OID,
	ACCOUNT_COMMISSION.EVENT_OID,
	ACCOUNT_COMMISSION.PAYMENT_DATE,
	ACCOUNT_COMMISSION.PAYMENT_AMOUNT,
	ACCOUNT_COMMISSION.CURRENCY,
	ACCOUNT_COMMISSION.EVENT_REF_ID,
	ACCOUNT_COMMISSION.CHECK_NUMBER,
	ACCOUNT_COMMISSION.PAY_TO,
	ACCOUNT_COMMISSION.ACTIVITY_CODE,
	ACCOUNT_COMMISSION.ODS_CREATE_DATE,
	ACCOUNT_COMMISSION.ODS_MODIFY_DATE,
	ACCOUNT_COMMISSION.SOURCE_SYSTEM_OID,
	ACCOUNT_COMMISSION.RECONCILE_DATE,
	ACCOUNT_COMMISSION.ACCT_COMM_PMT_REQ_ID,
	ACCOUNT_COMMISSION.APO_OID,
	ACCOUNT_COMMISSION.APO_ID,
	ACCOUNT_COMMISSION.STATUS,
	ACCOUNT_COMMISSION.PAYMENT_TYPE,
	ACCOUNT_COMMISSION.ACTUAL_PAYMENT_AMOUNT
from	'
 || VariableCheckTable || 
' ACCOUNT_COMMISSION 
where	exists  (
		select	SUB1.ACCOUNT_COMMISSION_OID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.ACCOUNT_COMMISSION_OID=ACCOUNT_COMMISSION.ACCOUNT_COMMISSION_OID
		group by 	SUB1.ACCOUNT_COMMISSION_OID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index ACCOUNT_COMMISSION_PKX_flow on RAX_APP_USER.I$_ACCOUNT_COMMISSION423001 (ACCOUNT_COMMISSION_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;


&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* insert AK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_ACCOUNT_COMMISSION' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.ACCOUNT_COMMISSION' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '423001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_ACCOUNT_COMMISSION423001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	PAYMENT_TYPE,
	ACTUAL_PAYMENT_AMOUNT
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15063: The alternate key ACCOUNT_COMMISSION_PKX is not unique.'',
	''(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT'',
	sysdate,
	''ACCOUNT_COMMISSION_PKX'',
	''AK'',	
	ACCOUNT_COMMISSION.ACCOUNT_COMMISSION_OID,
	ACCOUNT_COMMISSION.EVENT_OID,
	ACCOUNT_COMMISSION.PAYMENT_DATE,
	ACCOUNT_COMMISSION.PAYMENT_AMOUNT,
	ACCOUNT_COMMISSION.CURRENCY,
	ACCOUNT_COMMISSION.EVENT_REF_ID,
	ACCOUNT_COMMISSION.CHECK_NUMBER,
	ACCOUNT_COMMISSION.PAY_TO,
	ACCOUNT_COMMISSION.ACTIVITY_CODE,
	ACCOUNT_COMMISSION.ODS_CREATE_DATE,
	ACCOUNT_COMMISSION.ODS_MODIFY_DATE,
	ACCOUNT_COMMISSION.SOURCE_SYSTEM_OID,
	ACCOUNT_COMMISSION.RECONCILE_DATE,
	ACCOUNT_COMMISSION.ACCT_COMM_PMT_REQ_ID,
	ACCOUNT_COMMISSION.APO_OID,
	ACCOUNT_COMMISSION.APO_ID,
	ACCOUNT_COMMISSION.STATUS,
	ACCOUNT_COMMISSION.PAYMENT_TYPE,
	ACCOUNT_COMMISSION.ACTUAL_PAYMENT_AMOUNT
from              '	
 || VariableCheckTable || 
' ACCOUNT_COMMISSION
where	exists  (
		select	SUB.ACCOUNT_COMMISSION_OID
		from 	'
 || VariableCheckTable || 
' SUB
		where 	SUB.ACCOUNT_COMMISSION_OID=ACCOUNT_COMMISSION.ACCOUNT_COMMISSION_OID
		group by 	SUB.ACCOUNT_COMMISSION_OID
		having 	count(1) > 1
		)
 ';

END;

/*  Checked Datastore =RAX_APP_USER.I$_ACCOUNT_COMMISSION  */
/*  Integration Datastore =RAX_APP_USER.I$_ACCOUNT_COMMISSION   */
/*  Target Datastore =ODS_OWN.ACCOUNT_COMMISSION */



&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_ACCOUNT_COMMISSION423001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	PAYMENT_TYPE,
	ACTUAL_PAYMENT_AMOUNT
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column ACCOUNT_COMMISSION_OID cannot be null.',
	sysdate,
	'(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT',
	'ACCOUNT_COMMISSION_OID',
	'NN',	
	ACCOUNT_COMMISSION_OID,
	EVENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	CURRENCY,
	EVENT_REF_ID,
	CHECK_NUMBER,
	PAY_TO,
	ACTIVITY_CODE,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	RECONCILE_DATE,
	ACCT_COMM_PMT_REQ_ID,
	APO_OID,
	APO_ID,
	STATUS,
	PAYMENT_TYPE,
	ACTUAL_PAYMENT_AMOUNT
from	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001
where	ACCOUNT_COMMISSION_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
BEGIN
    EXECUTE IMMEDIATE 'create index RAX_APP_USER.E$_ACCOUNT_COMMISSION423001 on	RAX_APP_USER.E$_ACCOUNT_COMMISSION423001 (ODI_ROW_ID)';
    DBMS_OUTPUT.PUT_LINE('Index created successfully.');
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('Index already exists.');
        ELSE
            RAISE;
        END IF;
END;



&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_ACCOUNT_COMMISSION423001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'ACCOUNT_COMMISSION',
	'ODS_OWN.ACCOUNT_COMMISSION423001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_ACCOUNT_COMMISSION423001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(423001)ODS_Project.LOAD_ACCOUNT_COMMISSION_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 34 */
/* Merge Rows */

merge into	ODS_OWN.ACCOUNT_COMMISSION T
using	RAX_APP_USER.I$_ACCOUNT_COMMISSION423001 S
on	(
		T.ACCOUNT_COMMISSION_OID=S.ACCOUNT_COMMISSION_OID
	)
when matched
then update set
	T.EVENT_OID	= S.EVENT_OID,
	T.PAYMENT_DATE	= S.PAYMENT_DATE,
	T.PAYMENT_AMOUNT	= S.PAYMENT_AMOUNT,
	T.CURRENCY	= S.CURRENCY,
	T.EVENT_REF_ID	= S.EVENT_REF_ID,
	T.CHECK_NUMBER	= S.CHECK_NUMBER,
	T.PAY_TO	= S.PAY_TO,
	T.ACTIVITY_CODE	= S.ACTIVITY_CODE,
	T.SOURCE_SYSTEM_OID	= S.SOURCE_SYSTEM_OID,
	T.RECONCILE_DATE	= S.RECONCILE_DATE,
	T.ACCT_COMM_PMT_REQ_ID	= S.ACCT_COMM_PMT_REQ_ID,
	T.APO_OID	= S.APO_OID,
	T.APO_ID	= S.APO_ID,
	T.STATUS	= S.STATUS,
	T.ACTUAL_PAYMENT_AMOUNT	= S.ACTUAL_PAYMENT_AMOUNT
	,               T.ODS_MODIFY_DATE	= SYSDATE,
	T.PAYMENT_TYPE	= 'Check'
when not matched
then insert
	(
	T.ACCOUNT_COMMISSION_OID,
	T.EVENT_OID,
	T.PAYMENT_DATE,
	T.PAYMENT_AMOUNT,
	T.CURRENCY,
	T.EVENT_REF_ID,
	T.CHECK_NUMBER,
	T.PAY_TO,
	T.ACTIVITY_CODE,
	T.SOURCE_SYSTEM_OID,
	T.RECONCILE_DATE,
	T.ACCT_COMM_PMT_REQ_ID,
	T.APO_OID,
	T.APO_ID,
	T.STATUS,
	T.ACTUAL_PAYMENT_AMOUNT
	,                T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE,
	T.PAYMENT_TYPE
	)
values
	(
	S.ACCOUNT_COMMISSION_OID,
	S.EVENT_OID,
	S.PAYMENT_DATE,
	S.PAYMENT_AMOUNT,
	S.CURRENCY,
	S.EVENT_REF_ID,
	S.CHECK_NUMBER,
	S.PAY_TO,
	S.ACTIVITY_CODE,
	S.SOURCE_SYSTEM_OID,
	S.RECONCILE_DATE,
	S.ACCT_COMM_PMT_REQ_ID,
	S.APO_OID,
	S.APO_ID,
	S.STATUS,
	S.ACTUAL_PAYMENT_AMOUNT
	,                SYSDATE,
	SYSDATE,
	'Check'
	)

&


/*-----------------------------------------------*/
/* TASK No. 35 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 36 */
/* Drop flow table */

drop table RAX_APP_USER.I$_ACCOUNT_COMMISSION423001 

&


/*-----------------------------------------------*/
/* TASK No. 37 */
/* Insert new rows */

 
insert into	ODS_STAGE.LAW_EVENT_PAYMENT_XR 
( 
	EVENT_PAYMENT_KEY,
	CASH_CODE,
	BANK_INST_CODE,
	TRANS_IDENT,
	VOID_IND,
	EVENT_REF_ID,
	ACCT_COMM_PMT_REQ_ID 
	,EVENT_PAYMENT_OID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE 
) 

select
    EVENT_PAYMENT_KEY,
	CASH_CODE,
	BANK_INST_CODE,
	TRANS_IDENT,
	VOID_IND,
	EVENT_REF_ID,
	ACCT_COMM_PMT_REQ_ID   
  ,ODS_STAGE.EVENT_PAYMENT_OID_SEQ.nextval,
	sysdate,
	sysdate 
FROM (	


select 	
	STG_ACCOUNT_COMMISSION.LAW_ACCOUNT_COMMISSION_ID EVENT_PAYMENT_KEY,
	STG_ACCOUNT_COMMISSION.CASH_CODE CASH_CODE,
	STG_ACCOUNT_COMMISSION.BANK_INST_CODE BANK_INST_CODE,
	STG_ACCOUNT_COMMISSION.TRANS_IDENT TRANS_IDENT,
	STG_ACCOUNT_COMMISSION.VOID_IND VOID_IND,
	E.EVENT_REF_ID EVENT_REF_ID,
	STG_ACCOUNT_COMMISSION.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID 
from	RAX_APP_USER.STG_ACCOUNT_COMMISSION   STG_ACCOUNT_COMMISSION, ODS_OWN.ACCT_COMM_PMT_REQ   ACCT_COMM_PMT_REQ, ODS_STAGE.LAW_EVENT_PAYMENT_XR   LAW_EVENT_PAYMENT_XR, ODS_OWN.EVENT   E
where		(1=1)	
 And (ACCT_COMM_PMT_REQ.ACCT_COMM_PMT_REQ_ID=STG_ACCOUNT_COMMISSION.ACCT_COMM_PMT_REQ_ID)
AND (STG_ACCOUNT_COMMISSION.LAW_ACCOUNT_COMMISSION_ID=LAW_EVENT_PAYMENT_XR.EVENT_PAYMENT_KEY(+)
and LAW_EVENT_PAYMENT_XR.EVENT_PAYMENT_KEY is null)
AND (ACCT_COMM_PMT_REQ.EVENT_OID=E.EVENT_OID)
And (ACCT_COMM_PMT_REQ.PAYMENT_REQUEST_TYPE = 'RefundCheck')




)    ODI_GET_FROM




&


/*-----------------------------------------------*/
/* TASK No. 38 */
/* Commit transaction */

/* commit */


/*-----------------------------------------------*/
/* TASK No. 39 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 39 */




/*-----------------------------------------------*/
/* TASK No. 40 */
/* Drop flow table */

BEGIN
    EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_EVENT_PAYMENT1544001';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -942 THEN
            DBMS_OUTPUT.PUT_LINE('Table does not exist.');
        ELSE
            RAISE;
        END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 41 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_EVENT_PAYMENT1544001
(
	EVENT_PAYMENT_OID	NUMBER NULL,
	PAYMENT_DATE	DATE NULL,
	PAYMENT_AMOUNT	NUMBER NULL,
	PAYMENT_TYPE_OID	NUMBER NULL,
	EVENT_OID	NUMBER NULL,
	CURRENCY	VARCHAR2(20) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	CARDHOLDER_NAME	VARCHAR2(255) NULL,
	EVENT_REF_ID	VARCHAR2(40) NULL,
	PAYMENT_SOURCE	VARCHAR2(255) NULL,
	SOURCE_SYSTEM_KEY	VARCHAR2(255) NULL,
	CHECK_NUMBER	VARCHAR2(20) NULL,
	CHECK_RECONCILE_DATE	DATE NULL,
	RECORD_STATUS	VARCHAR2(255) NULL,
	ACCT_COMM_PMT_REQ_ID	NUMBER NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 42 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_EVENT_PAYMENT1544001
(
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID,
	IND_UPDATE
)
select 
EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID,
	IND_UPDATE
 from (


select 	 
	
	XR.EVENT_PAYMENT_OID EVENT_PAYMENT_OID,
	STG.PAYMENT_DATE PAYMENT_DATE,
	case when STG.REC_STATUS=0 then -1 * STG.PAYMENT_AMOUNT 
when STG.REC_STATUS=1 then -1 * STG.PAYMENT_AMOUNT 
when STG.REC_STATUS=2 then -1 * STG.PAYMENT_AMOUNT
when STG.REC_STATUS=3 then 0 /*Voided*/
when STG.REC_STATUS=4 then 0  /*StopPayment*/
when STG.REC_STATUS=5 then -1 * STG.PAYMENT_AMOUNT 
when STG.REC_STATUS=6 then -1 * STG.PAYMENT_AMOUNT 
else 0 end PAYMENT_AMOUNT,
	PT.PAYMENT_TYPE_OID PAYMENT_TYPE_OID,
	E.EVENT_OID EVENT_OID,
	STG.CURRENCY_CODE CURRENCY,
	SS.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,
	STG.PAY_TO CARDHOLDER_NAME,
	XR.EVENT_REF_ID EVENT_REF_ID,
	STG.ACCT_COMM_PMT_REQ_ID SOURCE_SYSTEM_KEY,
	STG.CHECK_NUMBER CHECK_NUMBER,
	case when STG.REC_STATUS=2 then STG.RECONCILE_DATE else null end CHECK_RECONCILE_DATE,
	case when STG.REC_STATUS=0 then 'Unreleased' 
when STG.REC_STATUS=1 then 'Open'
when STG.REC_STATUS=2 then 'Reconciled' 
when STG.REC_STATUS=3 then 'Voided' 
when STG.REC_STATUS=4 then 'StopPayment' 
when STG.REC_STATUS=5 then 'StaleDated' 
when STG.REC_STATUS=6 then 'Escheated' 
else 'Unknown' end RECORD_STATUS,
	STG.ACCT_COMM_PMT_REQ_ID ACCT_COMM_PMT_REQ_ID,

	'I' IND_UPDATE

from	ODS_STAGE.LAW_EVENT_PAYMENT_XR   XR, RAX_APP_USER.STG_ACCOUNT_COMMISSION   STG, ODS_OWN.SOURCE_SYSTEM   SS, ODS_OWN.EVENT   E, ODS_OWN.PAYMENT_TYPE   PT, ODS_OWN.ACCT_COMM_PMT_REQ   ACPR
where	(1=1)
 And (STG.LAW_ACCOUNT_COMMISSION_ID=XR.EVENT_PAYMENT_KEY)
AND (XR.EVENT_REF_ID=E.EVENT_REF_ID (+))
AND (ACPR.ACCT_COMM_PMT_REQ_ID=STG.ACCT_COMM_PMT_REQ_ID)
And (SS.SOURCE_SYSTEM_SHORT_NAME = 'LAWSON')
 And (PT.PAYMENT_TYPE = 'RefundCheck')
 And (ACPR.PAYMENT_REQUEST_TYPE = 'RefundCheck')




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.EVENT_PAYMENT T
	where	T.EVENT_PAYMENT_OID	= S.EVENT_PAYMENT_OID 
		 and ((T.PAYMENT_DATE = S.PAYMENT_DATE) or (T.PAYMENT_DATE IS NULL and S.PAYMENT_DATE IS NULL)) and
		((T.PAYMENT_AMOUNT = S.PAYMENT_AMOUNT) or (T.PAYMENT_AMOUNT IS NULL and S.PAYMENT_AMOUNT IS NULL)) and
		((T.PAYMENT_TYPE_OID = S.PAYMENT_TYPE_OID) or (T.PAYMENT_TYPE_OID IS NULL and S.PAYMENT_TYPE_OID IS NULL)) and
		((T.EVENT_OID = S.EVENT_OID) or (T.EVENT_OID IS NULL and S.EVENT_OID IS NULL)) and
		((T.CURRENCY = S.CURRENCY) or (T.CURRENCY IS NULL and S.CURRENCY IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL)) and
		((T.CARDHOLDER_NAME = S.CARDHOLDER_NAME) or (T.CARDHOLDER_NAME IS NULL and S.CARDHOLDER_NAME IS NULL)) and
		((T.EVENT_REF_ID = S.EVENT_REF_ID) or (T.EVENT_REF_ID IS NULL and S.EVENT_REF_ID IS NULL)) and
		((T.SOURCE_SYSTEM_KEY = S.SOURCE_SYSTEM_KEY) or (T.SOURCE_SYSTEM_KEY IS NULL and S.SOURCE_SYSTEM_KEY IS NULL)) and
		((T.CHECK_NUMBER = S.CHECK_NUMBER) or (T.CHECK_NUMBER IS NULL and S.CHECK_NUMBER IS NULL)) and
		((T.CHECK_RECONCILE_DATE = S.CHECK_RECONCILE_DATE) or (T.CHECK_RECONCILE_DATE IS NULL and S.CHECK_RECONCILE_DATE IS NULL)) and
		((T.RECORD_STATUS = S.RECORD_STATUS) or (T.RECORD_STATUS IS NULL and S.RECORD_STATUS IS NULL)) and
		((T.ACCT_COMM_PMT_REQ_ID = S.ACCT_COMM_PMT_REQ_ID) or (T.ACCT_COMM_PMT_REQ_ID IS NULL and S.ACCT_COMM_PMT_REQ_ID IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 43 */
/* Recycle previous errors */

insert into RAX_APP_USER.I$_EVENT_PAYMENT1544001
(
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID,
	IND_UPDATE
)
select	DISTINCT EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID,
	'I' IND_UPDATE
from	RAX_APP_USER.E$_EVENT_PAYMENT1544001 E
where 	not exists (
		select	'?'
		from	RAX_APP_USER.I$_EVENT_PAYMENT1544001 T
		where			T.EVENT_PAYMENT_OID=E.EVENT_PAYMENT_OID
		)
and	E.ODI_ORIGIN	= '(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'
and	E.ODI_ERR_TYPE	= 'F'

&


/*-----------------------------------------------*/
/* TASK No. 44 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_EVENT_PAYMENT1544001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 45 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_EVENT_PAYMENT_IDX1544001
on		RAX_APP_USER.I$_EVENT_PAYMENT1544001 (EVENT_PAYMENT_OID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 46 */
/* create check table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
(
	CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
	SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
	RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
	FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
	ERR_TYPE		VARCHAR2(1 CHAR) NULL,
	ERR_MESS		VARCHAR2(250 CHAR) NULL ,
	CHECK_DATE	DATE NULL,
	ORIGIN		VARCHAR2(100 CHAR) NULL,
	CONS_NAME	VARCHAR2(35 CHAR) NULL,
	CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ERR_COUNT		NUMBER(10) NULL
)
';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;
	

&


/*-----------------------------------------------*/
/* TASK No. 47 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 48 */
/* create error table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_EVENT_PAYMENT1544001
(
	ODI_ROW_ID 		UROWID,
	ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
	ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
	ODI_CHECK_DATE	DATE NULL, 
	EVENT_PAYMENT_OID	NUMBER NULL,
	PAYMENT_DATE	DATE NULL,
	PAYMENT_AMOUNT	NUMBER NULL,
	PAYMENT_TYPE_OID	NUMBER NULL,
	PHOTOGRAPHER_EMPLOYEE_OID	NUMBER NULL,
	EVENT_OID	NUMBER NULL,
	ORDER_HEADER_OID	NUMBER NULL,
	ENTERED_BY_USER	VARCHAR2(255) NULL,
	LIFETOUCH_TX_ID	VARCHAR2(255) NULL,
	CURRENCY	VARCHAR2(20) NULL,
	DEPOSIT_OID	NUMBER NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	CARDHOLDER_NAME	VARCHAR2(255) NULL,
	CARDHOLDER_ADDRESS_LINE1	VARCHAR2(255) NULL,
	CARDHOLDER_ADDRESS_LINE2	VARCHAR2(255) NULL,
	CARDHOLDER_CITY	VARCHAR2(255) NULL,
	CARDHOLDER_STATE	VARCHAR2(255) NULL,
	CARDHOLDER_POSTAL_CODE	VARCHAR2(255) NULL,
	EVENT_REF_ID	VARCHAR2(40) NULL,
	PAYMENT_SOURCE	VARCHAR2(255) NULL,
	ORDER_FORM_ID	VARCHAR2(20) NULL,
	SOURCE_SYSTEM_KEY	VARCHAR2(255) NULL,
	CHECK_NUMBER	VARCHAR2(20) NULL,
	CHECK_RECONCILE_DATE	DATE NULL,
	RECORD_STATUS	VARCHAR2(255) NULL,
	TERRITORY_ACCOUNT_TYPE	VARCHAR2(255) NULL,
	SUBJECT_GRADE	VARCHAR2(10) NULL,
	SUBJECT_ID	VARCHAR2(36) NULL,
	SUBJECT_FIRST_NAME	VARCHAR2(51) NULL,
	SUBJECT_LAST_NAME	VARCHAR2(50) NULL,
	ACCT_COMM_PMT_REQ_ID	NUMBER NULL,
	PAYPAL_PAYER_EMAIL_ID	VARCHAR2(255) NULL,
	ORIGINAL_EVENT_PAYMENT_OID	NUMBER NULL,
	REFUND_REASON	VARCHAR2(256) NULL,
	ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
	ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
	ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
	ODI_SESS_NO		VARCHAR2(19 CHAR)
)
';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;



&


/*-----------------------------------------------*/
/* TASK No. 49 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_EVENT_PAYMENT1544001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT')


&


/*-----------------------------------------------*/
/* TASK No. 50 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index RAX_APP_USER.I$_EVENT_PAYMENT1544001 on	RAX_APP_USER.I$_EVENT_PAYMENT1544001 (EVENT_PAYMENT_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END;

&


/*-----------------------------------------------*/
/* TASK No. 51 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_EVENT_PAYMENT' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.EVENT_PAYMENT' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '1544001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_EVENT_PAYMENT1544001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15064: The primary key EVENT_PAYMENT_PK is not unique.'',
	''(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'',
	sysdate,
	''EVENT_PAYMENT_PK'',
	''PK'',	
	PAYMENT.EVENT_PAYMENT_OID,
	PAYMENT.PAYMENT_DATE,
	PAYMENT.PAYMENT_AMOUNT,
	PAYMENT.PAYMENT_TYPE_OID,
	PAYMENT.EVENT_OID,
	PAYMENT.CURRENCY,
	PAYMENT.ODS_CREATE_DATE,
	PAYMENT.ODS_MODIFY_DATE,
	PAYMENT.SOURCE_SYSTEM_OID,
	PAYMENT.CARDHOLDER_NAME,
	PAYMENT.EVENT_REF_ID,
	PAYMENT.PAYMENT_SOURCE,
	PAYMENT.SOURCE_SYSTEM_KEY,
	PAYMENT.CHECK_NUMBER,
	PAYMENT.CHECK_RECONCILE_DATE,
	PAYMENT.RECORD_STATUS,
	PAYMENT.ACCT_COMM_PMT_REQ_ID
from	'
 || VariableCheckTable || 
' PAYMENT 
where	exists  (
		select	SUB1.EVENT_PAYMENT_OID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.EVENT_PAYMENT_OID=PAYMENT.EVENT_PAYMENT_OID
		group by 	SUB1.EVENT_PAYMENT_OID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 52 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	EVENT_PAYMENT_PKX_flow on RAX_APP_USER.I$_EVENT_PAYMENT1544001 (EVENT_PAYMENT_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      NULL;
END; 


&


/*-----------------------------------------------*/
/* TASK No. 53 */
/* insert AK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_EVENT_PAYMENT' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.EVENT_PAYMENT' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '1544001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_EVENT_PAYMENT1544001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15063: The alternate key EVENT_PAYMENT_PKX is not unique.'',
	''(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'',
	sysdate,
	''EVENT_PAYMENT_PKX'',
	''AK'',	
	PAYMENT.EVENT_PAYMENT_OID,
	PAYMENT.PAYMENT_DATE,
	PAYMENT.PAYMENT_AMOUNT,
	PAYMENT.PAYMENT_TYPE_OID,
	PAYMENT.EVENT_OID,
	PAYMENT.CURRENCY,
	PAYMENT.ODS_CREATE_DATE,
	PAYMENT.ODS_MODIFY_DATE,
	PAYMENT.SOURCE_SYSTEM_OID,
	PAYMENT.CARDHOLDER_NAME,
	PAYMENT.EVENT_REF_ID,
	PAYMENT.PAYMENT_SOURCE,
	PAYMENT.SOURCE_SYSTEM_KEY,
	PAYMENT.CHECK_NUMBER,
	PAYMENT.CHECK_RECONCILE_DATE,
	PAYMENT.RECORD_STATUS,
	PAYMENT.ACCT_COMM_PMT_REQ_ID
from              '	
 || VariableCheckTable || 
' PAYMENT
where	exists  (
		select	SUB.EVENT_PAYMENT_OID
		from 	'
 || VariableCheckTable || 
' SUB
		where 	SUB.EVENT_PAYMENT_OID=PAYMENT.EVENT_PAYMENT_OID
		group by 	SUB.EVENT_PAYMENT_OID
		having 	count(1) > 1
		)
 ';

END;

/*  Checked Datastore =RAX_APP_USER.I$_EVENT_PAYMENT  */
/*  Integration Datastore =RAX_APP_USER.I$_EVENT_PAYMENT   */
/*  Target Datastore =ODS_OWN.EVENT_PAYMENT */



&


/*-----------------------------------------------*/
/* TASK No. 54 */
/* insert FK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_EVENT_PAYMENT' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.EVENT_PAYMENT' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '1544001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_EVENT_PAYMENT1544001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15065: Join error (EVENT_PAYMENT_EVENT) between the table EVENT_PAYMENT and the table EVENT.'',
	sysdate,
	''(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'',
	''EVENT_PAYMENT_EVENT'',
	''FK'',	
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID

from	'
 || VariableCheckTable || 
' PAYMENT 
where 	(
		PAYMENT.EVENT_OID 
	) not in 	(
		select 	EVENT_OID
		from 	ODS_OWN.EVENT
		)
and	(
		PAYMENT.EVENT_OID is not null 
	)

';

END;

/*  Checked Datastore =RAX_APP_USER.I$_EVENT_PAYMENT  */
/*  Integration Datastore =RAX_APP_USER.I$_EVENT_PAYMENT   */
/*  Target Datastore =ODS_OWN.EVENT_PAYMENT */


&


/*-----------------------------------------------*/
/* TASK No. 55 */
/* insert FK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_EVENT_PAYMENT' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.EVENT_PAYMENT' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '1544001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_EVENT_PAYMENT1544001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15065: Join error (EVENT_PAYMENT_TYPE) between the table EVENT_PAYMENT and the table PAYMENT_TYPE.'',
	sysdate,
	''(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'',
	''EVENT_PAYMENT_TYPE'',
	''FK'',	
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID

from	'
 || VariableCheckTable || 
' PAYMENT 
where 	(
		PAYMENT.PAYMENT_TYPE_OID 
	) not in 	(
		select 	PAYMENT_TYPE_OID
		from 	ODS_OWN.PAYMENT_TYPE
		)
and	(
		PAYMENT.PAYMENT_TYPE_OID is not null 
	)

';

END;

/*  Checked Datastore =RAX_APP_USER.I$_EVENT_PAYMENT  */
/*  Integration Datastore =RAX_APP_USER.I$_EVENT_PAYMENT   */
/*  Target Datastore =ODS_OWN.EVENT_PAYMENT */


&


/*-----------------------------------------------*/
/* TASK No. 56 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_EVENT_PAYMENT1544001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column EVENT_PAYMENT_OID cannot be null.',
	sysdate,
	'(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT',
	'EVENT_PAYMENT_OID',
	'NN',	
	EVENT_PAYMENT_OID,
	PAYMENT_DATE,
	PAYMENT_AMOUNT,
	PAYMENT_TYPE_OID,
	EVENT_OID,
	CURRENCY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	CARDHOLDER_NAME,
	EVENT_REF_ID,
	PAYMENT_SOURCE,
	SOURCE_SYSTEM_KEY,
	CHECK_NUMBER,
	CHECK_RECONCILE_DATE,
	RECORD_STATUS,
	ACCT_COMM_PMT_REQ_ID
from	RAX_APP_USER.I$_EVENT_PAYMENT1544001
where	EVENT_PAYMENT_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 57 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
BEGIN
    EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_EVENT_PAYMENT1544001 on	RAX_APP_USER.E$_EVENT_PAYMENT1544001 (ODI_ROW_ID)
';
    DBMS_OUTPUT.PUT_LINE('Index created successfully.');
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('Index already exists.');
        ELSE
            RAISE;
        END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 58 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_EVENT_PAYMENT1544001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_EVENT_PAYMENT1544001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 59 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'EVENT_PAYMENT',
	'ODS_OWN.EVENT_PAYMENT1544001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_EVENT_PAYMENT1544001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(1544001)ODS_Project.LOAD_LAW_AC_EVENT_PAYMENT_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 60 */
/* Merge Rows */

merge into	ODS_OWN.EVENT_PAYMENT T
using	RAX_APP_USER.I$_EVENT_PAYMENT1544001 S
on	(
		T.EVENT_PAYMENT_OID=S.EVENT_PAYMENT_OID
	)
when matched
then update set
	T.PAYMENT_DATE	= S.PAYMENT_DATE,
	T.PAYMENT_AMOUNT	= S.PAYMENT_AMOUNT,
	T.PAYMENT_TYPE_OID	= S.PAYMENT_TYPE_OID,
	T.EVENT_OID	= S.EVENT_OID,
	T.CURRENCY	= S.CURRENCY,
	T.SOURCE_SYSTEM_OID	= S.SOURCE_SYSTEM_OID,
	T.CARDHOLDER_NAME	= S.CARDHOLDER_NAME,
	T.EVENT_REF_ID	= S.EVENT_REF_ID,
	T.SOURCE_SYSTEM_KEY	= S.SOURCE_SYSTEM_KEY,
	T.CHECK_NUMBER	= S.CHECK_NUMBER,
	T.CHECK_RECONCILE_DATE	= S.CHECK_RECONCILE_DATE,
	T.RECORD_STATUS	= S.RECORD_STATUS,
	T.ACCT_COMM_PMT_REQ_ID	= S.ACCT_COMM_PMT_REQ_ID
	,             T.ODS_MODIFY_DATE	= sysdate,
	T.PAYMENT_SOURCE	= 'Lawson'
when not matched
then insert
	(
	T.EVENT_PAYMENT_OID,
	T.PAYMENT_DATE,
	T.PAYMENT_AMOUNT,
	T.PAYMENT_TYPE_OID,
	T.EVENT_OID,
	T.CURRENCY,
	T.SOURCE_SYSTEM_OID,
	T.CARDHOLDER_NAME,
	T.EVENT_REF_ID,
	T.SOURCE_SYSTEM_KEY,
	T.CHECK_NUMBER,
	T.CHECK_RECONCILE_DATE,
	T.RECORD_STATUS,
	T.ACCT_COMM_PMT_REQ_ID
	,              T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE,
	T.PAYMENT_SOURCE
	)
values
	(
	S.EVENT_PAYMENT_OID,
	S.PAYMENT_DATE,
	S.PAYMENT_AMOUNT,
	S.PAYMENT_TYPE_OID,
	S.EVENT_OID,
	S.CURRENCY,
	S.SOURCE_SYSTEM_OID,
	S.CARDHOLDER_NAME,
	S.EVENT_REF_ID,
	S.SOURCE_SYSTEM_KEY,
	S.CHECK_NUMBER,
	S.CHECK_RECONCILE_DATE,
	S.RECORD_STATUS,
	S.ACCT_COMM_PMT_REQ_ID
	,              sysdate,
	sysdate,
	'Lawson'
	)

&


/*-----------------------------------------------*/
/* TASK No. 61 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 62 */
/* Drop flow table */

drop table RAX_APP_USER.I$_EVENT_PAYMENT1544001 

&


/*-----------------------------------------------*/
/* TASK No. 63 */
/* Update CDC Load Status */

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
+ nvl((TIMEZONE_OFFSET/24), 0) 
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env
*/

&


/*-----------------------------------------------*/
/* TASK No. 64 */
/* Insert CDC Audit Record */

INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME,
TIMEZONE_OFFSET              
)
select 
:v_cdc_load_table_name
,:v_sess_no
,'LOAD_ACCOUNT_COMMISSION_PKG'
,'015'
,TO_DATE(SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
,TO_DATE (SUBSTR(:v_cdc_load_date, 1, 19),'YYYY-MM-DD HH24:MI:SS')
,:v_cdc_overlap
,SYSDATE
,:v_env
,TIMEZONE_OFFSET
from 
ODS_OWN.ODS_CDC_LOAD_STATUS
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME              
)
values (
:v_cdc_load_table_name,
:v_sess_no,
'LOAD_ACCOUNT_COMMISSION_PKG',
'015',
TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS'),
TO_DATE (SUBSTR (:v_cdc_load_date, 1, 19),
                           'YYYY-MM-DD HH24:MI:SS'
                          )
,:v_cdc_overlap,
SYSDATE,
 :v_env)
*/


&


/*-----------------------------------------------*/
