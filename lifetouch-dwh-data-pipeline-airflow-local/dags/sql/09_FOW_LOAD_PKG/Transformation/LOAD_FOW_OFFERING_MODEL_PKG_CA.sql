/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Drop work table */

-- drop table RAX_APP_USER.C$_0FOW_FRNG_MDL_STG 

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 5 */
-- /* Create work table */

-- create table RAX_APP_USER.C$_0FOW_FRNG_MDL_STG
-- (
-- 	C1_ID	NUMBER(19) NULL,
-- 	C2_VERSION	NUMBER(19) NULL,
-- 	C3_ACTIVE	NUMBER(1) NULL,
-- 	C4_COMMISSION_MODEL_ID	NUMBER(19) NULL,
-- 	C5_CREATED_BY	VARCHAR2(255) NULL,
-- 	C6_DATE_CREATED	TIMESTAMP(6) NULL,
-- 	C7_ENVELOPE_ID	VARCHAR2(255) NULL,
-- 	C8_FLYER_ID	VARCHAR2(255) NULL,
-- 	C9_INSERTS	VARCHAR2(255) NULL,
-- 	C10_LAST_UPDATED	TIMESTAMP(6) NULL,
-- 	C11_NAME	VARCHAR2(255) NULL,
-- 	C12_PRICE_PROGRAM_NAME	VARCHAR2(255) NULL,
-- 	C13_TERRITORY	VARCHAR2(255) NULL,
-- 	C14_UPDATED_BY	VARCHAR2(255) NULL,
-- 	C15_VISUAL_MERCH_ID	VARCHAR2(255) NULL
-- )
-- NOLOGGING

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 6 */
-- /* Load data */

-- /* SOURCE CODE */
-- select	
-- 	OFFERING_MODEL.ID	   C1_ID,
-- 	OFFERING_MODEL.VERSION	   C2_VERSION,
-- 	OFFERING_MODEL.ACTIVE	   C3_ACTIVE,
-- 	OFFERING_MODEL.COMMISSION_MODEL_ID	   C4_COMMISSION_MODEL_ID,
-- 	OFFERING_MODEL.CREATED_BY	   C5_CREATED_BY,
-- 	OFFERING_MODEL.DATE_CREATED	   C6_DATE_CREATED,
-- 	OFFERING_MODEL.ENVELOPE_ID	   C7_ENVELOPE_ID,
-- 	OFFERING_MODEL.FLYER_ID	   C8_FLYER_ID,
-- 	OFFERING_MODEL.INSERTS	   C9_INSERTS,
-- 	OFFERING_MODEL.LAST_UPDATED	   C10_LAST_UPDATED,
-- 	OFFERING_MODEL.NAME	   C11_NAME,
-- 	OFFERING_MODEL.PRICE_PROGRAM_NAME	   C12_PRICE_PROGRAM_NAME,
-- 	OFFERING_MODEL.TERRITORY	   C13_TERRITORY,
-- 	OFFERING_MODEL.UPDATED_BY	   C14_UPDATED_BY,
-- 	OFFERING_MODEL.VISUAL_MERCH_ID	   C15_VISUAL_MERCH_ID
-- from	FOW_OWN.OFFERING_MODEL   OFFERING_MODEL
-- where	(1=1)
-- And (OFFERING_MODEL.LAST_UPDATED >=   ( TO_DATE(SUBSTR(:v_cdc_ld_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - :v_cdc_oms_overlap))





-- &

-- /* TARGET CODE */
-- insert into RAX_APP_USER.C$_0FOW_FRNG_MDL_STG
-- (
-- 	C1_ID,
-- 	C2_VERSION,
-- 	C3_ACTIVE,
-- 	C4_COMMISSION_MODEL_ID,
-- 	C5_CREATED_BY,
-- 	C6_DATE_CREATED,
-- 	C7_ENVELOPE_ID,
-- 	C8_FLYER_ID,
-- 	C9_INSERTS,
-- 	C10_LAST_UPDATED,
-- 	C11_NAME,
-- 	C12_PRICE_PROGRAM_NAME,
-- 	C13_TERRITORY,
-- 	C14_UPDATED_BY,
-- 	C15_VISUAL_MERCH_ID
-- )
-- values
-- (
-- 	:C1_ID,
-- 	:C2_VERSION,
-- 	:C3_ACTIVE,
-- 	:C4_COMMISSION_MODEL_ID,
-- 	:C5_CREATED_BY,
-- 	:C6_DATE_CREATED,
-- 	:C7_ENVELOPE_ID,
-- 	:C8_FLYER_ID,
-- 	:C9_INSERTS,
-- 	:C10_LAST_UPDATED,
-- 	:C11_NAME,
-- 	:C12_PRICE_PROGRAM_NAME,
-- 	:C13_TERRITORY,
-- 	:C14_UPDATED_BY,
-- 	:C15_VISUAL_MERCH_ID
-- )

-- &


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0FOW_FRNG_MDL_STG',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 9 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 9 */




/*-----------------------------------------------*/
/* TASK No. 10 */
/* Drop flow table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_FOW_FRNG_MDL_STG913001';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 11 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_FOW_FRNG_MDL_STG913001
(
	ID	NUMBER(19) NULL,
	VERSION	NUMBER(19) NULL,
	ACTIVE	NUMBER(1) NULL,
	COMMISSION_MODEL_ID	NUMBER(19) NULL,
	CREATED_BY	VARCHAR2(255) NULL,
	DATE_CREATED	TIMESTAMP(6) NULL,
	ENVELOPE_ID	VARCHAR2(255) NULL,
	FLYER_ID	VARCHAR2(255) NULL,
	INSERTS	VARCHAR2(255) NULL,
	LAST_UPDATED	TIMESTAMP(6) NULL,
	NAME	VARCHAR2(255) NULL,
	PRICE_PROGRAM_NAME	VARCHAR2(255) NULL,
	TERRITORY	VARCHAR2(255) NULL,
	UPDATED_BY	VARCHAR2(255) NULL,
	VISUAL_MERCH_ID	VARCHAR2(255) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL
	,IND_UPDATE		char(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_FOW_FRNG_MDL_STG913001
(
	ID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	IND_UPDATE
)
select 
ID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	IND_UPDATE
 from (


select 	 
	
	C1_ID ID,
	C2_VERSION VERSION,
	C3_ACTIVE ACTIVE,
	C4_COMMISSION_MODEL_ID COMMISSION_MODEL_ID,
	C5_CREATED_BY CREATED_BY,
	C6_DATE_CREATED DATE_CREATED,
	C7_ENVELOPE_ID ENVELOPE_ID,
	C8_FLYER_ID FLYER_ID,
	C9_INSERTS INSERTS,
	C10_LAST_UPDATED LAST_UPDATED,
	C11_NAME NAME,
	C12_PRICE_PROGRAM_NAME PRICE_PROGRAM_NAME,
	C13_TERRITORY TERRITORY,
	C14_UPDATED_BY UPDATED_BY,
	C15_VISUAL_MERCH_ID VISUAL_MERCH_ID,

	'I' IND_UPDATE

from	RAX_APP_USER.C$_0FOW_FRNG_MDL_STG
where	(1=1)






) S
where NOT EXISTS 
	( select 1 from ODS_STAGE_CA.FOW_OFFERING_MODEL_STG T
	where	T.ID	= S.ID 
		 and ((T.VERSION = S.VERSION) or (T.VERSION IS NULL and S.VERSION IS NULL)) and
		((T.ACTIVE = S.ACTIVE) or (T.ACTIVE IS NULL and S.ACTIVE IS NULL)) and
		((T.COMMISSION_MODEL_ID = S.COMMISSION_MODEL_ID) or (T.COMMISSION_MODEL_ID IS NULL and S.COMMISSION_MODEL_ID IS NULL)) and
		((T.CREATED_BY = S.CREATED_BY) or (T.CREATED_BY IS NULL and S.CREATED_BY IS NULL)) and
		((T.DATE_CREATED = S.DATE_CREATED) or (T.DATE_CREATED IS NULL and S.DATE_CREATED IS NULL)) and
		((T.ENVELOPE_ID = S.ENVELOPE_ID) or (T.ENVELOPE_ID IS NULL and S.ENVELOPE_ID IS NULL)) and
		((T.FLYER_ID = S.FLYER_ID) or (T.FLYER_ID IS NULL and S.FLYER_ID IS NULL)) and
		((T.INSERTS = S.INSERTS) or (T.INSERTS IS NULL and S.INSERTS IS NULL)) and
		((T.LAST_UPDATED = S.LAST_UPDATED) or (T.LAST_UPDATED IS NULL and S.LAST_UPDATED IS NULL)) and
		((T.NAME = S.NAME) or (T.NAME IS NULL and S.NAME IS NULL)) and
		((T.PRICE_PROGRAM_NAME = S.PRICE_PROGRAM_NAME) or (T.PRICE_PROGRAM_NAME IS NULL and S.PRICE_PROGRAM_NAME IS NULL)) and
		((T.TERRITORY = S.TERRITORY) or (T.TERRITORY IS NULL and S.TERRITORY IS NULL)) and
		((T.UPDATED_BY = S.UPDATED_BY) or (T.UPDATED_BY IS NULL and S.UPDATED_BY IS NULL)) and
		((T.VISUAL_MERCH_ID = S.VISUAL_MERCH_ID) or (T.VISUAL_MERCH_ID IS NULL and S.VISUAL_MERCH_ID IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_FOW_FRNG_MDL_STG913001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_FOW_FRNG_MDL_STG_IDX913001
on		RAX_APP_USER.I$_FOW_FRNG_MDL_STG913001 (ID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 15 */
/* Merge Rows */

merge into	ODS_STAGE_CA.FOW_OFFERING_MODEL_STG T
using	RAX_APP_USER.I$_FOW_FRNG_MDL_STG913001 S
on	(
		T.ID=S.ID
	)
when matched
then update set
	T.VERSION	= S.VERSION,
	T.ACTIVE	= S.ACTIVE,
	T.COMMISSION_MODEL_ID	= S.COMMISSION_MODEL_ID,
	T.CREATED_BY	= S.CREATED_BY,
	T.DATE_CREATED	= S.DATE_CREATED,
	T.ENVELOPE_ID	= S.ENVELOPE_ID,
	T.FLYER_ID	= S.FLYER_ID,
	T.INSERTS	= S.INSERTS,
	T.LAST_UPDATED	= S.LAST_UPDATED,
	T.NAME	= S.NAME,
	T.PRICE_PROGRAM_NAME	= S.PRICE_PROGRAM_NAME,
	T.TERRITORY	= S.TERRITORY,
	T.UPDATED_BY	= S.UPDATED_BY,
	T.VISUAL_MERCH_ID	= S.VISUAL_MERCH_ID
	,              T.ODS_MODIFY_DATE	= SYSDATE
when not matched
then insert
	(
	T.ID,
	T.VERSION,
	T.ACTIVE,
	T.COMMISSION_MODEL_ID,
	T.CREATED_BY,
	T.DATE_CREATED,
	T.ENVELOPE_ID,
	T.FLYER_ID,
	T.INSERTS,
	T.LAST_UPDATED,
	T.NAME,
	T.PRICE_PROGRAM_NAME,
	T.TERRITORY,
	T.UPDATED_BY,
	T.VISUAL_MERCH_ID
	,               T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.ID,
	S.VERSION,
	S.ACTIVE,
	S.COMMISSION_MODEL_ID,
	S.CREATED_BY,
	S.DATE_CREATED,
	S.ENVELOPE_ID,
	S.FLYER_ID,
	S.INSERTS,
	S.LAST_UPDATED,
	S.NAME,
	S.PRICE_PROGRAM_NAME,
	S.TERRITORY,
	S.UPDATED_BY,
	S.VISUAL_MERCH_ID
	,               SYSDATE,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 16 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 17 */
/* Drop flow table */

drop table RAX_APP_USER.I$_FOW_FRNG_MDL_STG913001 

&


/*-----------------------------------------------*/
/* TASK No. 1000008 */
/* Drop work table */

drop table RAX_APP_USER.C$_0FOW_FRNG_MDL_STG 

&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* insert into ODS_STAGE_CA.fow_offering_model_xr */

Insert into ODS_STAGE_CA.FOW_OFFERING_MODEL_XR 
( 
    Id,    
    Offering_MODEL_Oid,
    ODS_CREATE_DATE
) 
select
    Id,   
    ODS_STAGE_CA.FOW_OFFERING_MODEL_OID_SEQ.nextval,
    SYSDATE
FROM (  
 Select  
     T.Id    
 From
     ODS_STAGE_CA.Fow_Offering_Model_Stg T,
     ODS_STAGE_CA.FOW_OFFERING_MODEL_XR XR
 Where (1=1)
   And Trim(T.Id) = Trim(Xr.Id(+))    
   And Xr.Offering_Model_Oid Is Null   
   And T.ODS_MODIFY_DATE> TO_DATE(SUBSTR(:v_cdc_load_date,1,19),'YYYY-MM-DD HH24:MI:SS') - :v_cdc_oms_overlap
)    ODI_GET_FROM


&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* Drop flow table */

BEGIN  
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_OFFERING_MODEL';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -942 THEN  
         RAISE;  
      END IF;  
END;

&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_OFFERING_MODEL
(
	OFFERING_MODEL_OID		NUMBER NULL,
	PRICE_PROGRAM_OID		NUMBER NULL,
	VISUAL_MERCH_OID		NUMBER NULL,
	VERSION		NUMBER(19) NULL,
	ACTIVE		NUMBER(1) NULL,
	COMMISSION_MODEL_ID		NUMBER NULL,
	CREATED_BY		VARCHAR2(255) NULL,
	DATE_CREATED		DATE NULL,
	ENVELOPE_ID		VARCHAR2(255) NULL,
	FLYER_ID		VARCHAR2(255) NULL,
	INSERTS		VARCHAR2(255) NULL,
	LAST_UPDATED		DATE NULL,
	NAME		VARCHAR2(255) NULL,
	PRICE_PROGRAM_NAME		VARCHAR2(255) NULL,
	TERRITORY		VARCHAR2(255) NULL,
	UPDATED_BY		VARCHAR2(255) NULL,
	VISUAL_MERCH_ID		VARCHAR2(255) NULL,
	ODS_CREATE_DATE		DATE NULL,
	ODS_MODIFY_DATE		DATE NULL,
	SOURCE_SYSTEM_OID		NUMBER NULL,
	IND_UPDATE		CHAR(1)
)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_OFFERING_MODEL
(
	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	IND_UPDATE
)
select 
OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	IND_UPDATE
 from (


select 	 
	
	OFFERING_MODEL_XR.OFFERING_MODEL_OID OFFERING_MODEL_OID,
	PRICE_PROGRAM.PRICE_PROGRAM_OID PRICE_PROGRAM_OID,
	VISUAL_MERCH.VISUAL_MERCH_OID VISUAL_MERCH_OID,
	FOW_OFFERING_MODEL_STG.VERSION VERSION,
	FOW_OFFERING_MODEL_STG.ACTIVE ACTIVE,
	FOW_OFFERING_MODEL_STG.COMMISSION_MODEL_ID COMMISSION_MODEL_ID,
	FOW_OFFERING_MODEL_STG.CREATED_BY CREATED_BY,
	FOW_OFFERING_MODEL_STG.DATE_CREATED DATE_CREATED,
	FOW_OFFERING_MODEL_STG.ENVELOPE_ID ENVELOPE_ID,
	FOW_OFFERING_MODEL_STG.FLYER_ID FLYER_ID,
	FOW_OFFERING_MODEL_STG.INSERTS INSERTS,
	FOW_OFFERING_MODEL_STG.LAST_UPDATED LAST_UPDATED,
	FOW_OFFERING_MODEL_STG.NAME NAME,
	FOW_OFFERING_MODEL_STG.PRICE_PROGRAM_NAME PRICE_PROGRAM_NAME,
	FOW_OFFERING_MODEL_STG.TERRITORY TERRITORY,
	FOW_OFFERING_MODEL_STG.UPDATED_BY UPDATED_BY,
	FOW_OFFERING_MODEL_STG.VISUAL_MERCH_ID VISUAL_MERCH_ID,
	SYSDATE ODS_CREATE_DATE,
	SYSDATE ODS_MODIFY_DATE,
	SOURCE_SYSTEM.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,

	'I' IND_UPDATE

from	ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM, ODS_STAGE_CA.FOW_OFFERING_MODEL_STG   FOW_OFFERING_MODEL_STG, ODS_OWN.PRICE_PROGRAM   PRICE_PROGRAM, ODS_OWN.VISUAL_MERCH   VISUAL_MERCH, ODS_STAGE_CA.FOW_OFFERING_MODEL_XR   OFFERING_MODEL_XR
where	(1=1)
 And (FOW_OFFERING_MODEL_STG.ID=OFFERING_MODEL_XR.ID (+))
AND (FOW_OFFERING_MODEL_STG.PRICE_PROGRAM_NAME=PRICE_PROGRAM.PRICE_PROGRAM_NAME (+))
AND (FOW_OFFERING_MODEL_STG.VISUAL_MERCH_ID=VISUAL_MERCH.VISUAL_MERCH_ID)
And (SOURCE_SYSTEM.SOURCE_SYSTEM_SHORT_NAME='FOW')
 And (FOW_OFFERING_MODEL_STG.ODS_MODIFY_DATE >= ( TO_DATE(SUBSTR(:v_cdc_ld_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - :v_cdc_oms_overlap))




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.OFFERING_MODEL T
	where	T.OFFERING_MODEL_OID	= S.OFFERING_MODEL_OID 
		 and ((T.PRICE_PROGRAM_OID = S.PRICE_PROGRAM_OID) or (T.PRICE_PROGRAM_OID IS NULL and S.PRICE_PROGRAM_OID IS NULL)) and
		((T.VISUAL_MERCH_OID = S.VISUAL_MERCH_OID) or (T.VISUAL_MERCH_OID IS NULL and S.VISUAL_MERCH_OID IS NULL)) and
		((T.VERSION = S.VERSION) or (T.VERSION IS NULL and S.VERSION IS NULL)) and
		((T.ACTIVE = S.ACTIVE) or (T.ACTIVE IS NULL and S.ACTIVE IS NULL)) and
		((T.COMMISSION_MODEL_ID = S.COMMISSION_MODEL_ID) or (T.COMMISSION_MODEL_ID IS NULL and S.COMMISSION_MODEL_ID IS NULL)) and
		((T.CREATED_BY = S.CREATED_BY) or (T.CREATED_BY IS NULL and S.CREATED_BY IS NULL)) and
		((T.DATE_CREATED = S.DATE_CREATED) or (T.DATE_CREATED IS NULL and S.DATE_CREATED IS NULL)) and
		((T.ENVELOPE_ID = S.ENVELOPE_ID) or (T.ENVELOPE_ID IS NULL and S.ENVELOPE_ID IS NULL)) and
		((T.FLYER_ID = S.FLYER_ID) or (T.FLYER_ID IS NULL and S.FLYER_ID IS NULL)) and
		((T.INSERTS = S.INSERTS) or (T.INSERTS IS NULL and S.INSERTS IS NULL)) and
		((T.LAST_UPDATED = S.LAST_UPDATED) or (T.LAST_UPDATED IS NULL and S.LAST_UPDATED IS NULL)) and
		((T.NAME = S.NAME) or (T.NAME IS NULL and S.NAME IS NULL)) and
		((T.PRICE_PROGRAM_NAME = S.PRICE_PROGRAM_NAME) or (T.PRICE_PROGRAM_NAME IS NULL and S.PRICE_PROGRAM_NAME IS NULL)) and
		((T.TERRITORY = S.TERRITORY) or (T.TERRITORY IS NULL and S.TERRITORY IS NULL)) and
		((T.UPDATED_BY = S.UPDATED_BY) or (T.UPDATED_BY IS NULL and S.UPDATED_BY IS NULL)) and
		((T.VISUAL_MERCH_ID = S.VISUAL_MERCH_ID) or (T.VISUAL_MERCH_ID IS NULL and S.VISUAL_MERCH_ID IS NULL)) and
		((T.ODS_MODIFY_DATE = S.ODS_MODIFY_DATE) or (T.ODS_MODIFY_DATE IS NULL and S.ODS_MODIFY_DATE IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL))
        )

  
  

  

 


&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* Create Index on flow table */

create index	RAX_APP_USER.I$_OFFERING_MODEL_IDX
on		RAX_APP_USER.I$_OFFERING_MODEL (OFFERING_MODEL_OID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_OFFERING_MODEL',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* create check table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
						(
							CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
							SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
							RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
							FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
							ERR_TYPE		VARCHAR2(1 CHAR) NULL,
							ERR_MESS		VARCHAR2(250 CHAR) NULL ,
							CHECK_DATE	DATE NULL,
							ORIGIN		VARCHAR2(100 CHAR) NULL,
							CONS_NAME	VARCHAR2(35 CHAR) NULL,
							CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ERR_COUNT		NUMBER(10) NULL
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;
	

&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(1519001)ODS_Project.LOAD_FOW_OFFERING_MODEL_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 26 */
/* create error table */


BEGIN  
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_OFFERING_MODEL
						(
							ODI_ROW_ID 		UROWID,
							ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
							ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
							ODI_CHECK_DATE	DATE NULL, 
							OFFERING_MODEL_OID	NUMBER NULL,
							PRICE_PROGRAM_OID	NUMBER NULL,
							VISUAL_MERCH_OID	NUMBER NULL,
							VERSION	NUMBER(19) NULL,
							ACTIVE	NUMBER(1) NULL,
							COMMISSION_MODEL_ID	NUMBER NULL,
							CREATED_BY	VARCHAR2(255) NULL,
							DATE_CREATED	DATE NULL,
							ENVELOPE_ID	VARCHAR2(255) NULL,
							FLYER_ID	VARCHAR2(255) NULL,
							INSERTS	VARCHAR2(255) NULL,
							LAST_UPDATED	DATE NULL,
							NAME	VARCHAR2(255) NULL,
							PRICE_PROGRAM_NAME	VARCHAR2(255) NULL,
							TERRITORY	VARCHAR2(255) NULL,
							UPDATED_BY	VARCHAR2(255) NULL,
							VISUAL_MERCH_ID	VARCHAR2(255) NULL,
							ODS_CREATE_DATE	DATE NULL,
							ODS_MODIFY_DATE	DATE NULL,
							SOURCE_SYSTEM_OID	NUMBER NULL,
							ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
							ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
							ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
							ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
							ODI_SESS_NO		VARCHAR2(19 CHAR)
						)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;



&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_OFFERING_MODEL
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(1519001)ODS_Project.LOAD_FOW_OFFERING_MODEL_INT')


&


/*-----------------------------------------------*/
/* TASK No. 28 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.I$_OFFERING_MODEL_IDX on RAX_APP_USER.I$_OFFERING_MODEL (OFFERING_MODEL_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* insert PK errors */

insert into RAX_APP_USER.E$_OFFERING_MODEL
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15064: The primary key OFFERING_MODEL_PK is not unique.',
	'(1519001)ODS_Project.LOAD_FOW_OFFERING_MODEL_INT',
	sysdate,
	'OFFERING_MODEL_PK',
	'PK',	
	OFFERING_MODEL.OFFERING_MODEL_OID,
	OFFERING_MODEL.PRICE_PROGRAM_OID,
	OFFERING_MODEL.VISUAL_MERCH_OID,
	OFFERING_MODEL.VERSION,
	OFFERING_MODEL.ACTIVE,
	OFFERING_MODEL.COMMISSION_MODEL_ID,
	OFFERING_MODEL.CREATED_BY,
	OFFERING_MODEL.DATE_CREATED,
	OFFERING_MODEL.ENVELOPE_ID,
	OFFERING_MODEL.FLYER_ID,
	OFFERING_MODEL.INSERTS,
	OFFERING_MODEL.LAST_UPDATED,
	OFFERING_MODEL.NAME,
	OFFERING_MODEL.PRICE_PROGRAM_NAME,
	OFFERING_MODEL.TERRITORY,
	OFFERING_MODEL.UPDATED_BY,
	OFFERING_MODEL.VISUAL_MERCH_ID,
	OFFERING_MODEL.ODS_CREATE_DATE,
	OFFERING_MODEL.ODS_MODIFY_DATE,
	OFFERING_MODEL.SOURCE_SYSTEM_OID
from	RAX_APP_USER.I$_OFFERING_MODEL   OFFERING_MODEL
where	exists  (
		select	SUB.OFFERING_MODEL_OID
		from 	RAX_APP_USER.I$_OFFERING_MODEL SUB
		where 	SUB.OFFERING_MODEL_OID=OFFERING_MODEL.OFFERING_MODEL_OID
		group by 	SUB.OFFERING_MODEL_OID
		having 	count(1) > 1
		)



&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* Create index on AK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	OFFERING_MODEL_PKX_flow on RAX_APP_USER.I$_OFFERING_MODEL (OFFERING_MODEL_OID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 AND SQLCODE != -1408 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* insert AK errors */

insert into RAX_APP_USER.E$_OFFERING_MODEL
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15063: The alternate key OFFERING_MODEL_PKX is not unique.',
	'(1519001)ODS_Project.LOAD_FOW_OFFERING_MODEL_INT',
	sysdate,
	'OFFERING_MODEL_PKX',
	'AK',	
	OFFERING_MODEL.OFFERING_MODEL_OID,
	OFFERING_MODEL.PRICE_PROGRAM_OID,
	OFFERING_MODEL.VISUAL_MERCH_OID,
	OFFERING_MODEL.VERSION,
	OFFERING_MODEL.ACTIVE,
	OFFERING_MODEL.COMMISSION_MODEL_ID,
	OFFERING_MODEL.CREATED_BY,
	OFFERING_MODEL.DATE_CREATED,
	OFFERING_MODEL.ENVELOPE_ID,
	OFFERING_MODEL.FLYER_ID,
	OFFERING_MODEL.INSERTS,
	OFFERING_MODEL.LAST_UPDATED,
	OFFERING_MODEL.NAME,
	OFFERING_MODEL.PRICE_PROGRAM_NAME,
	OFFERING_MODEL.TERRITORY,
	OFFERING_MODEL.UPDATED_BY,
	OFFERING_MODEL.VISUAL_MERCH_ID,
	OFFERING_MODEL.ODS_CREATE_DATE,
	OFFERING_MODEL.ODS_MODIFY_DATE,
	OFFERING_MODEL.SOURCE_SYSTEM_OID
from	RAX_APP_USER.I$_OFFERING_MODEL   OFFERING_MODEL
where	exists  (
		select	SUB.OFFERING_MODEL_OID
		from 	RAX_APP_USER.I$_OFFERING_MODEL SUB
		where 	SUB.OFFERING_MODEL_OID=OFFERING_MODEL.OFFERING_MODEL_OID
		group by 	SUB.OFFERING_MODEL_OID
		having 	count(1) > 1
		)



&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_OFFERING_MODEL
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column OFFERING_MODEL_OID cannot be null.',
	sysdate,
	'(1519001)ODS_Project.LOAD_FOW_OFFERING_MODEL_INT',
	'OFFERING_MODEL_OID',
	'NN',	
	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
from	RAX_APP_USER.I$_OFFERING_MODEL
where	OFFERING_MODEL_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */
BEGIN  
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_OFFERING_MODEL_IDX on RAX_APP_USER.E$_OFFERING_MODEL (ODI_ROW_ID)';  
EXCEPTION  
   WHEN OTHERS THEN  
      IF SQLCODE != -955 THEN  
         RAISE;  
      END IF;  
END;


&


/*-----------------------------------------------*/
/* TASK No. 34 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_OFFERING_MODEL  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_OFFERING_MODEL E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 35 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'OFFERING_MODEL',
	'ODS_OWN.OFFERING_MODEL',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_OFFERING_MODEL E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(1519001)ODS_Project.LOAD_FOW_OFFERING_MODEL_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 36 */
/* Flag rows for update */

/* DETECTION_STRATEGY = NOT_EXISTS */


update	RAX_APP_USER.I$_OFFERING_MODEL
set	IND_UPDATE = 'U'
where	(OFFERING_MODEL_OID)
	in	(
		select	OFFERING_MODEL_OID
		from	ODS_OWN.OFFERING_MODEL
		)



&


/*-----------------------------------------------*/
/* TASK No. 37 */
/* Flag useless rows */

/* DETECTION_STRATEGY = NOT_EXISTS */

/* Command skipped due to chosen DETECTION_STRATEGY */



/*-----------------------------------------------*/
/* TASK No. 38 */
/* Update existing rows */

/* DETECTION_STRATEGY = NOT_EXISTS */
update	ODS_OWN.OFFERING_MODEL T
set 	
	(
	T.PRICE_PROGRAM_OID,
	T.VISUAL_MERCH_OID,
	T.VERSION,
	T.ACTIVE,
	T.COMMISSION_MODEL_ID,
	T.CREATED_BY,
	T.DATE_CREATED,
	T.ENVELOPE_ID,
	T.FLYER_ID,
	T.INSERTS,
	T.LAST_UPDATED,
	T.NAME,
	T.PRICE_PROGRAM_NAME,
	T.TERRITORY,
	T.UPDATED_BY,
	T.VISUAL_MERCH_ID,
	T.ODS_MODIFY_DATE,
	T.SOURCE_SYSTEM_OID
	) =
		(
		select	S.PRICE_PROGRAM_OID,
			S.VISUAL_MERCH_OID,
			S.VERSION,
			S.ACTIVE,
			S.COMMISSION_MODEL_ID,
			S.CREATED_BY,
			S.DATE_CREATED,
			S.ENVELOPE_ID,
			S.FLYER_ID,
			S.INSERTS,
			S.LAST_UPDATED,
			S.NAME,
			S.PRICE_PROGRAM_NAME,
			S.TERRITORY,
			S.UPDATED_BY,
			S.VISUAL_MERCH_ID,
			S.ODS_MODIFY_DATE,
			S.SOURCE_SYSTEM_OID
		from	RAX_APP_USER.I$_OFFERING_MODEL S
		where	T.OFFERING_MODEL_OID	=S.OFFERING_MODEL_OID
	    	 )
	

where	(OFFERING_MODEL_OID)
	in	(
		select	OFFERING_MODEL_OID
		from	RAX_APP_USER.I$_OFFERING_MODEL
		where	IND_UPDATE = 'U'
		)




&


/*-----------------------------------------------*/
/* TASK No. 39 */
/* Insert new rows */

/* DETECTION_STRATEGY = NOT_EXISTS */
insert into 	ODS_OWN.OFFERING_MODEL T
	(
	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
	
	)
select 	OFFERING_MODEL_OID,
	PRICE_PROGRAM_OID,
	VISUAL_MERCH_OID,
	VERSION,
	ACTIVE,
	COMMISSION_MODEL_ID,
	CREATED_BY,
	DATE_CREATED,
	ENVELOPE_ID,
	FLYER_ID,
	INSERTS,
	LAST_UPDATED,
	NAME,
	PRICE_PROGRAM_NAME,
	TERRITORY,
	UPDATED_BY,
	VISUAL_MERCH_ID,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID
	
from	RAX_APP_USER.I$_OFFERING_MODEL S



where	IND_UPDATE = 'I'



&


/*-----------------------------------------------*/
/* TASK No. 40 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 41 */
/* Drop flow table */

drop table RAX_APP_USER.I$_OFFERING_MODEL 

&


/*-----------------------------------------------*/
/* TASK No. 42 */
/* Update CDC Load Status */

/*
UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
+ nvl((TIMEZONE_OFFSET/24), 0) 
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env
*/

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

&


/*-----------------------------------------------*/
/* TASK No. 43 */
/* Insert CDC Audit Record */

/*
INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME,
TIMEZONE_OFFSET              
)
select 
:v_cdc_load_table_name
,:v_sess_no
,'LOAD_FOW_OFFERING_MODEL_PKG'
,'002'
,TO_DATE(SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
,TO_DATE (SUBSTR(:v_cdc_load_date, 1, 19),'YYYY-MM-DD HH24:MI:SS')
,:v_cdc_overlap
,SYSDATE
,:v_env
,TIMEZONE_OFFSET
from 
ODS_OWN.ODS_CDC_LOAD_STATUS
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

*/


INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME              
)
values (
:v_cdc_load_table_name,
:v_sess_no,
'LOAD_FOW_OFFERING_MODEL_PKG',
'002',
TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS'),
TO_DATE (SUBSTR (:v_cdc_load_date, 1, 19),
                           'YYYY-MM-DD HH24:MI:SS'
                          )
,:v_cdc_overlap,
SYSDATE,
 :v_env)


&


/*-----------------------------------------------*/
