/* TASK No. 1 */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 1 */




/*-----------------------------------------------*/
/* TASK No. 2 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 2 */




/*-----------------------------------------------*/
/* TASK No. 3 */

/* SELECT STATEMENT FOUND, CHECK ODI TASK NO. 3 */




/*-----------------------------------------------*/
/* TASK No. 4 */
/* Repair ORDER_HEADER_OID */

merge into RAX_APP_USER.E$_LT_FULFILL_BATCH2260001 c 
using (
select c.order_batch_oid,ODI_PK         
from 
E$_LT_FULFILL_BATCH2260001 a, 
ODS_STAGE.OMS_LT_FULFILLMENT_BATCH_XR b, 
ODS_OWN.ORDER_BATCH c
where (1=1) 
and a.fulfillment_batch_oid = b.fulfillment_batch_oid 
and b.oms_order_batch_id = c.batch_id(+)
and c.order_batch_oid <> nvl(a.order_batch_oid,-1)
) s on (c.ODI_PK = s.ODI_PK)
when matched then update
set 
c.order_batch_oid = s.order_batch_oid

&


/*-----------------------------------------------*/
/* TASK No. 5 */
/* Drop work table */

-- drop table RAX_APP_USER.C$_0LT_FULFILL_BATCH_STG purge

-- &


-- /*-----------------------------------------------*/
-- /* TASK No. 6 */
-- /* Create work table */

-- create table RAX_APP_USER.C$_0LT_FULFILL_BATCH_STG
-- (
-- 	C1_FULFILLMENT_BATCH_KEY	VARCHAR2(24) NULL,
-- 	C2_BATCH_ID	VARCHAR2(40) NULL,
-- 	C3_AVAILABLE_DATE	DATE NULL,
-- 	C4_STATUS	VARCHAR2(40) NULL,
-- 	C5_PACK_LIST_TYPE	VARCHAR2(20) NULL,
-- 	C6_RETOUCHING_FLAG	VARCHAR2(5) NULL,
-- 	C7_CREATETS	DATE NULL,
-- 	C8_MODIFYTS	DATE NULL,
-- 	C9_CREATEUSERID	VARCHAR2(40) NULL,
-- 	C10_MODIFYUSERID	VARCHAR2(40) NULL,
-- 	C11_CREATEPROGID	VARCHAR2(40) NULL,
-- 	C12_MODIFYPROGID	VARCHAR2(40) NULL,
-- 	C13_LOCKID	NUMBER(5) NULL,
-- 	C14_ORDER_COUNT_BOC	NUMBER(5) NULL,
-- 	C15_SHIP_NODE	CHAR(24) NULL,
-- 	C16_BOC_BATCH_CREATETS	DATE NULL,
-- 	C17_SERVICE_RECOVERY	VARCHAR2(40) NULL,
-- 	C18_BATCH_TYPE	VARCHAR2(20) NULL
-- )
-- NOLOGGING

-- &


/*-----------------------------------------------*/
/* TASK No. 7 */
/* Load data */

/* SOURCE CODE */


-- select	
-- 	LT_FULFILLMENT_BATCH.FULFILLMENT_BATCH_KEY	   C1_FULFILLMENT_BATCH_KEY,
-- 	LT_FULFILLMENT_BATCH.BATCH_ID	   C2_BATCH_ID,
-- 	LT_FULFILLMENT_BATCH.AVAILABLE_DATE	   C3_AVAILABLE_DATE,
-- 	LT_FULFILLMENT_BATCH.STATUS	   C4_STATUS,
-- 	LT_FULFILLMENT_BATCH.PACK_LIST_TYPE	   C5_PACK_LIST_TYPE,
-- 	LT_FULFILLMENT_BATCH.RETOUCHING_FLAG	   C6_RETOUCHING_FLAG,
-- 	LT_FULFILLMENT_BATCH.CREATETS	   C7_CREATETS,
-- 	LT_FULFILLMENT_BATCH.MODIFYTS	   C8_MODIFYTS,
-- 	LT_FULFILLMENT_BATCH.CREATEUSERID	   C9_CREATEUSERID,
-- 	LT_FULFILLMENT_BATCH.MODIFYUSERID	   C10_MODIFYUSERID,
-- 	LT_FULFILLMENT_BATCH.CREATEPROGID	   C11_CREATEPROGID,
-- 	LT_FULFILLMENT_BATCH.MODIFYPROGID	   C12_MODIFYPROGID,
-- 	LT_FULFILLMENT_BATCH.LOCKID	   C13_LOCKID,
-- 	LT_FULFILLMENT_BATCH.ORDER_COUNT_BOC	   C14_ORDER_COUNT_BOC,
-- 	LT_FULFILLMENT_BATCH.SHIP_NODE	   C15_SHIP_NODE,
-- 	LT_FULFILLMENT_BATCH.BOC_BATCH_CREATETS	   C16_BOC_BATCH_CREATETS,
-- 	LT_FULFILLMENT_BATCH.SERVICE_RECOVERY	   C17_SERVICE_RECOVERY,
-- 	LT_FULFILLMENT_BATCH.BATCH_TYPE	   C18_BATCH_TYPE
-- from	OMS3_OWN.LT_FULFILLMENT_BATCH   LT_FULFILLMENT_BATCH
-- where	(1=1)
-- And (LT_FULFILLMENT_BATCH.MODIFYTS >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - :v_cdc_oms_overlap)







-- &

/* TARGET CODE */
-- insert /*+ append */ into RAX_APP_USER.C$_0LT_FULFILL_BATCH_STG
-- (
-- 	C1_FULFILLMENT_BATCH_KEY,
-- 	C2_BATCH_ID,
-- 	C3_AVAILABLE_DATE,
-- 	C4_STATUS,
-- 	C5_PACK_LIST_TYPE,
-- 	C6_RETOUCHING_FLAG,
-- 	C7_CREATETS,
-- 	C8_MODIFYTS,
-- 	C9_CREATEUSERID,
-- 	C10_MODIFYUSERID,
-- 	C11_CREATEPROGID,
-- 	C12_MODIFYPROGID,
-- 	C13_LOCKID,
-- 	C14_ORDER_COUNT_BOC,
-- 	C15_SHIP_NODE,
-- 	C16_BOC_BATCH_CREATETS,
-- 	C17_SERVICE_RECOVERY,
-- 	C18_BATCH_TYPE
-- )
-- values
-- (
-- 	:C1_FULFILLMENT_BATCH_KEY,
-- 	:C2_BATCH_ID,
-- 	:C3_AVAILABLE_DATE,
-- 	:C4_STATUS,
-- 	:C5_PACK_LIST_TYPE,
-- 	:C6_RETOUCHING_FLAG,
-- 	:C7_CREATETS,
-- 	:C8_MODIFYTS,
-- 	:C9_CREATEUSERID,
-- 	:C10_MODIFYUSERID,
-- 	:C11_CREATEPROGID,
-- 	:C12_MODIFYPROGID,
-- 	:C13_LOCKID,
-- 	:C14_ORDER_COUNT_BOC,
-- 	:C15_SHIP_NODE,
-- 	:C16_BOC_BATCH_CREATETS,
-- 	:C17_SERVICE_RECOVERY,
-- 	:C18_BATCH_TYPE
-- )

-- &


/*-----------------------------------------------*/
/* TASK No. 8 */
/* Analyze work table */



BEGIN
DBMS_STATS.GATHER_TABLE_STATS (
    ownname =>	'RAX_APP_USER',
    tabname =>	'C$_0LT_FULFILL_BATCH_STG',
    estimate_percent =>	DBMS_STATS.AUTO_SAMPLE_SIZE
);
END;




&


/*-----------------------------------------------*/
/* TASK No. 10 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 10 */




/*-----------------------------------------------*/
/* TASK No. 11 */
/* Drop flow table */
 
BEGIN
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 12 */
/* Create flow table I$ */

create table RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001
(
	FULFILLMENT_BATCH_KEY	VARCHAR2(24) NULL,
	BATCH_ID	VARCHAR2(40) NULL,
	AVAILABLE_DATE	DATE NULL,
	STATUS	VARCHAR2(40) NULL,
	PACK_LIST_TYPE	VARCHAR2(20) NULL,
	RETOUCHING_FLAG	VARCHAR2(5) NULL,
	CREATETS	DATE NULL,
	MODIFYTS	DATE NULL,
	CREATEUSERID	VARCHAR2(40) NULL,
	MODIFYUSERID	VARCHAR2(40) NULL,
	CREATEPROGID	VARCHAR2(40) NULL,
	MODIFYPROGID	VARCHAR2(40) NULL,
	LOCKID	NUMBER(5) NULL,
	ORDER_COUNT_BOC	NUMBER(5) NULL,
	SHIP_NODE	CHAR(24) NULL,
	BOC_BATCH_CREATETS	DATE NULL,
	SERVICE_RECOVERY	VARCHAR2(40) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	BATCH_TYPE	VARCHAR2(20) NULL
	,IND_UPDATE		char(1)
)
NOLOGGING


&


/*-----------------------------------------------*/
/* TASK No. 13 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001
(
	FULFILLMENT_BATCH_KEY,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	CREATETS,
	MODIFYTS,
	CREATEUSERID,
	MODIFYUSERID,
	CREATEPROGID,
	MODIFYPROGID,
	LOCKID,
	ORDER_COUNT_BOC,
	SHIP_NODE,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	BATCH_TYPE,
	IND_UPDATE
)
select 
FULFILLMENT_BATCH_KEY,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	CREATETS,
	MODIFYTS,
	CREATEUSERID,
	MODIFYUSERID,
	CREATEPROGID,
	MODIFYPROGID,
	LOCKID,
	ORDER_COUNT_BOC,
	SHIP_NODE,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	BATCH_TYPE,
	IND_UPDATE
 from (


select 	 
	
	C1_FULFILLMENT_BATCH_KEY FULFILLMENT_BATCH_KEY,
	C2_BATCH_ID BATCH_ID,
	C3_AVAILABLE_DATE AVAILABLE_DATE,
	C4_STATUS STATUS,
	C5_PACK_LIST_TYPE PACK_LIST_TYPE,
	C6_RETOUCHING_FLAG RETOUCHING_FLAG,
	C7_CREATETS CREATETS,
	C8_MODIFYTS MODIFYTS,
	C9_CREATEUSERID CREATEUSERID,
	C10_MODIFYUSERID MODIFYUSERID,
	C11_CREATEPROGID CREATEPROGID,
	C12_MODIFYPROGID MODIFYPROGID,
	C13_LOCKID LOCKID,
	C14_ORDER_COUNT_BOC ORDER_COUNT_BOC,
	C15_SHIP_NODE SHIP_NODE,
	C16_BOC_BATCH_CREATETS BOC_BATCH_CREATETS,
	C17_SERVICE_RECOVERY SERVICE_RECOVERY,
	C18_BATCH_TYPE BATCH_TYPE,

	'I' IND_UPDATE

from	RAX_APP_USER.C$_0LT_FULFILL_BATCH_STG
where	(1=1)






) S
where NOT EXISTS 
	( select 1 from ODS_STAGE.OMS3_LT_FULFILLMENT_BATCH_STG T
	where	T.FULFILLMENT_BATCH_KEY	= S.FULFILLMENT_BATCH_KEY 
		 and ((T.BATCH_ID = S.BATCH_ID) or (T.BATCH_ID IS NULL and S.BATCH_ID IS NULL)) and
		((T.AVAILABLE_DATE = S.AVAILABLE_DATE) or (T.AVAILABLE_DATE IS NULL and S.AVAILABLE_DATE IS NULL)) and
		((T.STATUS = S.STATUS) or (T.STATUS IS NULL and S.STATUS IS NULL)) and
		((T.PACK_LIST_TYPE = S.PACK_LIST_TYPE) or (T.PACK_LIST_TYPE IS NULL and S.PACK_LIST_TYPE IS NULL)) and
		((T.RETOUCHING_FLAG = S.RETOUCHING_FLAG) or (T.RETOUCHING_FLAG IS NULL and S.RETOUCHING_FLAG IS NULL)) and
		((T.CREATETS = S.CREATETS) or (T.CREATETS IS NULL and S.CREATETS IS NULL)) and
		((T.MODIFYTS = S.MODIFYTS) or (T.MODIFYTS IS NULL and S.MODIFYTS IS NULL)) and
		((T.CREATEUSERID = S.CREATEUSERID) or (T.CREATEUSERID IS NULL and S.CREATEUSERID IS NULL)) and
		((T.MODIFYUSERID = S.MODIFYUSERID) or (T.MODIFYUSERID IS NULL and S.MODIFYUSERID IS NULL)) and
		((T.CREATEPROGID = S.CREATEPROGID) or (T.CREATEPROGID IS NULL and S.CREATEPROGID IS NULL)) and
		((T.MODIFYPROGID = S.MODIFYPROGID) or (T.MODIFYPROGID IS NULL and S.MODIFYPROGID IS NULL)) and
		((T.LOCKID = S.LOCKID) or (T.LOCKID IS NULL and S.LOCKID IS NULL)) and
		((T.ORDER_COUNT_BOC = S.ORDER_COUNT_BOC) or (T.ORDER_COUNT_BOC IS NULL and S.ORDER_COUNT_BOC IS NULL)) and
		((T.SHIP_NODE = S.SHIP_NODE) or (T.SHIP_NODE IS NULL and S.SHIP_NODE IS NULL)) and
		((T.BOC_BATCH_CREATETS = S.BOC_BATCH_CREATETS) or (T.BOC_BATCH_CREATETS IS NULL and S.BOC_BATCH_CREATETS IS NULL)) and
		((T.SERVICE_RECOVERY = S.SERVICE_RECOVERY) or (T.SERVICE_RECOVERY IS NULL and S.SERVICE_RECOVERY IS NULL)) and
		((T.BATCH_TYPE = S.BATCH_TYPE) or (T.BATCH_TYPE IS NULL and S.BATCH_TYPE IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 14 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_LT_FULFILL_BATCH_STG2258001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 15 */
/* Create Index on flow table */

/*important note*/
/* Changed the name of the index because (ORA-00972: identifier is too long) */
/* Changed from "I$_LT_FULFILL_BATCH_STG_IDX2258001" to "I$_LT_FULFILL_BATCH_STG_IDX" */
BEGIN
   EXECUTE IMMEDIATE 'create index	RAX_APP_USER.I$_LT_FULFILL_BATCH_STG_IDX
on		RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001 (FULFILLMENT_BATCH_KEY)
NOLOGGING';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -972 AND SQLCODE != -1418 AND SQLCODE != -1408 AND SQLCODE != -955 THEN
         RAISE;
      END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 16 */
/* create check table */



BEGIN
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
(
	CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
	SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
	RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
	FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
	ERR_TYPE		VARCHAR2(1 CHAR) NULL,
	ERR_MESS		VARCHAR2(250 CHAR) NULL ,
	CHECK_DATE	DATE NULL,
	ORIGIN		VARCHAR2(100 CHAR) NULL,
	CONS_NAME	VARCHAR2(35 CHAR) NULL,
	CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ERR_COUNT		NUMBER(10) NULL
)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -955 THEN
         RAISE;
      END IF;
END;
	

&


/*-----------------------------------------------*/
/* TASK No. 17 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_STAGE'
and	ORIGIN 		= '(2258001)ODS_Project.LOAD_OMS3_LT_FULFILLMENT_BATCH_STG_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 18 */
/* create error table */




BEGIN
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001
(
	ODI_ROW_ID 		UROWID,
	ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
	ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
	ODI_CHECK_DATE	DATE NULL, 
	FULFILLMENT_BATCH_KEY	VARCHAR2(24) NULL,
	BATCH_ID	VARCHAR2(40) NULL,
	AVAILABLE_DATE	DATE NULL,
	STATUS	VARCHAR2(40) NULL,
	PACK_LIST_TYPE	VARCHAR2(20) NULL,
	RETOUCHING_FLAG	VARCHAR2(5) NULL,
	CREATETS	DATE NULL,
	MODIFYTS	DATE NULL,
	CREATEUSERID	VARCHAR2(40) NULL,
	MODIFYUSERID	VARCHAR2(40) NULL,
	CREATEPROGID	VARCHAR2(40) NULL,
	MODIFYPROGID	VARCHAR2(40) NULL,
	LOCKID	NUMBER(5) NULL,
	ORDER_COUNT_BOC	NUMBER(5) NULL,
	SHIP_NODE	CHAR(24) NULL,
	BOC_BATCH_CREATETS	DATE NULL,
	SERVICE_RECOVERY	VARCHAR2(40) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	BATCH_TYPE	VARCHAR2(20) NULL,
	ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
	ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
	ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
	ODI_SESS_NO		VARCHAR2(19 CHAR)
	)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -955 THEN
         RAISE;
      END IF;
END;




&


/*-----------------------------------------------*/
/* TASK No. 19 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(2258001)ODS_Project.LOAD_OMS3_LT_FULFILLMENT_BATCH_STG_INT')


&


/*-----------------------------------------------*/
/* TASK No. 20 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	FULFILLMENT_BATCH_KEY,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	CREATETS,
	MODIFYTS,
	CREATEUSERID,
	MODIFYUSERID,
	CREATEPROGID,
	MODIFYPROGID,
	LOCKID,
	ORDER_COUNT_BOC,
	SHIP_NODE,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	BATCH_TYPE
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column FULFILLMENT_BATCH_KEY cannot be null.',
	sysdate,
	'(2258001)ODS_Project.LOAD_OMS3_LT_FULFILLMENT_BATCH_STG_INT',
	'FULFILLMENT_BATCH_KEY',
	'NN',	
	FULFILLMENT_BATCH_KEY,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	CREATETS,
	MODIFYTS,
	CREATEUSERID,
	MODIFYUSERID,
	CREATEPROGID,
	MODIFYPROGID,
	LOCKID,
	ORDER_COUNT_BOC,
	SHIP_NODE,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	BATCH_TYPE
from	RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001
where	FULFILLMENT_BATCH_KEY is null



&


/*-----------------------------------------------*/
/* TASK No. 21 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */

BEGIN
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001
on	RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001 (ODI_ROW_ID)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -972 AND SQLCODE != -1418 AND SQLCODE != -1408 AND SQLCODE != -955 THEN
         RAISE;
      END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 22 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)


&


/*-----------------------------------------------*/
/* TASK No. 23 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_STAGE',
	'LT_FULFILL_BATCH_STG',
	'ODS_STAGE.OMS3_LT_FULFILLMENT_BATCH_STG2258001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_LT_FULFILL_BATCH_STG2258001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(2258001)ODS_Project.LOAD_OMS3_LT_FULFILLMENT_BATCH_STG_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 24 */
/* Merge Rows */

merge into	ODS_STAGE.OMS3_LT_FULFILLMENT_BATCH_STG T
using	RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001 S
on	(
		T.FULFILLMENT_BATCH_KEY=S.FULFILLMENT_BATCH_KEY
	)
when matched
then update set
	T.BATCH_ID	= S.BATCH_ID,
	T.AVAILABLE_DATE	= S.AVAILABLE_DATE,
	T.STATUS	= S.STATUS,
	T.PACK_LIST_TYPE	= S.PACK_LIST_TYPE,
	T.RETOUCHING_FLAG	= S.RETOUCHING_FLAG,
	T.CREATETS	= S.CREATETS,
	T.MODIFYTS	= S.MODIFYTS,
	T.CREATEUSERID	= S.CREATEUSERID,
	T.MODIFYUSERID	= S.MODIFYUSERID,
	T.CREATEPROGID	= S.CREATEPROGID,
	T.MODIFYPROGID	= S.MODIFYPROGID,
	T.LOCKID	= S.LOCKID,
	T.ORDER_COUNT_BOC	= S.ORDER_COUNT_BOC,
	T.SHIP_NODE	= S.SHIP_NODE,
	T.BOC_BATCH_CREATETS	= S.BOC_BATCH_CREATETS,
	T.SERVICE_RECOVERY	= S.SERVICE_RECOVERY,
	T.BATCH_TYPE	= S.BATCH_TYPE
	,                 T.ODS_MODIFY_DATE	= SYSDATE
when not matched
then insert
	(
	T.FULFILLMENT_BATCH_KEY,
	T.BATCH_ID,
	T.AVAILABLE_DATE,
	T.STATUS,
	T.PACK_LIST_TYPE,
	T.RETOUCHING_FLAG,
	T.CREATETS,
	T.MODIFYTS,
	T.CREATEUSERID,
	T.MODIFYUSERID,
	T.CREATEPROGID,
	T.MODIFYPROGID,
	T.LOCKID,
	T.ORDER_COUNT_BOC,
	T.SHIP_NODE,
	T.BOC_BATCH_CREATETS,
	T.SERVICE_RECOVERY,
	T.BATCH_TYPE
	,                  T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.FULFILLMENT_BATCH_KEY,
	S.BATCH_ID,
	S.AVAILABLE_DATE,
	S.STATUS,
	S.PACK_LIST_TYPE,
	S.RETOUCHING_FLAG,
	S.CREATETS,
	S.MODIFYTS,
	S.CREATEUSERID,
	S.MODIFYUSERID,
	S.CREATEPROGID,
	S.MODIFYPROGID,
	S.LOCKID,
	S.ORDER_COUNT_BOC,
	S.SHIP_NODE,
	S.BOC_BATCH_CREATETS,
	S.SERVICE_RECOVERY,
	S.BATCH_TYPE
	,                  SYSDATE,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 25 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 26 */
/* Drop flow table */

 
drop table RAX_APP_USER.I$_LT_FULFILL_BATCH_STG2258001

&


/*-----------------------------------------------*/
/* TASK No. 1000009 */
/* Drop work table */


BEGIN
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.C$_0LT_FULFILL_BATCH_STG purge';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;

&


/*-----------------------------------------------*/
/* TASK No. 27 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 27 */




/*-----------------------------------------------*/
/* TASK No. 28 */
/* Drop flow table */


BEGIN
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_LT_FULFILL_BATCH_XR2259001';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END; 

&


/*-----------------------------------------------*/
/* TASK No. 29 */
/* Create flow table I$ */


create table RAX_APP_USER.I$_LT_FULFILL_BATCH_XR2259001
(
	FULFILLMENT_BATCH_OID	NUMBER NULL,
	FULFILLMENT_BATCH_KEY	VARCHAR2(24) NULL,
	OMS_ORDER_BATCH_ID	VARCHAR2(255) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL
	,IND_UPDATE		char(1)
)
NOLOGGING


&


/*-----------------------------------------------*/
/* TASK No. 30 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_LT_FULFILL_BATCH_XR2259001
(
	FULFILLMENT_BATCH_KEY,
	OMS_ORDER_BATCH_ID,
	IND_UPDATE
)
select 
FULFILLMENT_BATCH_KEY,
	OMS_ORDER_BATCH_ID,
	IND_UPDATE
 from (


select 	 
	
	TRIM(LT_FULFILLMENT_BATCH_STG.FULFILLMENT_BATCH_KEY) FULFILLMENT_BATCH_KEY,
	LT_FULFILLMENT_BATCH_STG.BATCH_ID OMS_ORDER_BATCH_ID,

	'I' IND_UPDATE

from	ODS_STAGE.OMS_LT_FULFILLMENT_BATCH_XR   OMS_LT_FULFILLMENT_BATCH_XR, ODS_STAGE.OMS3_LT_FULFILLMENT_BATCH_STG   LT_FULFILLMENT_BATCH_STG
where	(1=1)
 And (TRIM(LT_FULFILLMENT_BATCH_STG.FULFILLMENT_BATCH_KEY)= OMS_LT_FULFILLMENT_BATCH_XR.FULFILLMENT_BATCH_KEY(+)
AND OMS_LT_FULFILLMENT_BATCH_XR.FULFILLMENT_BATCH_KEY IS NULL)
And (LT_FULFILLMENT_BATCH_STG.MODIFYTS >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - :v_cdc_oms_overlap)




) S
where NOT EXISTS 
	( select 1 from ODS_STAGE.OMS_LT_FULFILLMENT_BATCH_XR T
	where	T.FULFILLMENT_BATCH_KEY	= S.FULFILLMENT_BATCH_KEY 
		 and ((T.OMS_ORDER_BATCH_ID = S.OMS_ORDER_BATCH_ID) or (T.OMS_ORDER_BATCH_ID IS NULL and S.OMS_ORDER_BATCH_ID IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 31 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_LT_FULFILL_BATCH_XR2259001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 32 */
/* Create Index on flow table */


/*important note*/
/* Changed the name of the index because (ORA-00972: identifier is too long) */
/*Changed from "I$_LT_FULFILL_BATCH_XR_IDX2259001" to "I$_LT_FULFILL_BATCH_XR_IDX"*/

BEGIN
   EXECUTE IMMEDIATE 'create index	RAX_APP_USER.I$_LT_FULFILL_BATCH_XR_IDX
on		RAX_APP_USER.I$_LT_FULFILL_BATCH_XR2259001 (FULFILLMENT_BATCH_KEY)
NOLOGGING';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -972 AND SQLCODE != -1418 AND SQLCODE != -1408 AND SQLCODE != -955 THEN
         RAISE;
      END IF;
END;
&


/*-----------------------------------------------*/
/* TASK No. 33 */
/* Merge Rows */

merge into	ODS_STAGE.OMS_LT_FULFILLMENT_BATCH_XR T
using	RAX_APP_USER.I$_LT_FULFILL_BATCH_XR2259001 S
on	(
		T.FULFILLMENT_BATCH_KEY=S.FULFILLMENT_BATCH_KEY
	)
when matched
then update set
	T.OMS_ORDER_BATCH_ID	= S.OMS_ORDER_BATCH_ID
	, T.ODS_MODIFY_DATE	= SYSDATE
when not matched
then insert
	(
	T.FULFILLMENT_BATCH_KEY,
	T.OMS_ORDER_BATCH_ID
	,  T.FULFILLMENT_BATCH_OID,
	T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE
	)
values
	(
	S.FULFILLMENT_BATCH_KEY,
	S.OMS_ORDER_BATCH_ID
	,  ODS_STAGE.FULFILLMENT_BATCH_OID_SEQ.nextval

,
	SYSDATE,
	SYSDATE
	)

&


/*-----------------------------------------------*/
/* TASK No. 34 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 35 */
/* Drop flow table */

drop table RAX_APP_USER.I$_LT_FULFILL_BATCH_XR2259001


&


/*-----------------------------------------------*/
/* TASK No. 36 */
/* Set vID */

/* NONE or SET VARIABLE STATEMENT FOUND, CHECK ODI TASK NO. 36 */




/*-----------------------------------------------*/
/* TASK No. 37 */
/* Drop flow table */


BEGIN
   EXECUTE IMMEDIATE 'drop table RAX_APP_USER.I$_LT_FULFILL_BATCH2260001';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END; 

&


/*-----------------------------------------------*/
/* TASK No. 38 */
/* Create flow table I$ */


create table RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
(
	FULFILLMENT_BATCH_OID	NUMBER NULL,
	ORDER_BATCH_OID	NUMBER NULL,
	SHIP_NODE	VARCHAR2(24) NULL,
	BATCH_ID	VARCHAR2(40) NULL,
	AVAILABLE_DATE	DATE NULL,
	STATUS	VARCHAR2(40) NULL,
	PACK_LIST_TYPE	VARCHAR2(20) NULL,
	RETOUCHING_FLAG	VARCHAR2(5) NULL,
	MODIFYTS	DATE NULL,
	MODIFYPROGID	VARCHAR2(40) NULL,
	ORDER_COUNT_BOC	NUMBER(5) NULL,
	BOC_BATCH_CREATETS	DATE NULL,
	SERVICE_RECOVERY	VARCHAR2(40) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	BATCH_TYPE	VARCHAR2(20) NULL
	,IND_UPDATE		char(1)
)
NOLOGGING


&


/*-----------------------------------------------*/
/* TASK No. 39 */
/* Insert flow into I$ table */

/* DETECTION_STRATEGY = NOT_EXISTS */
 


  


insert into	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
(
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE,
	IND_UPDATE
)
select 
FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE,
	IND_UPDATE
 from (


select 	 
	
	OMS_LT_FULFILLMENT_BATCH_XR.FULFILLMENT_BATCH_OID FULFILLMENT_BATCH_OID,
	ORDER_BATCH.ORDER_BATCH_OID ORDER_BATCH_OID,
	LT_FULFILLMENT_BATCH_STG.SHIP_NODE SHIP_NODE,
	LT_FULFILLMENT_BATCH_STG.BATCH_ID BATCH_ID,
	LT_FULFILLMENT_BATCH_STG.AVAILABLE_DATE AVAILABLE_DATE,
	LT_FULFILLMENT_BATCH_STG.STATUS STATUS,
	LT_FULFILLMENT_BATCH_STG.PACK_LIST_TYPE PACK_LIST_TYPE,
	LT_FULFILLMENT_BATCH_STG.RETOUCHING_FLAG RETOUCHING_FLAG,
	LT_FULFILLMENT_BATCH_STG.MODIFYTS MODIFYTS,
	LT_FULFILLMENT_BATCH_STG.MODIFYPROGID MODIFYPROGID,
	LT_FULFILLMENT_BATCH_STG.ORDER_COUNT_BOC ORDER_COUNT_BOC,
	LT_FULFILLMENT_BATCH_STG.BOC_BATCH_CREATETS BOC_BATCH_CREATETS,
	LT_FULFILLMENT_BATCH_STG.SERVICE_RECOVERY SERVICE_RECOVERY,
	SYSDATE ODS_CREATE_DATE,
	SYSDATE ODS_MODIFY_DATE,
	SOURCE_SYSTEM.SOURCE_SYSTEM_OID SOURCE_SYSTEM_OID,
	LT_FULFILLMENT_BATCH_STG.BATCH_TYPE BATCH_TYPE,

	'I' IND_UPDATE

from	ODS_STAGE.OMS3_LT_FULFILLMENT_BATCH_STG   LT_FULFILLMENT_BATCH_STG, ODS_OWN.SOURCE_SYSTEM   SOURCE_SYSTEM, ODS_STAGE.OMS_LT_FULFILLMENT_BATCH_XR   OMS_LT_FULFILLMENT_BATCH_XR, ODS_OWN.ORDER_BATCH   ORDER_BATCH
where	(1=1)
 And (TRIM(LT_FULFILLMENT_BATCH_STG.FULFILLMENT_BATCH_KEY)=OMS_LT_FULFILLMENT_BATCH_XR.FULFILLMENT_BATCH_KEY (+))
AND (LT_FULFILLMENT_BATCH_STG.BATCH_ID=ORDER_BATCH.BATCH_ID (+))
And (SOURCE_SYSTEM.SOURCE_SYSTEM_SHORT_NAME = 'OMS')
 And (LT_FULFILLMENT_BATCH_STG.ODS_MODIFY_DATE >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - :v_cdc_oms_overlap)




) S
where NOT EXISTS 
	( select 1 from ODS_OWN.LT_FULFILLMENT_BATCH T
	where	T.FULFILLMENT_BATCH_OID	= S.FULFILLMENT_BATCH_OID 
		 and ((T.ORDER_BATCH_OID = S.ORDER_BATCH_OID) or (T.ORDER_BATCH_OID IS NULL and S.ORDER_BATCH_OID IS NULL)) and
		((T.SHIP_NODE = S.SHIP_NODE) or (T.SHIP_NODE IS NULL and S.SHIP_NODE IS NULL)) and
		((T.BATCH_ID = S.BATCH_ID) or (T.BATCH_ID IS NULL and S.BATCH_ID IS NULL)) and
		((T.AVAILABLE_DATE = S.AVAILABLE_DATE) or (T.AVAILABLE_DATE IS NULL and S.AVAILABLE_DATE IS NULL)) and
		((T.STATUS = S.STATUS) or (T.STATUS IS NULL and S.STATUS IS NULL)) and
		((T.PACK_LIST_TYPE = S.PACK_LIST_TYPE) or (T.PACK_LIST_TYPE IS NULL and S.PACK_LIST_TYPE IS NULL)) and
		((T.RETOUCHING_FLAG = S.RETOUCHING_FLAG) or (T.RETOUCHING_FLAG IS NULL and S.RETOUCHING_FLAG IS NULL)) and
		((T.MODIFYTS = S.MODIFYTS) or (T.MODIFYTS IS NULL and S.MODIFYTS IS NULL)) and
		((T.MODIFYPROGID = S.MODIFYPROGID) or (T.MODIFYPROGID IS NULL and S.MODIFYPROGID IS NULL)) and
		((T.ORDER_COUNT_BOC = S.ORDER_COUNT_BOC) or (T.ORDER_COUNT_BOC IS NULL and S.ORDER_COUNT_BOC IS NULL)) and
		((T.BOC_BATCH_CREATETS = S.BOC_BATCH_CREATETS) or (T.BOC_BATCH_CREATETS IS NULL and S.BOC_BATCH_CREATETS IS NULL)) and
		((T.SERVICE_RECOVERY = S.SERVICE_RECOVERY) or (T.SERVICE_RECOVERY IS NULL and S.SERVICE_RECOVERY IS NULL)) and
		((T.ODS_MODIFY_DATE = S.ODS_MODIFY_DATE) or (T.ODS_MODIFY_DATE IS NULL and S.ODS_MODIFY_DATE IS NULL)) and
		((T.SOURCE_SYSTEM_OID = S.SOURCE_SYSTEM_OID) or (T.SOURCE_SYSTEM_OID IS NULL and S.SOURCE_SYSTEM_OID IS NULL)) and
		((T.BATCH_TYPE = S.BATCH_TYPE) or (T.BATCH_TYPE IS NULL and S.BATCH_TYPE IS NULL))
        )

  
  

  



&


/*-----------------------------------------------*/
/* TASK No. 40 */
/* Recycle previous errors */

insert into RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
(
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE,
	IND_UPDATE
)
select	DISTINCT FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE,
	'I' IND_UPDATE
from	RAX_APP_USER.E$_LT_FULFILL_BATCH2260001 E
where 	not exists (
		select	'?'
		from	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001 T
		where			T.FULFILLMENT_BATCH_OID=E.FULFILLMENT_BATCH_OID
		)
and	E.ODI_ORIGIN	= '(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT'
and	E.ODI_ERR_TYPE	= 'F'

&


/*-----------------------------------------------*/
/* TASK No. 41 */
/* Analyze integration table */



begin
    dbms_stats.gather_table_stats(
	ownname => 'RAX_APP_USER',
	tabname => 'I$_LT_FULFILL_BATCH2260001',
	estimate_percent => dbms_stats.auto_sample_size
    );
end;



&


/*-----------------------------------------------*/
/* TASK No. 42 */
/* Create Index on flow table */


create index	RAX_APP_USER.I$_LT_FULFILL_BATCH_IDX2260001
on		RAX_APP_USER.I$_LT_FULFILL_BATCH2260001 (FULFILLMENT_BATCH_OID)
NOLOGGING

&


/*-----------------------------------------------*/
/* TASK No. 43 */
/* create check table */



BEGIN
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.SNP_CHECK_TAB
(
	CATALOG_NAME	VARCHAR2(100 CHAR) NULL ,
	SCHEMA_NAME	VARCHAR2(100 CHAR) NULL ,
	RESOURCE_NAME	VARCHAR2(100 CHAR) NULL,
	FULL_RES_NAME	VARCHAR2(100 CHAR) NULL,
	ERR_TYPE		VARCHAR2(1 CHAR) NULL,
	ERR_MESS		VARCHAR2(250 CHAR) NULL ,
	CHECK_DATE	DATE NULL,
	ORIGIN		VARCHAR2(100 CHAR) NULL,
	CONS_NAME	VARCHAR2(35 CHAR) NULL,
	CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ERR_COUNT		NUMBER(10) NULL
)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -955 THEN
         RAISE;
      END IF;
END;
	

&


/*-----------------------------------------------*/
/* TASK No. 44 */
/* delete previous check sum */

delete from	RAX_APP_USER.SNP_CHECK_TAB
where	SCHEMA_NAME	= 'ODS_OWN'
and	ORIGIN 		= '(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT'
and	ERR_TYPE 		= 'F'


&


/*-----------------------------------------------*/
/* TASK No. 45 */
/* create error table */



BEGIN
   EXECUTE IMMEDIATE 'create table RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
(
	ODI_ROW_ID 		UROWID,
	ODI_ERR_TYPE		VARCHAR2(1 CHAR) NULL, 
	ODI_ERR_MESS		VARCHAR2(250 CHAR) NULL,
	ODI_CHECK_DATE	DATE NULL, 
	FULFILLMENT_BATCH_OID	NUMBER NULL,
	ORDER_BATCH_OID	NUMBER NULL,
	SHIP_NODE	VARCHAR2(24) NULL,
	BATCH_ID	VARCHAR2(40) NULL,
	AVAILABLE_DATE	DATE NULL,
	STATUS	VARCHAR2(40) NULL,
	PACK_LIST_TYPE	VARCHAR2(20) NULL,
	RETOUCHING_FLAG	VARCHAR2(5) NULL,
	MODIFYTS	DATE NULL,
	MODIFYPROGID	VARCHAR2(40) NULL,
	ORDER_COUNT_BOC	NUMBER(5) NULL,
	BOC_BATCH_CREATETS	DATE NULL,
	SERVICE_RECOVERY	VARCHAR2(40) NULL,
	ODS_CREATE_DATE	DATE NULL,
	ODS_MODIFY_DATE	DATE NULL,
	SOURCE_SYSTEM_OID	NUMBER NULL,
	BATCH_TYPE	VARCHAR2(20) NULL,
	ODI_ORIGIN		VARCHAR2(100 CHAR) NULL,
	ODI_CONS_NAME	VARCHAR2(35 CHAR) NULL,
	ODI_CONS_TYPE		VARCHAR2(2 CHAR) NULL,
	ODI_PK			VARCHAR2(32 CHAR) PRIMARY KEY,
	ODI_SESS_NO		VARCHAR2(19 CHAR)
)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -955 THEN
         RAISE;
      END IF;
END;



&


/*-----------------------------------------------*/
/* TASK No. 46 */
/* delete previous errors */

delete from 	RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
where	(ODI_ERR_TYPE = 'S'	and 'F' = 'S')
or	(ODI_ERR_TYPE = 'F'	and ODI_ORIGIN = '(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT')


&


/*-----------------------------------------------*/
/* TASK No. 47 */
/* Create index on PK */

 
/* FLOW CONTROL CREATE THE iNDEX ON THE I$TABLE */

BEGIN
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
on	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001 (FULFILLMENT_BATCH_OID)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -972 AND SQLCODE != -1418 AND SQLCODE != -1408 AND SQLCODE != -955 THEN
         RAISE;
      END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 48 */
/* insert PK errors */

DECLARE
               CheckTable                             VarChar2(60);
               TargetTable                            VarChar2(60);
               VariableCheckTable                     VarChar2(60);

BEGIN
               SELECT 'RAX_APP_USER.I$_LT_FULFILL_BATCH' INTO CheckTable FROM DUAL;
               SELECT 'ODS_OWN.LT_FULFILLMENT_BATCH' INTO TargetTable FROM DUAL;

IF CheckTable = TargetTable THEN
   VariableCheckTable := CheckTable; 
ELSE
   VariableCheckTable := CheckTable || '2260001';
END IF;

execute immediate '
insert into RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_ORIGIN,
	ODI_CHECK_DATE,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
)
select	SYS_GUID(),
	:v_sess_no, 
	rowid,
	''F'', 
	''ODI-15064: The primary key LT_FULFILLMENT_BATCH_PK is not unique.'',
	''(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT'',
	sysdate,
	''LT_FULFILLMENT_BATCH_PK'',
	''PK'',	
	LT_FULFILL_BATCH.FULFILLMENT_BATCH_OID,
	LT_FULFILL_BATCH.ORDER_BATCH_OID,
	LT_FULFILL_BATCH.SHIP_NODE,
	LT_FULFILL_BATCH.BATCH_ID,
	LT_FULFILL_BATCH.AVAILABLE_DATE,
	LT_FULFILL_BATCH.STATUS,
	LT_FULFILL_BATCH.PACK_LIST_TYPE,
	LT_FULFILL_BATCH.RETOUCHING_FLAG,
	LT_FULFILL_BATCH.MODIFYTS,
	LT_FULFILL_BATCH.MODIFYPROGID,
	LT_FULFILL_BATCH.ORDER_COUNT_BOC,
	LT_FULFILL_BATCH.BOC_BATCH_CREATETS,
	LT_FULFILL_BATCH.SERVICE_RECOVERY,
	LT_FULFILL_BATCH.ODS_CREATE_DATE,
	LT_FULFILL_BATCH.ODS_MODIFY_DATE,
	LT_FULFILL_BATCH.SOURCE_SYSTEM_OID,
	LT_FULFILL_BATCH.BATCH_TYPE
from	'
 || VariableCheckTable || 
' LT_FULFILL_BATCH 
where	exists  (
		select	SUB1.FULFILLMENT_BATCH_OID
		from 	' 
|| VariableCheckTable ||
'  SUB1
		where 	SUB1.FULFILLMENT_BATCH_OID=LT_FULFILL_BATCH.FULFILLMENT_BATCH_OID
		group by 	SUB1.FULFILLMENT_BATCH_OID
		having 	count(1) > 1
		)
';

END;


&


/*-----------------------------------------------*/
/* TASK No. 49 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column FULFILLMENT_BATCH_OID cannot be null.',
	sysdate,
	'(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT',
	'FULFILLMENT_BATCH_OID',
	'NN',	
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
from	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
where	FULFILLMENT_BATCH_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 50 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column ORDER_BATCH_OID cannot be null.',
	sysdate,
	'(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT',
	'ORDER_BATCH_OID',
	'NN',	
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
from	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
where	ORDER_BATCH_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 51 */
/* insert Not Null errors */

insert into RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
(
	ODI_PK,
	ODI_SESS_NO,
	ODI_ROW_ID,
	ODI_ERR_TYPE,
	ODI_ERR_MESS,
	ODI_CHECK_DATE,
	ODI_ORIGIN,
	ODI_CONS_NAME,
	ODI_CONS_TYPE,
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
)
select
	SYS_GUID(),
	:v_sess_no, 
	rowid,
	'F', 
	'ODI-15066: The column SOURCE_SYSTEM_OID cannot be null.',
	sysdate,
	'(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT',
	'SOURCE_SYSTEM_OID',
	'NN',	
	FULFILLMENT_BATCH_OID,
	ORDER_BATCH_OID,
	SHIP_NODE,
	BATCH_ID,
	AVAILABLE_DATE,
	STATUS,
	PACK_LIST_TYPE,
	RETOUCHING_FLAG,
	MODIFYTS,
	MODIFYPROGID,
	ORDER_COUNT_BOC,
	BOC_BATCH_CREATETS,
	SERVICE_RECOVERY,
	ODS_CREATE_DATE,
	ODS_MODIFY_DATE,
	SOURCE_SYSTEM_OID,
	BATCH_TYPE
from	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001
where	SOURCE_SYSTEM_OID is null



&


/*-----------------------------------------------*/
/* TASK No. 52 */
/* create index on error table */

 
/* FLOW CONTROL CREATE INDEX ON THE E$TABLE */

BEGIN
   EXECUTE IMMEDIATE 'create index 	RAX_APP_USER.E$_LT_FULFILL_BATCH2260001
on	RAX_APP_USER.E$_LT_FULFILL_BATCH2260001 (ODI_ROW_ID)';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -972 AND SQLCODE != -1418 AND SQLCODE != -1408 AND SQLCODE != -955 THEN
         RAISE;
      END IF;
END;


&


/*-----------------------------------------------*/
/* TASK No. 53 */
/* delete errors from controlled table */

delete from	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001  T
where	exists 	(
		select	1
		from	RAX_APP_USER.E$_LT_FULFILL_BATCH2260001 E
		where ODI_SESS_NO = :v_sess_no
		and T.rowid = E.ODI_ROW_ID
		)



&


/*-----------------------------------------------*/
/* TASK No. 54 */
/* insert check sum into check table */

insert into RAX_APP_USER.SNP_CHECK_TAB
(
	SCHEMA_NAME,
	RESOURCE_NAME,
	FULL_RES_NAME,
	ERR_TYPE,
	ERR_MESS,
	CHECK_DATE,
	ORIGIN,
	CONS_NAME,
	CONS_TYPE,
	ERR_COUNT
)
select	
	'ODS_OWN',
	'LT_FULFILL_BATCH',
	'ODS_OWN.LT_FULFILLMENT_BATCH2260001',
	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE,
	count(1) 
from	RAX_APP_USER.E$_LT_FULFILL_BATCH2260001 E
where	E.ODI_ERR_TYPE	= 'F'
and	E.ODI_ORIGIN 	= '(2260001)ODS_Project.LOAD_LT_FULFILLMENT_BATCH_INT'
group by	E.ODI_ERR_TYPE,
	E.ODI_ERR_MESS,
	E.ODI_CHECK_DATE,
	E.ODI_ORIGIN,
	E.ODI_CONS_NAME,
	E.ODI_CONS_TYPE


&


/*-----------------------------------------------*/
/* TASK No. 55 */
/* Merge Rows */

merge into	ODS_OWN.LT_FULFILLMENT_BATCH T
using	RAX_APP_USER.I$_LT_FULFILL_BATCH2260001 S
on	(
		T.FULFILLMENT_BATCH_OID=S.FULFILLMENT_BATCH_OID
	)
when matched
then update set
	T.ORDER_BATCH_OID	= S.ORDER_BATCH_OID,
	T.SHIP_NODE	= S.SHIP_NODE,
	T.BATCH_ID	= S.BATCH_ID,
	T.AVAILABLE_DATE	= S.AVAILABLE_DATE,
	T.STATUS	= S.STATUS,
	T.PACK_LIST_TYPE	= S.PACK_LIST_TYPE,
	T.RETOUCHING_FLAG	= S.RETOUCHING_FLAG,
	T.MODIFYTS	= S.MODIFYTS,
	T.MODIFYPROGID	= S.MODIFYPROGID,
	T.ORDER_COUNT_BOC	= S.ORDER_COUNT_BOC,
	T.BOC_BATCH_CREATETS	= S.BOC_BATCH_CREATETS,
	T.SERVICE_RECOVERY	= S.SERVICE_RECOVERY,
	T.ODS_MODIFY_DATE	= S.ODS_MODIFY_DATE,
	T.SOURCE_SYSTEM_OID	= S.SOURCE_SYSTEM_OID,
	T.BATCH_TYPE	= S.BATCH_TYPE
	
when not matched
then insert
	(
	T.FULFILLMENT_BATCH_OID,
	T.ORDER_BATCH_OID,
	T.SHIP_NODE,
	T.BATCH_ID,
	T.AVAILABLE_DATE,
	T.STATUS,
	T.PACK_LIST_TYPE,
	T.RETOUCHING_FLAG,
	T.MODIFYTS,
	T.MODIFYPROGID,
	T.ORDER_COUNT_BOC,
	T.BOC_BATCH_CREATETS,
	T.SERVICE_RECOVERY,
	T.ODS_CREATE_DATE,
	T.ODS_MODIFY_DATE,
	T.SOURCE_SYSTEM_OID,
	T.BATCH_TYPE
	
	)
values
	(
	S.FULFILLMENT_BATCH_OID,
	S.ORDER_BATCH_OID,
	S.SHIP_NODE,
	S.BATCH_ID,
	S.AVAILABLE_DATE,
	S.STATUS,
	S.PACK_LIST_TYPE,
	S.RETOUCHING_FLAG,
	S.MODIFYTS,
	S.MODIFYPROGID,
	S.ORDER_COUNT_BOC,
	S.BOC_BATCH_CREATETS,
	S.SERVICE_RECOVERY,
	S.ODS_CREATE_DATE,
	S.ODS_MODIFY_DATE,
	S.SOURCE_SYSTEM_OID,
	S.BATCH_TYPE
	
	)

&


/*-----------------------------------------------*/
/* TASK No. 56 */
/* Commit transaction */

/*commit*/


/*-----------------------------------------------*/
/* TASK No. 57 */
/* Drop flow table */


drop table RAX_APP_USER.I$_LT_FULFILL_BATCH2260001


&


/*-----------------------------------------------*/
/* TASK No. 58 */
/* update batch_type */

merge into ods_own.order_batch t
using
(
select order_batch_oid
, batch_type
from ods_own.lt_fulfillment_batch
where batch_type is not null
and ods_modify_date >= TO_DATE(SUBSTR(:v_cdc_load_date, 1, 19), 'YYYY-MM-DD HH24:MI:SS')  - :v_cdc_oms_overlap
) s
on (s.order_batch_oid = t.order_batch_oid)
when matched then update
set t.batch_type = s.batch_type
where t.batch_type is null or t.batch_type <> s.batch_type

&


/*-----------------------------------------------*/
/* TASK No. 59 */
/* Update CDC Load Status */

UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
+ nvl((TIMEZONE_OFFSET/24), 0) 
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
UPDATE ODS_OWN.ODS_CDC_LOAD_STATUS
SET LAST_CDC_COMPLETION_DATE=TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env
*/

&


/*-----------------------------------------------*/
/* TASK No. 60 */
/* Insert CDC Audit Record */

INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME,
TIMEZONE_OFFSET              
)
select 
:v_cdc_load_table_name
,:v_sess_no
,'LOAD_LT_FULFILLMENT_BATCH_PKG'
,'005'
,TO_DATE(SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS')
,TO_DATE (SUBSTR(:v_cdc_load_date, 1, 19),'YYYY-MM-DD HH24:MI:SS')
,:v_cdc_overlap
,SYSDATE
,:v_env
,TIMEZONE_OFFSET
from 
ODS_OWN.ODS_CDC_LOAD_STATUS
WHERE ODS_TABLE_NAME=:v_cdc_load_table_name
AND CONTEXT_NAME = :v_env

/*
INSERT INTO RAX_APP_USER.ODS_CDC_LOAD_STATUS_AUDIT
(TABLE_NAME,
SESS_NO,                      
SESS_NAME,                    
SCEN_VERSION,                 
SESS_BEG,                     
ORIG_LAST_CDC_COMPLETION_DATE,
OVERLAP,
CREATE_DATE,
CONTEXT_NAME              
)
values (
:v_cdc_load_table_name,
:v_sess_no,
'LOAD_LT_FULFILLMENT_BATCH_PKG',
'005',
TO_DATE(
             SUBSTR(:v_sess_beg, 1, 19), 'RRRR-MM-DD HH24:MI:SS'),
TO_DATE (SUBSTR (:v_cdc_load_date, 1, 19),
                           'YYYY-MM-DD HH24:MI:SS'
                          )
,:v_cdc_overlap,
SYSDATE,
 :v_env)
*/


&


/*-----------------------------------------------*/
